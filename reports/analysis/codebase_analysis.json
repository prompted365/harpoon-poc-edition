{
  "metadata": {
    "generated_at": "2025-10-05T20:37:23.133496",
    "root_path": "/Users/breydentaylor/homeskillet-oa4-rs",
    "total_files": 69,
    "total_functions": 382,
    "total_exports": 194,
    "total_lines": 18220,
    "file_types": {
      ".js": 3,
      ".py": 15,
      ".ts": 4,
      ".rs": 55,
      ".tsx": 8
    }
  },
  "file_tree": {
    "name": "homeskillet-oa4-rs",
    "type": "directory",
    "children": [
      {
        "name": "Cargo.toml",
        "type": "file",
        "size": 1272
      },
      {
        "name": "Dockerfile",
        "type": "file",
        "size": 980
      },
      {
        "name": "Makefile",
        "type": "file",
        "size": 3101
      },
      {
        "name": "crates",
        "type": "directory",
        "children": [
          {
            "name": "engine_pymlx",
            "type": "directory",
            "children": [
              {
                "name": "Cargo.toml",
                "type": "file",
                "size": 202
              },
              {
                "name": "src",
                "type": "directory",
                "children": [
                  {
                    "name": "lib.rs",
                    "type": "file",
                    "size": 2634
                  }
                ]
              }
            ]
          },
          {
            "name": "harpoon-core",
            "type": "directory",
            "children": [
              {
                "name": "Cargo.toml",
                "type": "file",
                "size": 1271
              },
              {
                "name": "src",
                "type": "directory",
                "children": [
                  {
                    "name": "lib.rs",
                    "type": "file",
                    "size": 21741
                  }
                ]
              }
            ]
          },
          {
            "name": "harpoon_bridge",
            "type": "directory",
            "children": [
              {
                "name": "Cargo.toml",
                "type": "file",
                "size": 845
              },
              {
                "name": "src",
                "type": "directory",
                "children": [
                  {
                    "name": "covenant.rs",
                    "type": "file",
                    "size": 4897
                  },
                  {
                    "name": "fusion.rs",
                    "type": "file",
                    "size": 4036
                  },
                  {
                    "name": "lib.rs",
                    "type": "file",
                    "size": 7573
                  },
                  {
                    "name": "strike.rs",
                    "type": "file",
                    "size": 5879
                  }
                ]
              }
            ]
          },
          {
            "name": "mcp_server",
            "type": "directory",
            "children": [
              {
                "name": "Cargo.toml",
                "type": "file",
                "size": 1334
              },
              {
                "name": "src",
                "type": "directory",
                "children": [
                  {
                    "name": "cli.rs",
                    "type": "file",
                    "size": 5044
                  },
                  {
                    "name": "handlers.rs",
                    "type": "file",
                    "size": 10520
                  },
                  {
                    "name": "lib.rs",
                    "type": "file",
                    "size": 9748
                  },
                  {
                    "name": "protocol.rs",
                    "type": "file",
                    "size": 2190
                  },
                  {
                    "name": "transport",
                    "type": "directory",
                    "children": [
                      {
                        "name": "http.rs",
                        "type": "file",
                        "size": 4428
                      },
                      {
                        "name": "stdio.rs",
                        "type": "file",
                        "size": 3192
                      },
                      {
                        "name": "websocket.rs",
                        "type": "file",
                        "size": 7224
                      }
                    ]
                  },
                  {
                    "name": "transport.rs",
                    "type": "file",
                    "size": 86
                  }
                ]
              }
            ]
          },
          {
            "name": "orchestrator",
            "type": "directory",
            "children": [
              {
                "name": "Cargo.toml",
                "type": "file",
                "size": 1788
              },
              {
                "name": "src",
                "type": "directory",
                "children": [
                  {
                    "name": "bin",
                    "type": "directory",
                    "children": [
                      {
                        "name": "homeskillet-orchestrator.rs",
                        "type": "file",
                        "size": 1501
                      }
                    ]
                  },
                  {
                    "name": "config.rs",
                    "type": "file",
                    "size": 11938
                  },
                  {
                    "name": "hosted_ai.rs",
                    "type": "file",
                    "size": 16827
                  },
                  {
                    "name": "lib.rs",
                    "type": "file",
                    "size": 9496
                  },
                  {
                    "name": "metrics.rs",
                    "type": "file",
                    "size": 8455
                  },
                  {
                    "name": "server.rs",
                    "type": "file",
                    "size": 11664
                  },
                  {
                    "name": "tenant.rs",
                    "type": "file",
                    "size": 12171
                  },
                  {
                    "name": "types.rs",
                    "type": "file",
                    "size": 3238
                  }
                ]
              },
              {
                "name": "tests",
                "type": "directory",
                "children": [
                  {
                    "name": "hosted_ai_integration.rs",
                    "type": "file",
                    "size": 7830
                  }
                ]
              }
            ]
          },
          {
            "name": "pyffi",
            "type": "directory",
            "children": [
              {
                "name": "Cargo.toml",
                "type": "file",
                "size": 454
              },
              {
                "name": "src",
                "type": "directory",
                "children": [
                  {
                    "name": "lib.rs",
                    "type": "file",
                    "size": 2179
                  }
                ]
              }
            ]
          },
          {
            "name": "resources",
            "type": "directory",
            "children": [
              {
                "name": "Cargo.toml",
                "type": "file",
                "size": 431
              },
              {
                "name": "src",
                "type": "directory",
                "children": [
                  {
                    "name": "lib.rs",
                    "type": "file",
                    "size": 6061
                  },
                  {
                    "name": "prompts",
                    "type": "directory",
                    "children": [
                      {
                        "name": "agent.rs",
                        "type": "file",
                        "size": 2426
                      },
                      {
                        "name": "covenant.rs",
                        "type": "file",
                        "size": 2924
                      },
                      {
                        "name": "fusion.rs",
                        "type": "file",
                        "size": 1569
                      },
                      {
                        "name": "strike.rs",
                        "type": "file",
                        "size": 3045
                      }
                    ]
                  },
                  {
                    "name": "prompts.rs",
                    "type": "file",
                    "size": 112
                  },
                  {
                    "name": "sampling.rs",
                    "type": "file",
                    "size": 6983
                  },
                  {
                    "name": "schemas",
                    "type": "directory",
                    "children": [
                      {
                        "name": "agent.rs",
                        "type": "file",
                        "size": 5710
                      },
                      {
                        "name": "covenant.rs",
                        "type": "file",
                        "size": 5397
                      },
                      {
                        "name": "fusion.rs",
                        "type": "file",
                        "size": 1954
                      },
                      {
                        "name": "strike.rs",
                        "type": "file",
                        "size": 2919
                      }
                    ]
                  },
                  {
                    "name": "schemas.rs",
                    "type": "file",
                    "size": 122
                  },
                  {
                    "name": "tools",
                    "type": "directory",
                    "children": [
                      {
                        "name": "covenant.rs",
                        "type": "file",
                        "size": 1622
                      },
                      {
                        "name": "fusion.rs",
                        "type": "file",
                        "size": 1846
                      },
                      {
                        "name": "github.rs",
                        "type": "file",
                        "size": 4197
                      },
                      {
                        "name": "mlx.rs",
                        "type": "file",
                        "size": 3510
                      }
                    ]
                  },
                  {
                    "name": "tools.rs",
                    "type": "file",
                    "size": 101
                  }
                ]
              }
            ]
          },
          {
            "name": "service",
            "type": "directory",
            "children": [
              {
                "name": "Cargo.toml",
                "type": "file",
                "size": 800
              },
              {
                "name": "src",
                "type": "directory",
                "children": [
                  {
                    "name": "auth",
                    "type": "directory",
                    "children": [
                      {
                        "name": "github_oauth.rs",
                        "type": "file",
                        "size": 4657
                      },
                      {
                        "name": "mod.rs",
                        "type": "file",
                        "size": 21
                      }
                    ]
                  },
                  {
                    "name": "config.rs",
                    "type": "file",
                    "size": 3275
                  },
                  {
                    "name": "main.rs",
                    "type": "file",
                    "size": 6823
                  },
                  {
                    "name": "mock_engine.rs",
                    "type": "file",
                    "size": 711
                  }
                ]
              }
            ]
          },
          {
            "name": "wasm_classifier",
            "type": "directory",
            "children": [
              {
                "name": "Cargo.toml",
                "type": "file",
                "size": 400
              },
              {
                "name": "src",
                "type": "directory",
                "children": [
                  {
                    "name": "lib.rs",
                    "type": "file",
                    "size": 3239
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "scripts",
        "type": "directory",
        "children": [
          {
            "name": "analysis",
            "type": "directory",
            "children": [
              {
                "name": "generate-project-analysis.py",
                "type": "file",
                "size": 9141
              }
            ]
          },
          {
            "name": "analyze_codebase.py",
            "type": "file",
            "size": 18136
          },
          {
            "name": "analyze_codebase_simple.py",
            "type": "file",
            "size": 20900
          },
          {
            "name": "compliance",
            "type": "directory",
            "children": [
              {
                "name": "audit-trail-generator.py",
                "type": "file",
                "size": 28199
              },
              {
                "name": "compliance-dashboard.py",
                "type": "file",
                "size": 17830
              },
              {
                "name": "compliance-scanner.py",
                "type": "file",
                "size": 30573
              },
              {
                "name": "generate-policy-templates.py",
                "type": "file",
                "size": 21706
              }
            ]
          },
          {
            "name": "comprehensive_analysis.py",
            "type": "file",
            "size": 10852
          },
          {
            "name": "generate_comprehensive_network_graph.py",
            "type": "file",
            "size": 8422
          },
          {
            "name": "generate_high_signal_graph.py",
            "type": "file",
            "size": 21401
          },
          {
            "name": "generate_network_graph.py",
            "type": "file",
            "size": 57200
          },
          {
            "name": "generate_network_graph_enhanced.py",
            "type": "file",
            "size": 26679
          },
          {
            "name": "generate_network_graph_qoq.py",
            "type": "file",
            "size": 13562
          },
          {
            "name": "generate_unified_analysis.py",
            "type": "file",
            "size": 21457
          },
          {
            "name": "qoq_emit.py",
            "type": "file",
            "size": 3814
          }
        ]
      },
      {
        "name": "tests",
        "type": "directory",
        "children": [
          {
            "name": "e2e",
            "type": "directory",
            "children": [
              {
                "name": "full_system_test.rs",
                "type": "file",
                "size": 10245
              }
            ]
          },
          {
            "name": "integration",
            "type": "directory",
            "children": [
              {
                "name": "covenant_cocreation_test.rs",
                "type": "file",
                "size": 13624
              },
              {
                "name": "github_oauth_test.rs",
                "type": "file",
                "size": 2563
              },
              {
                "name": "hosted_ai_test.rs",
                "type": "file",
                "size": 3351
              },
              {
                "name": "qoq_integration_test.rs",
                "type": "file",
                "size": 3371
              },
              {
                "name": "wasm_classifier_test.rs",
                "type": "file",
                "size": 2931
              },
              {
                "name": "websocket_mcp_test.rs",
                "type": "file",
                "size": 5948
              }
            ]
          },
          {
            "name": "mocks",
            "type": "directory",
            "children": [
              {
                "name": "mod.rs",
                "type": "file",
                "size": 5763
              }
            ]
          }
        ]
      },
      {
        "name": "web-ui",
        "type": "directory",
        "children": [
          {
            "name": "app",
            "type": "directory",
            "children": [
              {
                "name": "api",
                "type": "directory",
                "children": [
                  {
                    "name": "github",
                    "type": "directory",
                    "children": [
                      {
                        "name": "device",
                        "type": "directory",
                        "children": [
                          {
                            "name": "poll",
                            "type": "directory",
                            "children": [
                              {
                                "name": "route.ts",
                                "type": "file",
                                "size": 2034
                              }
                            ]
                          },
                          {
                            "name": "start",
                            "type": "directory",
                            "children": [
                              {
                                "name": "route.ts",
                                "type": "file",
                                "size": 1417
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "name": "me",
                        "type": "directory",
                        "children": [
                          {
                            "name": "route.ts",
                            "type": "file",
                            "size": 1006
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "name": "layout.tsx",
                "type": "file",
                "size": 431
              },
              {
                "name": "page.tsx",
                "type": "file",
                "size": 1267
              }
            ]
          },
          {
            "name": "components",
            "type": "directory",
            "children": [
              {
                "name": "ConnectForm.tsx",
                "type": "file",
                "size": 1809
              },
              {
                "name": "GitHubAuth.tsx",
                "type": "file",
                "size": 3341
              },
              {
                "name": "McpClientProvider.tsx",
                "type": "file",
                "size": 4317
              },
              {
                "name": "QoQViewer.tsx",
                "type": "file",
                "size": 3684
              },
              {
                "name": "SessionLog.tsx",
                "type": "file",
                "size": 1451
              },
              {
                "name": "ToolList.tsx",
                "type": "file",
                "size": 3181
              }
            ]
          },
          {
            "name": "next.config.js",
            "type": "file",
            "size": 258
          },
          {
            "name": "package.json",
            "type": "file",
            "size": 598
          },
          {
            "name": "postcss.config.js",
            "type": "file",
            "size": 81
          },
          {
            "name": "tailwind.config.js",
            "type": "file",
            "size": 252
          }
        ]
      }
    ]
  },
  "functions": {
    "scripts/generate_comprehensive_network_graph.py": [
      {
        "name": "draw_arrow",
        "type": "function",
        "visibility": "public",
        "async": false
      }
    ],
    "scripts/generate_high_signal_graph.py": [
      {
        "name": "main",
        "type": "function",
        "visibility": "public",
        "async": false
      }
    ],
    "scripts/generate_unified_analysis.py": [
      {
        "name": "main",
        "type": "function",
        "visibility": "public",
        "async": false
      }
    ],
    "scripts/qoq_emit.py": [
      {
        "name": "git_hash",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "build_tree",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "list_symbols_and_flows",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "load_contracts",
        "type": "function",
        "visibility": "public",
        "async": false
      }
    ],
    "scripts/analyze_codebase_simple.py": [
      {
        "name": "setup_git_hook",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "main",
        "type": "function",
        "visibility": "public",
        "async": false
      }
    ],
    "scripts/comprehensive_analysis.py": [
      {
        "name": "run_command",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "count_lines_of_code",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "count_files",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "analyze_rust_crates",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "analyze_python_components",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "analyze_gtm_documentation",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "analyze_ai_agents",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "analyze_web_components",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "analyze_infrastructure",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "main",
        "type": "function",
        "visibility": "public",
        "async": false
      }
    ],
    "scripts/generate_network_graph.py": [
      {
        "name": "main",
        "type": "function",
        "visibility": "public",
        "async": false
      }
    ],
    "scripts/generate_network_graph_qoq.py": [
      {
        "name": "main",
        "type": "function",
        "visibility": "public",
        "async": false
      }
    ],
    "scripts/analyze_codebase.py": [
      {
        "name": "setup_git_hook",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "main",
        "type": "function",
        "visibility": "public",
        "async": false
      }
    ],
    "scripts/generate_network_graph_enhanced.py": [
      {
        "name": "main",
        "type": "function",
        "visibility": "public",
        "async": false
      }
    ],
    "scripts/compliance/audit-trail-generator.py": [
      {
        "name": "main",
        "type": "function",
        "visibility": "public",
        "async": true
      }
    ],
    "scripts/compliance/compliance-dashboard.py": [
      {
        "name": "main",
        "type": "function",
        "visibility": "public",
        "async": true
      }
    ],
    "scripts/compliance/compliance-scanner.py": [
      {
        "name": "main",
        "type": "function",
        "visibility": "public",
        "async": true
      }
    ],
    "scripts/compliance/generate-policy-templates.py": [
      {
        "name": "main",
        "type": "function",
        "visibility": "public",
        "async": false
      }
    ],
    "tests/mocks/mod.rs": [
      {
        "name": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "connect",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "disconnect",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "send",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "received_messages",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "start_device_flow",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "name": "poll_for_token",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "name": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "generate",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "set_manifest",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "allocate_gpu",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "name": "inference",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "name": "release",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "name": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "classify",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "start_device_flow",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "poll_for_token",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "allocate_gpu",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "inference",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "release",
        "type": "function",
        "visibility": "private",
        "async": false
      }
    ],
    "tests/integration/qoq_integration_test.rs": [
      {
        "name": "test_function",
        "type": "function",
        "visibility": "public",
        "async": false
      }
    ],
    "tests/integration/websocket_mcp_test.rs": [
      {
        "name": "start_test_server",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "shutdown",
        "type": "function",
        "visibility": "private",
        "async": false
      }
    ],
    "tests/integration/github_oauth_test.rs": [
      {
        "name": "mock_github_responses",
        "type": "function",
        "visibility": "public",
        "async": false
      }
    ],
    "tests/e2e/full_system_test.rs": [
      {
        "name": "smoke_test_mcp_protocol",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "smoke_test_unified_request",
        "type": "function",
        "visibility": "private",
        "async": false
      }
    ],
    "web-ui/components/McpClientProvider.tsx": [
      {
        "name": "McpClientProvider",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "useMcp",
        "type": "function",
        "visibility": "public",
        "async": false
      }
    ],
    "web-ui/components/QoQViewer.tsx": [
      {
        "name": "QoQViewer",
        "type": "function",
        "visibility": "public",
        "async": false
      }
    ],
    "web-ui/components/ConnectForm.tsx": [
      {
        "name": "ConnectForm",
        "type": "function",
        "visibility": "public",
        "async": false
      }
    ],
    "web-ui/components/ToolList.tsx": [
      {
        "name": "ToolList",
        "type": "function",
        "visibility": "public",
        "async": false
      }
    ],
    "web-ui/components/GitHubAuth.tsx": [
      {
        "name": "GitHubAuth",
        "type": "function",
        "visibility": "public",
        "async": false
      }
    ],
    "web-ui/components/SessionLog.tsx": [
      {
        "name": "SessionLog",
        "type": "function",
        "visibility": "public",
        "async": false
      }
    ],
    "web-ui/app/api/github/me/route.ts": [
      {
        "name": "GET",
        "type": "function",
        "visibility": "public",
        "async": true
      }
    ],
    "web-ui/app/api/github/device/start/route.ts": [
      {
        "name": "POST",
        "type": "function",
        "visibility": "public",
        "async": true
      }
    ],
    "web-ui/app/api/github/device/poll/route.ts": [
      {
        "name": "POST",
        "type": "function",
        "visibility": "public",
        "async": true
      }
    ],
    "crates/orchestrator/tests/hosted_ai_integration.rs": [
      {
        "name": "get_test_config",
        "type": "function",
        "visibility": "private",
        "async": false
      }
    ],
    "crates/orchestrator/src/types.rs": [
      {
        "name": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "classify",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "name": "run",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "name": "classify",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "run",
        "type": "function",
        "visibility": "private",
        "async": false
      }
    ],
    "crates/orchestrator/src/tenant.rs": [
      {
        "name": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "get_tenant",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "get_context_from_api_key",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "check_permission",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "update_usage",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "check_limits",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "record_event",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "get_usage_summary",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "get_current_usage",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "get_tenant",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "get_context_from_api_key",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "check_permission",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "update_usage",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "check_limits",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "record_event",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "get_usage_summary",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "get_current_usage",
        "type": "function",
        "visibility": "private",
        "async": false
      }
    ],
    "crates/orchestrator/src/config.rs": [
      {
        "name": "load",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "load_from_file",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "save_to_file",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "with_server",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "with_hosted_ai",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "with_cache",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "with_monitoring",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "build",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "default",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "find_config_file",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "apply_env_overrides",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "validate",
        "type": "function",
        "visibility": "private",
        "async": false
      }
    ],
    "crates/orchestrator/src/lib.rs": [
      {
        "name": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "classify",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "run",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "classify_async",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "name": "generate_direct",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "name": "example",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "convert_gen_options",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "generate",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "generate",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "generate",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "generate",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "classify_async",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "generate_direct",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "run_gemma",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "run_qwen",
        "type": "function",
        "visibility": "private",
        "async": false
      }
    ],
    "crates/orchestrator/src/server.rs": [
      {
        "name": "create_router",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "start_server",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "name": "into_response",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "health_handler",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "ready_handler",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "metrics_handler",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "classify_handler",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "inference_handler",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "list_models_handler",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "start_server",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "create_metrics_router",
        "type": "function",
        "visibility": "private",
        "async": false
      }
    ],
    "crates/orchestrator/src/metrics.rs": [
      {
        "name": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "observe_duration",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "init_metrics",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "record_allocation_attempt",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "update_active_allocations",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "record_inference_request",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "record_inference_metrics",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "update_circuit_breaker",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "record_api_request",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "update_gpu_utilization",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "track_inference_cost",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "gather",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "render",
        "type": "function",
        "visibility": "public",
        "async": false
      }
    ],
    "crates/orchestrator/src/hosted_ai.rs": [
      {
        "name": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "request_vgpu",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "name": "inference",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "name": "release",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "name": "get_allocation",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "list_allocations",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "get_metrics",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "health_check",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "name": "default_timeout",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "default_max_retries",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "request_vgpu",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "inference",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "release",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "health_check",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "post_with_retry",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "delete_with_retry",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "make_post_request",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "make_delete_request",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "handle_response",
        "type": "function",
        "visibility": "private",
        "async": false
      }
    ],
    "crates/orchestrator/src/bin/homeskillet-orchestrator.rs": [
      {
        "name": "main",
        "type": "function",
        "visibility": "private",
        "async": false
      }
    ],
    "crates/harpoon_bridge/src/covenant.rs": [
      {
        "name": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "reality_state",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "target_state",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "add_metadata",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "build",
        "type": "function",
        "visibility": "public",
        "async": false
      }
    ],
    "crates/harpoon_bridge/src/strike.rs": [
      {
        "name": "execute_strike",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "name": "monitor_strike",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "name": "execute_strike",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "select_strike_targets",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "create_pr_for_target",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "monitor_strike",
        "type": "function",
        "visibility": "private",
        "async": false
      }
    ],
    "crates/harpoon_bridge/src/lib.rs": [
      {
        "name": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "create_covenant",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "name": "process",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "name": "execute_strike",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "name": "create_covenant",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "process",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "process_with_hosted_ai",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "run_with_hosted_ai",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "execute_strike",
        "type": "function",
        "visibility": "private",
        "async": false
      }
    ],
    "crates/harpoon_bridge/src/fusion.rs": [
      {
        "name": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "process_fragment",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "name": "process_fragments",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "name": "stats",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "process_fragment",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "process_fragments",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "main",
        "type": "function",
        "visibility": "private",
        "async": false
      }
    ],
    "crates/mcp_server/src/handlers.rs": [
      {
        "name": "handle_tool_call",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "handle_resource_read",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "handle_sampling",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "handle_classify",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "handle_inference",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "handle_create_pr",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "handle_analyze_repo",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "handle_covenant_resource",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "handle_strike_resource",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "handle_agents_resource",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "handle_qoq_index",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "handle_qoq_status",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "handle_qoq_locate",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "handle_covenant_evaluate",
        "type": "function",
        "visibility": "private",
        "async": false
      }
    ],
    "crates/mcp_server/src/lib.rs": [
      {
        "name": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "handle_request",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "name": "add_connection",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "remove_connection",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "initialize",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "list_tools",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "call_tool",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "list_resources",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "read_resource",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "list_prompts",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "get_prompt",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "sample",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "handle_request",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "initialize",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "list_tools",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "call_tool",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "list_resources",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "read_resource",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "list_prompts",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "get_prompt",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "sample",
        "type": "function",
        "visibility": "private",
        "async": false
      }
    ],
    "crates/mcp_server/src/cli.rs": [
      {
        "name": "new",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "generate",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "main",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "example_client",
        "type": "function",
        "visibility": "private",
        "async": false
      }
    ],
    "crates/mcp_server/src/transport/websocket.rs": [
      {
        "name": "new",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "name": "run",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "name": "load_manifest",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "name": "refresh_manifest",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "name": "new",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "run",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "handle_session",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "load_manifest",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "refresh_manifest",
        "type": "function",
        "visibility": "private",
        "async": false
      }
    ],
    "crates/mcp_server/src/transport/stdio.rs": [
      {
        "name": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "run",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "name": "run",
        "type": "function",
        "visibility": "private",
        "async": false
      }
    ],
    "crates/mcp_server/src/transport/http.rs": [
      {
        "name": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "router",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "run",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "name": "run",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "handle_health",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "handle_post",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "handle_sse",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "check_needs_sse",
        "type": "function",
        "visibility": "private",
        "async": false
      }
    ],
    "crates/service/src/config.rs": [
      {
        "name": "from_env",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "validate",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "load_hosted_ai_config",
        "type": "function",
        "visibility": "private",
        "async": false
      }
    ],
    "crates/service/src/mock_engine.rs": [
      {
        "name": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "generate",
        "type": "function",
        "visibility": "private",
        "async": false
      }
    ],
    "crates/service/src/main.rs": [
      {
        "name": "main",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "health",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "classify_legacy",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "run_legacy",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "process_unified",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "create_covenant",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "execute_strike",
        "type": "function",
        "visibility": "private",
        "async": false
      }
    ],
    "crates/service/src/auth/github_oauth.rs": [
      {
        "name": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "start_device_flow",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "name": "poll_for_token",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "name": "get_user",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "name": "start_device_flow",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "poll_for_token",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "get_user",
        "type": "function",
        "visibility": "private",
        "async": false
      }
    ],
    "crates/engine_pymlx/src/lib.rs": [
      {
        "name": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "generate",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "ensure_loaded",
        "type": "function",
        "visibility": "private",
        "async": false
      }
    ],
    "crates/resources/src/lib.rs": [
      {
        "name": "register_prompt",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "register_tool",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "register_schema",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "get_prompt",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "get_tool",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "get_schema",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "prompts_for_agent",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "export_json",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "render_prompt",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "load_builtin_resources",
        "type": "function",
        "visibility": "private",
        "async": false
      }
    ],
    "crates/resources/src/sampling.rs": [
      {
        "name": "architect",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "foreman",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "worker",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "register_strategy",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "should_sample",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "record_sample",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "get_samples_for_validation",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "sample_from_array",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "default",
        "type": "function",
        "visibility": "private",
        "async": false
      }
    ],
    "crates/resources/src/tools/covenant.rs": [
      {
        "name": "create_covenant_tool",
        "type": "function",
        "visibility": "public",
        "async": false
      }
    ],
    "crates/resources/src/tools/mlx.rs": [
      {
        "name": "classify_tool",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "inference_tool",
        "type": "function",
        "visibility": "public",
        "async": false
      }
    ],
    "crates/resources/src/tools/github.rs": [
      {
        "name": "create_pr_tool",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "analyze_repo_tool",
        "type": "function",
        "visibility": "public",
        "async": false
      }
    ],
    "crates/resources/src/tools/fusion.rs": [
      {
        "name": "process_fragments_tool",
        "type": "function",
        "visibility": "public",
        "async": false
      }
    ],
    "crates/resources/src/schemas/covenant.rs": [
      {
        "name": "covenant_schema",
        "type": "function",
        "visibility": "public",
        "async": false
      }
    ],
    "crates/resources/src/schemas/strike.rs": [
      {
        "name": "strike_order_schema",
        "type": "function",
        "visibility": "public",
        "async": false
      }
    ],
    "crates/resources/src/schemas/agent.rs": [
      {
        "name": "delegation_plan_schema",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "agent_message_schema",
        "type": "function",
        "visibility": "public",
        "async": false
      }
    ],
    "crates/resources/src/schemas/fusion.rs": [
      {
        "name": "fusion_trail_schema",
        "type": "function",
        "visibility": "public",
        "async": false
      }
    ],
    "crates/resources/src/prompts/covenant.rs": [
      {
        "name": "creation_prompt",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "review_prompt",
        "type": "function",
        "visibility": "public",
        "async": false
      }
    ],
    "crates/resources/src/prompts/strike.rs": [
      {
        "name": "delegation_prompt",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "pr_creation_prompt",
        "type": "function",
        "visibility": "public",
        "async": false
      }
    ],
    "crates/resources/src/prompts/agent.rs": [
      {
        "name": "agent_communication_prompt",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "task_delegation_prompt",
        "type": "function",
        "visibility": "public",
        "async": false
      }
    ],
    "crates/resources/src/prompts/fusion.rs": [
      {
        "name": "hygiene_prompt",
        "type": "function",
        "visibility": "public",
        "async": false
      }
    ],
    "crates/pyffi/src/lib.rs": [
      {
        "name": "init",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "classify",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "run",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "homeskillet_oa4_rs",
        "type": "function",
        "visibility": "private",
        "async": false
      }
    ],
    "crates/wasm_classifier/src/lib.rs": [
      {
        "name": "classify_task",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "get_version",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "init",
        "type": "function",
        "visibility": "public",
        "async": false
      }
    ],
    "crates/harpoon-core/src/lib.rs": [
      {
        "name": "get_absorbed",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "get_pending",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "get_events",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "get_iterations",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "get_anchors",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "as_dict",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "as_dict",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "as_dict",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "new_native",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "run_native_cycle",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "compute_fingerprint",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "thread_count",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "configured_thread_count",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "envelope_cycle",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "fingerprint",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "fragment_hash",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "envelope_cycle",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "fragment_hash",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "name": "from",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "extract_bound",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "new",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "to_report",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "from_data",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "new",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "compute_states",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "compute_states",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "configured_threads",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "thread_count",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "run_cycle",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "compute_anchor_hash",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "compute_fingerprint",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "detect_language",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "hygiene_score",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "compute_indent_balance",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "compute_comment_ratio",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "path",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "idx",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "lines",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "hash",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "hygiene_score",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "language",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "fingerprint",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "body_len",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "event",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "path",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "idx",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "lines",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "hash",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "hygiene_score",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "anchor_prev",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "anchor_next",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "language",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "fingerprint",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "iteration_index",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "absorbed",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "pending",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "events",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "iterations",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "anchors",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "threads",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "configured_threads",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "harpoon_core",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "name": "serde_json_to_py",
        "type": "function",
        "visibility": "private",
        "async": false
      }
    ]
  },
  "exports": {
    "scripts/generate_high_signal_graph.py": [
      {
        "name": "HighSignalVisualizer",
        "type": "class",
        "visibility": "public"
      }
    ],
    "scripts/generate_unified_analysis.py": [
      {
        "name": "UnifiedAnalyzer",
        "type": "class",
        "visibility": "public"
      }
    ],
    "scripts/analyze_codebase_simple.py": [
      {
        "name": "SimpleCodebaseAnalyzer",
        "type": "class",
        "visibility": "public"
      }
    ],
    "scripts/generate_network_graph.py": [
      {
        "name": "CodebaseNetworkVisualizer",
        "type": "class",
        "visibility": "public"
      }
    ],
    "scripts/generate_network_graph_qoq.py": [
      {
        "name": "QoQNetworkVisualizer",
        "type": "class",
        "visibility": "public"
      }
    ],
    "scripts/analyze_codebase.py": [
      {
        "name": "CodebaseAnalyzer",
        "type": "class",
        "visibility": "public"
      }
    ],
    "scripts/generate_network_graph_enhanced.py": [
      {
        "name": "EnhancedNetworkVisualizer",
        "type": "class",
        "visibility": "public"
      }
    ],
    "scripts/compliance/audit-trail-generator.py": [
      {
        "name": "AuditEventType",
        "type": "class",
        "visibility": "public"
      },
      {
        "name": "AuditEvent",
        "type": "class",
        "visibility": "public"
      },
      {
        "name": "AuditTrailGenerator",
        "type": "class",
        "visibility": "public"
      }
    ],
    "scripts/compliance/compliance-dashboard.py": [
      {
        "name": "ComplianceMetric",
        "type": "class",
        "visibility": "public"
      },
      {
        "name": "ComplianceDashboard",
        "type": "class",
        "visibility": "public"
      }
    ],
    "scripts/compliance/compliance-scanner.py": [
      {
        "name": "ComplianceFramework",
        "type": "class",
        "visibility": "public"
      },
      {
        "name": "ComplianceCheck",
        "type": "class",
        "visibility": "public"
      },
      {
        "name": "ComplianceResult",
        "type": "class",
        "visibility": "public"
      },
      {
        "name": "ComplianceScanner",
        "type": "class",
        "visibility": "public"
      }
    ],
    "scripts/compliance/generate-policy-templates.py": [
      {
        "name": "PolicyTemplateGenerator",
        "type": "class",
        "visibility": "public"
      }
    ],
    "tests/mocks/mod.rs": [
      {
        "name": "MockWebSocketConnection",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "MockGitHubClient",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "MockQoQGenerator",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "MockHostedAiClient",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "MockGpuAllocation",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "MockWasmClassifier",
        "type": "struct",
        "visibility": "public"
      }
    ],
    "tests/integration/qoq_integration_test.rs": [
      {
        "name": "TestStruct",
        "type": "struct",
        "visibility": "public"
      }
    ],
    "tests/integration/websocket_mcp_test.rs": [
      {
        "name": "TestServer",
        "type": "struct",
        "visibility": "private"
      }
    ],
    "tests/integration/covenant_cocreation_test.rs": [
      {
        "name": "implementation",
        "type": "trait",
        "visibility": "private"
      },
      {
        "name": "mappings",
        "type": "trait",
        "visibility": "private"
      }
    ],
    "crates/orchestrator/src/types.rs": [
      {
        "name": "ClassifyRequest",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "ClassifyResponse",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "RunRequest",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "RunResponse",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "Orchestrator",
        "type": "struct",
        "visibility": "public"
      }
    ],
    "crates/orchestrator/src/tenant.rs": [
      {
        "name": "TenantConfig",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "ResourceLimits",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "BillingConfig",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "PaymentTerms",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "BrandingConfig",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "TenantContext",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "Permissions",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "UsageEvent",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "UsageSummary",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "UsageBreakdown",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "CurrentUsage",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "MockTenantManager",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "MockUsageTracker",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "DeploymentMode",
        "type": "enum",
        "visibility": "public"
      },
      {
        "name": "TenantStatus",
        "type": "enum",
        "visibility": "public"
      },
      {
        "name": "PriorityTier",
        "type": "enum",
        "visibility": "public"
      },
      {
        "name": "BillingProvider",
        "type": "enum",
        "visibility": "public"
      },
      {
        "name": "UsageEventType",
        "type": "enum",
        "visibility": "public"
      },
      {
        "name": "TenantManager",
        "type": "trait",
        "visibility": "public"
      },
      {
        "name": "UsageTracker",
        "type": "trait",
        "visibility": "public"
      }
    ],
    "crates/orchestrator/src/config.rs": [
      {
        "name": "OrchestratorConfig",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "ServerConfig",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "ModelsConfig",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "ModelConfig",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "MonitoringConfig",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "SafetyConfig",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "CacheConfig",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "ConfigBuilder",
        "type": "struct",
        "visibility": "public"
      }
    ],
    "crates/orchestrator/src/lib.rs": [
      {
        "name": "DefaultEngine",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "GenOptions",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "ModelConfig",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "ObsidianConfig",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "SafetyConfig",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "Config",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "Models",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "MyEngine",
        "type": "struct",
        "visibility": "private"
      },
      {
        "name": "Classification",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "Homeskillet",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "must",
        "type": "trait",
        "visibility": "private"
      },
      {
        "name": "InferenceEngine",
        "type": "trait",
        "visibility": "public"
      }
    ],
    "crates/orchestrator/src/server.rs": [
      {
        "name": "AppState",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "HealthResponse",
        "type": "struct",
        "visibility": "private"
      },
      {
        "name": "ReadyResponse",
        "type": "struct",
        "visibility": "private"
      },
      {
        "name": "InferenceRequest",
        "type": "struct",
        "visibility": "private"
      },
      {
        "name": "InferenceResponse",
        "type": "struct",
        "visibility": "private"
      },
      {
        "name": "ClassificationRequest",
        "type": "struct",
        "visibility": "private"
      },
      {
        "name": "ErrorResponse",
        "type": "struct",
        "visibility": "private"
      }
    ],
    "crates/orchestrator/src/metrics.rs": [
      {
        "name": "Timer",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "MetricsExporter",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "CircuitBreakerState",
        "type": "enum",
        "visibility": "public"
      }
    ],
    "crates/orchestrator/src/hosted_ai.rs": [
      {
        "name": "HostedAiConfig",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "GpuAllocationRequest",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "ResourceRequirements",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "GpuAllocationResponse",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "HostedInferenceRequest",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "InferenceParameters",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "HostedInferenceResponse",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "ApiError",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "Metrics",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "HostedAiConnector",
        "type": "struct",
        "visibility": "public"
      }
    ],
    "crates/harpoon_bridge/src/covenant.rs": [
      {
        "name": "Covenant",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "RealityState",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "TargetState",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "RepoMetadata",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "RepoAnalysis",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "FunctionRef",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "ComplexityAssessment",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "AgentTier",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "CovenantBuilder",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "HarmonyReview",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "StrikeTarget",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "DelegationPlan",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "ForemanAssignment",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "WorkerPool",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "TargetRole",
        "type": "enum",
        "visibility": "public"
      }
    ],
    "crates/harpoon_bridge/src/strike.rs": [
      {
        "name": "StrikeResult",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "PullRequestInfo",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "CableState",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "PrStatus",
        "type": "enum",
        "visibility": "public"
      },
      {
        "name": "CableType",
        "type": "enum",
        "visibility": "public"
      },
      {
        "name": "StrikeStatus",
        "type": "enum",
        "visibility": "public"
      }
    ],
    "crates/harpoon_bridge/src/lib.rs": [
      {
        "name": "UnifiedOrchestrator",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "UnifiedRequest",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "FragmentContext",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "UnifiedResponse",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "DeploymentTarget",
        "type": "enum",
        "visibility": "public"
      }
    ],
    "crates/harpoon_bridge/src/fusion.rs": [
      {
        "name": "FusionOrchestrator",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "FusionState",
        "type": "struct",
        "visibility": "private"
      },
      {
        "name": "FusionResult",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "FusionStats",
        "type": "struct",
        "visibility": "public"
      }
    ],
    "crates/mcp_server/src/protocol.rs": [
      {
        "name": "McpRequest",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "McpResponse",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "RpcError",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "McpNotification",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "InitializeParams",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "ClientInfo",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "ToolCallParams",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "ResourceReadParams",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "PromptGetParams",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "SamplingParams",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "SamplingMethodParam",
        "type": "enum",
        "visibility": "public"
      }
    ],
    "crates/mcp_server/src/lib.rs": [
      {
        "name": "McpServer",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "ConnectionInfo",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "McpRpcImpl",
        "type": "struct",
        "visibility": "private"
      },
      {
        "name": "TransportType",
        "type": "enum",
        "visibility": "public"
      },
      {
        "name": "defining",
        "type": "trait",
        "visibility": "private"
      },
      {
        "name": "McpRpc",
        "type": "trait",
        "visibility": "public"
      }
    ],
    "crates/mcp_server/src/cli.rs": [
      {
        "name": "EngineWrapper",
        "type": "struct",
        "visibility": "private"
      },
      {
        "name": "Args",
        "type": "struct",
        "visibility": "private"
      }
    ],
    "crates/mcp_server/src/transport/websocket.rs": [
      {
        "name": "WebSocketTransport",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "WebSocketSession",
        "type": "struct",
        "visibility": "private"
      },
      {
        "name": "QoQManifest",
        "type": "struct",
        "visibility": "public"
      }
    ],
    "crates/mcp_server/src/transport/stdio.rs": [
      {
        "name": "StdioTransport",
        "type": "struct",
        "visibility": "public"
      }
    ],
    "crates/mcp_server/src/transport/http.rs": [
      {
        "name": "HttpTransport",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "McpBatch",
        "type": "struct",
        "visibility": "private"
      }
    ],
    "crates/service/src/config.rs": [
      {
        "name": "AppConfig",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "GitHubConfig",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "HostedAiConfig",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "McpConfig",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "ServiceConfig",
        "type": "struct",
        "visibility": "public"
      }
    ],
    "crates/service/src/mock_engine.rs": [
      {
        "name": "MockEngine",
        "type": "struct",
        "visibility": "public"
      }
    ],
    "crates/service/src/main.rs": [
      {
        "name": "AppState",
        "type": "struct",
        "visibility": "private"
      },
      {
        "name": "TextIn",
        "type": "struct",
        "visibility": "private"
      },
      {
        "name": "ClassOut",
        "type": "struct",
        "visibility": "private"
      },
      {
        "name": "RunOut",
        "type": "struct",
        "visibility": "private"
      },
      {
        "name": "CreateCovenantRequest",
        "type": "struct",
        "visibility": "private"
      },
      {
        "name": "CreateCovenantResponse",
        "type": "struct",
        "visibility": "private"
      },
      {
        "name": "ExecuteStrikeRequest",
        "type": "struct",
        "visibility": "private"
      },
      {
        "name": "HealthResponse",
        "type": "struct",
        "visibility": "private"
      }
    ],
    "crates/service/src/auth/github_oauth.rs": [
      {
        "name": "GitHubDeviceFlow",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "DeviceCodeResponse",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "TokenResponse",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "PollResponse",
        "type": "enum",
        "visibility": "public"
      }
    ],
    "crates/engine_pymlx/src/lib.rs": [
      {
        "name": "GenOptions",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "PythonMlxEngine",
        "type": "struct",
        "visibility": "public"
      }
    ],
    "crates/resources/src/lib.rs": [
      {
        "name": "ResourceRegistry",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "PromptTemplate",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "ToolDefinition",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "DataSchema",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "AgentType",
        "type": "enum",
        "visibility": "public"
      }
    ],
    "crates/resources/src/sampling.rs": [
      {
        "name": "SamplingConfig",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "MidTurnSample",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "SamplingCoordinator",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "ToolOutputSample",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "SamplingStrategy",
        "type": "enum",
        "visibility": "public"
      },
      {
        "name": "SamplingMethod",
        "type": "enum",
        "visibility": "public"
      }
    ],
    "crates/pyffi/src/lib.rs": [
      {
        "name": "TextIn",
        "type": "struct",
        "visibility": "private"
      },
      {
        "name": "ClassOut",
        "type": "struct",
        "visibility": "private"
      },
      {
        "name": "RunOut",
        "type": "struct",
        "visibility": "private"
      }
    ],
    "crates/wasm_classifier/src/lib.rs": [
      {
        "name": "Classification",
        "type": "struct",
        "visibility": "private"
      }
    ],
    "crates/harpoon-core/src/lib.rs": [
      {
        "name": "FragmentInput",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "FragmentInputSerde",
        "type": "struct",
        "visibility": "private"
      },
      {
        "name": "FragmentState",
        "type": "struct",
        "visibility": "private"
      },
      {
        "name": "FragmentReport",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "CycleEvent",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "HarpoonCycle",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "HarpoonEngine",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "EngineCore",
        "type": "struct",
        "visibility": "private"
      },
      {
        "name": "HarpoonCycleData",
        "type": "struct",
        "visibility": "private"
      },
      {
        "name": "WasmHarpoonEngine",
        "type": "struct",
        "visibility": "public"
      },
      {
        "name": "FragmentStatus",
        "type": "enum",
        "visibility": "private"
      },
      {
        "name": "EngineError",
        "type": "enum",
        "visibility": "private"
      }
    ]
  },
  "imports": {
    "scripts/generate_comprehensive_network_graph.py": [
      "json",
      "matplotlib.pyplot",
      "matplotlib.patches",
      "matplotlib.patches",
      "numpy"
    ],
    "scripts/generate_high_signal_graph.py": [
      "json",
      "math",
      "pathlib",
      "collections",
      "matplotlib.pyplot",
      "matplotlib.patches",
      "matplotlib.lines",
      "matplotlib.patches",
      "numpy",
      "typing",
      "networkx",
      "networkx.algorithms",
      "warnings"
    ],
    "scripts/generate_unified_analysis.py": [
      "json",
      "ast",
      "re",
      "pathlib",
      "collections",
      "typing",
      "subprocess",
      "sys"
    ],
    "scripts/qoq_emit.py": [
      "os",
      "re",
      "json",
      "time",
      "subprocess",
      "sys",
      "pathlib"
    ],
    "scripts/analyze_codebase_simple.py": [
      "os",
      "re",
      "json",
      "subprocess",
      "pathlib",
      "collections",
      "datetime",
      "typing"
    ],
    "scripts/comprehensive_analysis.py": [
      "json",
      "os",
      "subprocess",
      "pathlib",
      "datetime",
      "collections"
    ],
    "scripts/generate_network_graph.py": [
      "json",
      "math",
      "pathlib",
      "collections",
      "matplotlib.pyplot",
      "matplotlib.patches",
      "numpy",
      "typing"
    ],
    "scripts/generate_network_graph_qoq.py": [
      "json",
      "math",
      "pathlib",
      "collections",
      "matplotlib.pyplot",
      "matplotlib.patches",
      "numpy",
      "typing"
    ],
    "scripts/analyze_codebase.py": [
      "os",
      "re",
      "json",
      "subprocess",
      "pathlib",
      "collections",
      "typing",
      "networkx",
      "datetime"
    ],
    "scripts/generate_network_graph_enhanced.py": [
      "json",
      "math",
      "pathlib",
      "collections",
      "matplotlib.pyplot",
      "matplotlib.patches",
      "numpy",
      "typing",
      "networkx"
    ],
    "scripts/analysis/generate-project-analysis.py": [
      "json",
      "os",
      "datetime",
      "pathlib",
      "matplotlib.pyplot",
      "matplotlib.patches",
      "matplotlib.patches",
      "numpy"
    ],
    "scripts/compliance/audit-trail-generator.py": [
      "asyncio",
      "json",
      "hashlib",
      "time",
      "datetime",
      "typing",
      "dataclasses",
      "enum",
      "redis",
      "boto3",
      "psycopg2",
      "cryptography.hazmat.primitives",
      "cryptography.hazmat.primitives.asymmetric",
      "cryptography.hazmat.backends",
      "aiohttp",
      "logging"
    ],
    "scripts/compliance/compliance-dashboard.py": [
      "asyncio",
      "json",
      "yaml",
      "datetime",
      "pathlib",
      "typing",
      "redis",
      "prometheus_client",
      "flask",
      "plotly.graph_objects",
      "pandas",
      "dataclasses",
      "logging"
    ],
    "scripts/compliance/compliance-scanner.py": [
      "asyncio",
      "json",
      "yaml",
      "subprocess",
      "datetime",
      "pathlib",
      "typing",
      "hashlib",
      "boto3",
      "kubernetes",
      "redis",
      "psycopg2",
      "cryptography.fernet",
      "logging",
      "dataclasses",
      "enum"
    ],
    "scripts/compliance/generate-policy-templates.py": [
      "json",
      "yaml",
      "argparse",
      "datetime",
      "pathlib",
      "typing",
      "jinja2"
    ],
    "tests/mocks/mod.rs": [
      "async_trait::async_trait",
      "std::collections::HashMap",
      "parking_lot::RwLock",
      "anyhow::Result"
    ],
    "tests/integration/qoq_integration_test.rs": [
      "std::path::Path",
      "std::process::Command",
      "serde_json::Value",
      "std::os::unix::fs::PermissionsExt"
    ],
    "tests/integration/wasm_classifier_test.rs": [
      "wasm_bindgen_test::",
      "std::path::Path"
    ],
    "tests/integration/websocket_mcp_test.rs": [
      "tokio::time::",
      "tokio_tungstenite::",
      "futures_util::",
      "serde_json::json",
      "std::sync::Arc",
      "engine_pymlx::EnginePyMlx",
      "harpoon_bridge::UnifiedOrchestrator",
      "mcp_server::"
    ],
    "tests/integration/covenant_cocreation_test.rs": [
      "serde_json::json",
      "std::collections::HashMap",
      "itself"
    ],
    "tests/integration/hosted_ai_test.rs": [
      "orchestrator::hosted_ai::"
    ],
    "tests/integration/github_oauth_test.rs": [
      "crate::mocks::",
      "services::auth::github_oauth::",
      "the",
      "services::auth::github_oauth::",
      "a",
      "super::"
    ],
    "tests/e2e/full_system_test.rs": [
      "std::time::Duration",
      "tokio::time::sleep",
      "super::",
      "resources::schemas::agent::agent_message_schema",
      "resources::sampling::",
      "super::",
      "harpoon_bridge::"
    ],
    "web-ui/app/layout.tsx": [
      "next"
    ],
    "web-ui/app/page.tsx": [
      "react",
      "@/components/McpClientProvider",
      "@/components/ConnectForm",
      "@/components/ToolList",
      "@/components/SessionLog",
      "@/components/GitHubAuth",
      "@/components/QoQViewer"
    ],
    "web-ui/components/McpClientProvider.tsx": [
      "react"
    ],
    "web-ui/components/QoQViewer.tsx": [
      "react",
      "./McpClientProvider"
    ],
    "web-ui/components/ConnectForm.tsx": [
      "react",
      "./McpClientProvider"
    ],
    "web-ui/components/ToolList.tsx": [
      "react",
      "./McpClientProvider"
    ],
    "web-ui/components/GitHubAuth.tsx": [
      "react"
    ],
    "web-ui/components/SessionLog.tsx": [
      "react",
      "./McpClientProvider"
    ],
    "web-ui/app/api/github/me/route.ts": [
      "next/server",
      "../device/poll/route"
    ],
    "web-ui/app/api/github/device/start/route.ts": [
      "next/server"
    ],
    "web-ui/app/api/github/device/poll/route.ts": [
      "next/server"
    ],
    "crates/orchestrator/tests/hosted_ai_integration.rs": [
      "orchestrator::hosted_ai::",
      "orchestrator::metrics::MetricsExporter",
      "std::env",
      "tokio::time::"
    ],
    "crates/orchestrator/src/types.rs": [
      "serde::"
    ],
    "crates/orchestrator/src/tenant.rs": [
      "anyhow::",
      "serde::",
      "std::sync::Arc",
      "uuid::Uuid",
      "chrono::",
      "std::collections::HashMap",
      "async_trait::async_trait"
    ],
    "crates/orchestrator/src/config.rs": [
      "crate::hosted_ai::HostedAiConfig",
      "anyhow::",
      "serde::",
      "std::path::",
      "std::env",
      "std::fs",
      "super::"
    ],
    "crates/orchestrator/src/lib.rs": [
      "orchestrator::",
      "types::",
      "config::",
      "anyhow::Result",
      "serde::",
      "std::time::Instant",
      "hosted_ai::",
      "engine_pymlx::"
    ],
    "crates/orchestrator/src/server.rs": [
      "crate::config::OrchestratorConfig",
      "crate::metrics::MetricsExporter",
      "crate::Homeskillet",
      "axum::",
      "serde::",
      "std::sync::Arc",
      "tower::ServiceBuilder",
      "tower_http::",
      "std::time::Duration",
      "let",
      "super::",
      "axum::http::StatusCode",
      "tower::ServiceExt"
    ],
    "crates/orchestrator/src/metrics.rs": [
      "prometheus::",
      "lazy_static::lazy_static",
      "std::time::Instant",
      "super::",
      "prometheus::Encoder",
      "super::",
      "super::helpers::"
    ],
    "crates/orchestrator/src/hosted_ai.rs": [
      "anyhow::",
      "serde::",
      "std::sync::Arc",
      "tracing::",
      "uuid::Uuid",
      "reqwest::",
      "parking_lot::RwLock",
      "std::collections::HashMap",
      "std::time::",
      "tokio::time::sleep",
      "crate::metrics::",
      "super::"
    ],
    "crates/orchestrator/src/bin/homeskillet-orchestrator.rs": [
      "anyhow::Result",
      "orchestrator::",
      "tracing_subscriber::"
    ],
    "crates/harpoon_bridge/src/covenant.rs": [
      "anyhow::Result",
      "serde::",
      "uuid::Uuid",
      "std::collections::HashMap"
    ],
    "crates/harpoon_bridge/src/strike.rs": [
      "anyhow::Result",
      "serde::",
      "std::sync::Arc",
      "std::collections::HashMap",
      "crate::covenant::",
      "orchestrator::Orchestrator",
      "tracing::",
      "the"
    ],
    "crates/harpoon_bridge/src/lib.rs": [
      "anyhow::Result",
      "orchestrator::",
      "serde::",
      "std::collections::HashMap",
      "std::sync::Arc",
      "parking_lot::RwLock",
      "tracing::",
      "fusion::FusionOrchestrator",
      "covenant::",
      "pub",
      "super::"
    ],
    "crates/harpoon_bridge/src/fusion.rs": [
      "anyhow::Result",
      "harpoon_core::",
      "serde::",
      "std::sync::Arc",
      "parking_lot::RwLock",
      "tracing::",
      "super::"
    ],
    "crates/mcp_server/src/handlers.rs": [
      "anyhow::",
      "serde_json::Value",
      "std::sync::Arc",
      "harpoon_bridge::",
      "resources::sampling::",
      "crate::transport::websocket::qoq_handlers",
      "crate::transport::websocket::qoq_handlers",
      "crate::transport::websocket::qoq_handlers",
      "crate::transport::websocket::qoq_handlers"
    ],
    "crates/mcp_server/src/protocol.rs": [
      "serde::",
      "serde_json::Value",
      "std::collections::HashMap"
    ],
    "crates/mcp_server/src/lib.rs": [
      "anyhow::Result",
      "serde::",
      "jsonrpc_core::",
      "jsonrpc_derive::rpc",
      "std::sync::Arc",
      "parking_lot::RwLock",
      "harpoon_bridge::UnifiedOrchestrator",
      "resources::REGISTRY",
      "super::"
    ],
    "crates/mcp_server/src/cli.rs": [
      "anyhow::Result",
      "clap::Parser",
      "std::sync::Arc",
      "tokio::io::",
      "tracing::",
      "engine_pymlx::PythonMlxEngine",
      "harpoon_bridge::UnifiedOrchestrator",
      "orchestrator::",
      "mcp_server::",
      "tokio::process::Command",
      "tokio::io::AsyncWriteExt"
    ],
    "crates/mcp_server/src/transport/websocket.rs": [
      "anyhow::Result",
      "futures_util::",
      "serde::",
      "std::sync::Arc",
      "tokio::net::",
      "tokio::sync::Mutex",
      "tokio_tungstenite::",
      "tracing::",
      "crate::",
      "super::",
      "std::path::Path",
      "tokio::process::Command"
    ],
    "crates/mcp_server/src/transport/stdio.rs": [
      "anyhow::Result",
      "tokio::io::",
      "std::sync::Arc",
      "tracing::",
      "crate::"
    ],
    "crates/mcp_server/src/transport/http.rs": [
      "anyhow::Result",
      "axum::",
      "serde::",
      "std::sync::Arc",
      "tower_http::cors::CorsLayer",
      "tracing::",
      "crate::"
    ],
    "crates/service/src/config.rs": [
      "anyhow::Result",
      "serde::",
      "std::env"
    ],
    "crates/service/src/mock_engine.rs": [
      "anyhow::Result",
      "orchestrator::"
    ],
    "crates/service/src/main.rs": [
      "axum::",
      "serde::",
      "std::",
      "tower_http::cors::CorsLayer",
      "tracing_subscriber::EnvFilter",
      "crate::config::AppConfig",
      "harpoon_bridge::",
      "orchestrator::",
      "crate::mock_engine::MockEngine"
    ],
    "crates/service/src/auth/github_oauth.rs": [
      "anyhow::Result",
      "serde::",
      "std::time::Duration",
      "reqwest::Client",
      "tokio::time::sleep",
      "super::",
      "mockito::"
    ],
    "crates/engine_pymlx/src/lib.rs": [
      "anyhow::Result",
      "pyo3::prelude::",
      "std::sync::Arc",
      "std::sync::OnceLock"
    ],
    "crates/resources/src/lib.rs": [
      "anyhow::Result",
      "serde::",
      "std::collections::HashMap",
      "parking_lot::RwLock",
      "once_cell::sync::Lazy",
      "super::"
    ],
    "crates/resources/src/sampling.rs": [
      "anyhow::Result",
      "serde::",
      "std::collections::HashMap",
      "super::SamplingConfig",
      "super::"
    ],
    "crates/resources/src/tools/covenant.rs": [
      "crate::ToolDefinition",
      "serde_json::json"
    ],
    "crates/resources/src/tools/mlx.rs": [
      "crate::ToolDefinition",
      "serde_json::json"
    ],
    "crates/resources/src/tools/github.rs": [
      "crate::ToolDefinition",
      "serde_json::json"
    ],
    "crates/resources/src/tools/fusion.rs": [
      "crate::ToolDefinition",
      "serde_json::json"
    ],
    "crates/resources/src/schemas/covenant.rs": [
      "crate::DataSchema",
      "serde_json::json"
    ],
    "crates/resources/src/schemas/strike.rs": [
      "crate::DataSchema",
      "serde_json::json"
    ],
    "crates/resources/src/schemas/agent.rs": [
      "crate::DataSchema",
      "serde_json::json"
    ],
    "crates/resources/src/schemas/fusion.rs": [
      "crate::DataSchema",
      "serde_json::json"
    ],
    "crates/resources/src/prompts/covenant.rs": [
      "crate::"
    ],
    "crates/resources/src/prompts/strike.rs": [
      "crate::"
    ],
    "crates/resources/src/prompts/agent.rs": [
      "crate::"
    ],
    "crates/resources/src/prompts/fusion.rs": [
      "crate::"
    ],
    "crates/pyffi/src/lib.rs": [
      "pyo3::prelude::",
      "serde::"
    ],
    "crates/wasm_classifier/src/lib.rs": [
      "wasm_bindgen::prelude::",
      "serde::",
      "super::"
    ],
    "crates/harpoon-core/src/lib.rs": [
      "std::collections::VecDeque",
      "std::sync::Arc",
      "base64::",
      "once_cell::sync::Lazy",
      "rayon::prelude::",
      "regex::Regex",
      "serde::",
      "sha3::",
      "thiserror::Error",
      "rayon::ThreadPool",
      "pyo3::exceptions::PyValueError",
      "pyo3::prelude::",
      "pyo3::types::PyAny",
      "wasm_bindgen::prelude::"
    ]
  },
  "call_graph": {
    "nodes": [
      {
        "id": "scripts/generate_comprehensive_network_graph.py::draw_arrow",
        "file": "scripts/generate_comprehensive_network_graph.py",
        "function": "draw_arrow",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "scripts/generate_high_signal_graph.py::main",
        "file": "scripts/generate_high_signal_graph.py",
        "function": "main",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "scripts/generate_unified_analysis.py::main",
        "file": "scripts/generate_unified_analysis.py",
        "function": "main",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "scripts/qoq_emit.py::git_hash",
        "file": "scripts/qoq_emit.py",
        "function": "git_hash",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "scripts/qoq_emit.py::build_tree",
        "file": "scripts/qoq_emit.py",
        "function": "build_tree",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "scripts/qoq_emit.py::list_symbols_and_flows",
        "file": "scripts/qoq_emit.py",
        "function": "list_symbols_and_flows",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "scripts/qoq_emit.py::load_contracts",
        "file": "scripts/qoq_emit.py",
        "function": "load_contracts",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "scripts/analyze_codebase_simple.py::setup_git_hook",
        "file": "scripts/analyze_codebase_simple.py",
        "function": "setup_git_hook",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "scripts/analyze_codebase_simple.py::main",
        "file": "scripts/analyze_codebase_simple.py",
        "function": "main",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "scripts/comprehensive_analysis.py::run_command",
        "file": "scripts/comprehensive_analysis.py",
        "function": "run_command",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "scripts/comprehensive_analysis.py::count_lines_of_code",
        "file": "scripts/comprehensive_analysis.py",
        "function": "count_lines_of_code",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "scripts/comprehensive_analysis.py::count_files",
        "file": "scripts/comprehensive_analysis.py",
        "function": "count_files",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "scripts/comprehensive_analysis.py::analyze_rust_crates",
        "file": "scripts/comprehensive_analysis.py",
        "function": "analyze_rust_crates",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "scripts/comprehensive_analysis.py::analyze_python_components",
        "file": "scripts/comprehensive_analysis.py",
        "function": "analyze_python_components",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "scripts/comprehensive_analysis.py::analyze_gtm_documentation",
        "file": "scripts/comprehensive_analysis.py",
        "function": "analyze_gtm_documentation",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "scripts/comprehensive_analysis.py::analyze_ai_agents",
        "file": "scripts/comprehensive_analysis.py",
        "function": "analyze_ai_agents",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "scripts/comprehensive_analysis.py::analyze_web_components",
        "file": "scripts/comprehensive_analysis.py",
        "function": "analyze_web_components",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "scripts/comprehensive_analysis.py::analyze_infrastructure",
        "file": "scripts/comprehensive_analysis.py",
        "function": "analyze_infrastructure",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "scripts/comprehensive_analysis.py::main",
        "file": "scripts/comprehensive_analysis.py",
        "function": "main",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "scripts/generate_network_graph.py::main",
        "file": "scripts/generate_network_graph.py",
        "function": "main",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "scripts/generate_network_graph_qoq.py::main",
        "file": "scripts/generate_network_graph_qoq.py",
        "function": "main",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "scripts/analyze_codebase.py::setup_git_hook",
        "file": "scripts/analyze_codebase.py",
        "function": "setup_git_hook",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "scripts/analyze_codebase.py::main",
        "file": "scripts/analyze_codebase.py",
        "function": "main",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "scripts/generate_network_graph_enhanced.py::main",
        "file": "scripts/generate_network_graph_enhanced.py",
        "function": "main",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "scripts/compliance/audit-trail-generator.py::main",
        "file": "scripts/compliance/audit-trail-generator.py",
        "function": "main",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "id": "scripts/compliance/compliance-dashboard.py::main",
        "file": "scripts/compliance/compliance-dashboard.py",
        "function": "main",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "id": "scripts/compliance/compliance-scanner.py::main",
        "file": "scripts/compliance/compliance-scanner.py",
        "function": "main",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "id": "scripts/compliance/generate-policy-templates.py::main",
        "file": "scripts/compliance/generate-policy-templates.py",
        "function": "main",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "tests/mocks/mod.rs::new",
        "file": "tests/mocks/mod.rs",
        "function": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "tests/mocks/mod.rs::connect",
        "file": "tests/mocks/mod.rs",
        "function": "connect",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "tests/mocks/mod.rs::disconnect",
        "file": "tests/mocks/mod.rs",
        "function": "disconnect",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "tests/mocks/mod.rs::send",
        "file": "tests/mocks/mod.rs",
        "function": "send",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "tests/mocks/mod.rs::received_messages",
        "file": "tests/mocks/mod.rs",
        "function": "received_messages",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "tests/mocks/mod.rs::new",
        "file": "tests/mocks/mod.rs",
        "function": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "tests/mocks/mod.rs::start_device_flow",
        "file": "tests/mocks/mod.rs",
        "function": "start_device_flow",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "id": "tests/mocks/mod.rs::poll_for_token",
        "file": "tests/mocks/mod.rs",
        "function": "poll_for_token",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "id": "tests/mocks/mod.rs::new",
        "file": "tests/mocks/mod.rs",
        "function": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "tests/mocks/mod.rs::generate",
        "file": "tests/mocks/mod.rs",
        "function": "generate",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "tests/mocks/mod.rs::set_manifest",
        "file": "tests/mocks/mod.rs",
        "function": "set_manifest",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "tests/mocks/mod.rs::new",
        "file": "tests/mocks/mod.rs",
        "function": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "tests/mocks/mod.rs::allocate_gpu",
        "file": "tests/mocks/mod.rs",
        "function": "allocate_gpu",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "id": "tests/mocks/mod.rs::inference",
        "file": "tests/mocks/mod.rs",
        "function": "inference",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "id": "tests/mocks/mod.rs::release",
        "file": "tests/mocks/mod.rs",
        "function": "release",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "id": "tests/mocks/mod.rs::new",
        "file": "tests/mocks/mod.rs",
        "function": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "tests/mocks/mod.rs::classify",
        "file": "tests/mocks/mod.rs",
        "function": "classify",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "tests/mocks/mod.rs::start_device_flow",
        "file": "tests/mocks/mod.rs",
        "function": "start_device_flow",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "tests/mocks/mod.rs::poll_for_token",
        "file": "tests/mocks/mod.rs",
        "function": "poll_for_token",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "tests/mocks/mod.rs::allocate_gpu",
        "file": "tests/mocks/mod.rs",
        "function": "allocate_gpu",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "tests/mocks/mod.rs::inference",
        "file": "tests/mocks/mod.rs",
        "function": "inference",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "tests/mocks/mod.rs::release",
        "file": "tests/mocks/mod.rs",
        "function": "release",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "tests/integration/qoq_integration_test.rs::test_function",
        "file": "tests/integration/qoq_integration_test.rs",
        "function": "test_function",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "tests/integration/websocket_mcp_test.rs::start_test_server",
        "file": "tests/integration/websocket_mcp_test.rs",
        "function": "start_test_server",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "tests/integration/websocket_mcp_test.rs::shutdown",
        "file": "tests/integration/websocket_mcp_test.rs",
        "function": "shutdown",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "tests/integration/github_oauth_test.rs::mock_github_responses",
        "file": "tests/integration/github_oauth_test.rs",
        "function": "mock_github_responses",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "tests/e2e/full_system_test.rs::smoke_test_mcp_protocol",
        "file": "tests/e2e/full_system_test.rs",
        "function": "smoke_test_mcp_protocol",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "tests/e2e/full_system_test.rs::smoke_test_unified_request",
        "file": "tests/e2e/full_system_test.rs",
        "function": "smoke_test_unified_request",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "web-ui/components/McpClientProvider.tsx::McpClientProvider",
        "file": "web-ui/components/McpClientProvider.tsx",
        "function": "McpClientProvider",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "web-ui/components/McpClientProvider.tsx::useMcp",
        "file": "web-ui/components/McpClientProvider.tsx",
        "function": "useMcp",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "web-ui/components/QoQViewer.tsx::QoQViewer",
        "file": "web-ui/components/QoQViewer.tsx",
        "function": "QoQViewer",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "web-ui/components/ConnectForm.tsx::ConnectForm",
        "file": "web-ui/components/ConnectForm.tsx",
        "function": "ConnectForm",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "web-ui/components/ToolList.tsx::ToolList",
        "file": "web-ui/components/ToolList.tsx",
        "function": "ToolList",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "web-ui/components/GitHubAuth.tsx::GitHubAuth",
        "file": "web-ui/components/GitHubAuth.tsx",
        "function": "GitHubAuth",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "web-ui/components/SessionLog.tsx::SessionLog",
        "file": "web-ui/components/SessionLog.tsx",
        "function": "SessionLog",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "web-ui/app/api/github/me/route.ts::GET",
        "file": "web-ui/app/api/github/me/route.ts",
        "function": "GET",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "id": "web-ui/app/api/github/device/start/route.ts::POST",
        "file": "web-ui/app/api/github/device/start/route.ts",
        "function": "POST",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "id": "web-ui/app/api/github/device/poll/route.ts::POST",
        "file": "web-ui/app/api/github/device/poll/route.ts",
        "function": "POST",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "id": "crates/orchestrator/tests/hosted_ai_integration.rs::get_test_config",
        "file": "crates/orchestrator/tests/hosted_ai_integration.rs",
        "function": "get_test_config",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/types.rs::new",
        "file": "crates/orchestrator/src/types.rs",
        "function": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/types.rs::classify",
        "file": "crates/orchestrator/src/types.rs",
        "function": "classify",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "id": "crates/orchestrator/src/types.rs::run",
        "file": "crates/orchestrator/src/types.rs",
        "function": "run",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "id": "crates/orchestrator/src/types.rs::classify",
        "file": "crates/orchestrator/src/types.rs",
        "function": "classify",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/types.rs::run",
        "file": "crates/orchestrator/src/types.rs",
        "function": "run",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/tenant.rs::new",
        "file": "crates/orchestrator/src/tenant.rs",
        "function": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/tenant.rs::new",
        "file": "crates/orchestrator/src/tenant.rs",
        "function": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/tenant.rs::get_tenant",
        "file": "crates/orchestrator/src/tenant.rs",
        "function": "get_tenant",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/tenant.rs::get_context_from_api_key",
        "file": "crates/orchestrator/src/tenant.rs",
        "function": "get_context_from_api_key",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/tenant.rs::check_permission",
        "file": "crates/orchestrator/src/tenant.rs",
        "function": "check_permission",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/tenant.rs::update_usage",
        "file": "crates/orchestrator/src/tenant.rs",
        "function": "update_usage",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/tenant.rs::check_limits",
        "file": "crates/orchestrator/src/tenant.rs",
        "function": "check_limits",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/tenant.rs::record_event",
        "file": "crates/orchestrator/src/tenant.rs",
        "function": "record_event",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/tenant.rs::get_usage_summary",
        "file": "crates/orchestrator/src/tenant.rs",
        "function": "get_usage_summary",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/tenant.rs::get_current_usage",
        "file": "crates/orchestrator/src/tenant.rs",
        "function": "get_current_usage",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/tenant.rs::get_tenant",
        "file": "crates/orchestrator/src/tenant.rs",
        "function": "get_tenant",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/tenant.rs::get_context_from_api_key",
        "file": "crates/orchestrator/src/tenant.rs",
        "function": "get_context_from_api_key",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/tenant.rs::check_permission",
        "file": "crates/orchestrator/src/tenant.rs",
        "function": "check_permission",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/tenant.rs::update_usage",
        "file": "crates/orchestrator/src/tenant.rs",
        "function": "update_usage",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/tenant.rs::check_limits",
        "file": "crates/orchestrator/src/tenant.rs",
        "function": "check_limits",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/tenant.rs::record_event",
        "file": "crates/orchestrator/src/tenant.rs",
        "function": "record_event",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/tenant.rs::get_usage_summary",
        "file": "crates/orchestrator/src/tenant.rs",
        "function": "get_usage_summary",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/tenant.rs::get_current_usage",
        "file": "crates/orchestrator/src/tenant.rs",
        "function": "get_current_usage",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/config.rs::load",
        "file": "crates/orchestrator/src/config.rs",
        "function": "load",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/config.rs::load_from_file",
        "file": "crates/orchestrator/src/config.rs",
        "function": "load_from_file",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/config.rs::save_to_file",
        "file": "crates/orchestrator/src/config.rs",
        "function": "save_to_file",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/config.rs::new",
        "file": "crates/orchestrator/src/config.rs",
        "function": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/config.rs::with_server",
        "file": "crates/orchestrator/src/config.rs",
        "function": "with_server",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/config.rs::with_hosted_ai",
        "file": "crates/orchestrator/src/config.rs",
        "function": "with_hosted_ai",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/config.rs::with_cache",
        "file": "crates/orchestrator/src/config.rs",
        "function": "with_cache",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/config.rs::with_monitoring",
        "file": "crates/orchestrator/src/config.rs",
        "function": "with_monitoring",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/config.rs::build",
        "file": "crates/orchestrator/src/config.rs",
        "function": "build",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/config.rs::default",
        "file": "crates/orchestrator/src/config.rs",
        "function": "default",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/config.rs::find_config_file",
        "file": "crates/orchestrator/src/config.rs",
        "function": "find_config_file",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/config.rs::apply_env_overrides",
        "file": "crates/orchestrator/src/config.rs",
        "function": "apply_env_overrides",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/config.rs::validate",
        "file": "crates/orchestrator/src/config.rs",
        "function": "validate",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/lib.rs::new",
        "file": "crates/orchestrator/src/lib.rs",
        "function": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/lib.rs::new",
        "file": "crates/orchestrator/src/lib.rs",
        "function": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/lib.rs::classify",
        "file": "crates/orchestrator/src/lib.rs",
        "function": "classify",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/lib.rs::run",
        "file": "crates/orchestrator/src/lib.rs",
        "function": "run",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/lib.rs::classify_async",
        "file": "crates/orchestrator/src/lib.rs",
        "function": "classify_async",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "id": "crates/orchestrator/src/lib.rs::generate_direct",
        "file": "crates/orchestrator/src/lib.rs",
        "function": "generate_direct",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "id": "crates/orchestrator/src/lib.rs::example",
        "file": "crates/orchestrator/src/lib.rs",
        "function": "example",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/lib.rs::convert_gen_options",
        "file": "crates/orchestrator/src/lib.rs",
        "function": "convert_gen_options",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/lib.rs::generate",
        "file": "crates/orchestrator/src/lib.rs",
        "function": "generate",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/lib.rs::generate",
        "file": "crates/orchestrator/src/lib.rs",
        "function": "generate",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/lib.rs::generate",
        "file": "crates/orchestrator/src/lib.rs",
        "function": "generate",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/lib.rs::generate",
        "file": "crates/orchestrator/src/lib.rs",
        "function": "generate",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/lib.rs::classify_async",
        "file": "crates/orchestrator/src/lib.rs",
        "function": "classify_async",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/lib.rs::generate_direct",
        "file": "crates/orchestrator/src/lib.rs",
        "function": "generate_direct",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/lib.rs::run_gemma",
        "file": "crates/orchestrator/src/lib.rs",
        "function": "run_gemma",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/lib.rs::run_qwen",
        "file": "crates/orchestrator/src/lib.rs",
        "function": "run_qwen",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/server.rs::create_router",
        "file": "crates/orchestrator/src/server.rs",
        "function": "create_router",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/server.rs::start_server",
        "file": "crates/orchestrator/src/server.rs",
        "function": "start_server",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "id": "crates/orchestrator/src/server.rs::into_response",
        "file": "crates/orchestrator/src/server.rs",
        "function": "into_response",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/server.rs::health_handler",
        "file": "crates/orchestrator/src/server.rs",
        "function": "health_handler",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/server.rs::ready_handler",
        "file": "crates/orchestrator/src/server.rs",
        "function": "ready_handler",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/server.rs::metrics_handler",
        "file": "crates/orchestrator/src/server.rs",
        "function": "metrics_handler",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/server.rs::classify_handler",
        "file": "crates/orchestrator/src/server.rs",
        "function": "classify_handler",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/server.rs::inference_handler",
        "file": "crates/orchestrator/src/server.rs",
        "function": "inference_handler",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/server.rs::list_models_handler",
        "file": "crates/orchestrator/src/server.rs",
        "function": "list_models_handler",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/server.rs::start_server",
        "file": "crates/orchestrator/src/server.rs",
        "function": "start_server",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/server.rs::create_metrics_router",
        "file": "crates/orchestrator/src/server.rs",
        "function": "create_metrics_router",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/metrics.rs::new",
        "file": "crates/orchestrator/src/metrics.rs",
        "function": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/metrics.rs::observe_duration",
        "file": "crates/orchestrator/src/metrics.rs",
        "function": "observe_duration",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/metrics.rs::init_metrics",
        "file": "crates/orchestrator/src/metrics.rs",
        "function": "init_metrics",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/metrics.rs::record_allocation_attempt",
        "file": "crates/orchestrator/src/metrics.rs",
        "function": "record_allocation_attempt",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/metrics.rs::update_active_allocations",
        "file": "crates/orchestrator/src/metrics.rs",
        "function": "update_active_allocations",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/metrics.rs::record_inference_request",
        "file": "crates/orchestrator/src/metrics.rs",
        "function": "record_inference_request",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/metrics.rs::record_inference_metrics",
        "file": "crates/orchestrator/src/metrics.rs",
        "function": "record_inference_metrics",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/metrics.rs::update_circuit_breaker",
        "file": "crates/orchestrator/src/metrics.rs",
        "function": "update_circuit_breaker",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/metrics.rs::record_api_request",
        "file": "crates/orchestrator/src/metrics.rs",
        "function": "record_api_request",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/metrics.rs::update_gpu_utilization",
        "file": "crates/orchestrator/src/metrics.rs",
        "function": "update_gpu_utilization",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/metrics.rs::track_inference_cost",
        "file": "crates/orchestrator/src/metrics.rs",
        "function": "track_inference_cost",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/metrics.rs::new",
        "file": "crates/orchestrator/src/metrics.rs",
        "function": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/metrics.rs::gather",
        "file": "crates/orchestrator/src/metrics.rs",
        "function": "gather",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/metrics.rs::render",
        "file": "crates/orchestrator/src/metrics.rs",
        "function": "render",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/hosted_ai.rs::new",
        "file": "crates/orchestrator/src/hosted_ai.rs",
        "function": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "file": "crates/orchestrator/src/hosted_ai.rs",
        "function": "request_vgpu",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "id": "crates/orchestrator/src/hosted_ai.rs::inference",
        "file": "crates/orchestrator/src/hosted_ai.rs",
        "function": "inference",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "id": "crates/orchestrator/src/hosted_ai.rs::release",
        "file": "crates/orchestrator/src/hosted_ai.rs",
        "function": "release",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "id": "crates/orchestrator/src/hosted_ai.rs::get_allocation",
        "file": "crates/orchestrator/src/hosted_ai.rs",
        "function": "get_allocation",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/hosted_ai.rs::list_allocations",
        "file": "crates/orchestrator/src/hosted_ai.rs",
        "function": "list_allocations",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/hosted_ai.rs::get_metrics",
        "file": "crates/orchestrator/src/hosted_ai.rs",
        "function": "get_metrics",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "file": "crates/orchestrator/src/hosted_ai.rs",
        "function": "health_check",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "id": "crates/orchestrator/src/hosted_ai.rs::default_timeout",
        "file": "crates/orchestrator/src/hosted_ai.rs",
        "function": "default_timeout",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/hosted_ai.rs::default_max_retries",
        "file": "crates/orchestrator/src/hosted_ai.rs",
        "function": "default_max_retries",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "file": "crates/orchestrator/src/hosted_ai.rs",
        "function": "request_vgpu",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/hosted_ai.rs::inference",
        "file": "crates/orchestrator/src/hosted_ai.rs",
        "function": "inference",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/hosted_ai.rs::release",
        "file": "crates/orchestrator/src/hosted_ai.rs",
        "function": "release",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "file": "crates/orchestrator/src/hosted_ai.rs",
        "function": "health_check",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/hosted_ai.rs::post_with_retry",
        "file": "crates/orchestrator/src/hosted_ai.rs",
        "function": "post_with_retry",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/hosted_ai.rs::delete_with_retry",
        "file": "crates/orchestrator/src/hosted_ai.rs",
        "function": "delete_with_retry",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/hosted_ai.rs::make_post_request",
        "file": "crates/orchestrator/src/hosted_ai.rs",
        "function": "make_post_request",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/hosted_ai.rs::make_delete_request",
        "file": "crates/orchestrator/src/hosted_ai.rs",
        "function": "make_delete_request",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/hosted_ai.rs::handle_response",
        "file": "crates/orchestrator/src/hosted_ai.rs",
        "function": "handle_response",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "file": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs",
        "function": "main",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon_bridge/src/covenant.rs::new",
        "file": "crates/harpoon_bridge/src/covenant.rs",
        "function": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/harpoon_bridge/src/covenant.rs::reality_state",
        "file": "crates/harpoon_bridge/src/covenant.rs",
        "function": "reality_state",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/harpoon_bridge/src/covenant.rs::target_state",
        "file": "crates/harpoon_bridge/src/covenant.rs",
        "function": "target_state",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/harpoon_bridge/src/covenant.rs::add_metadata",
        "file": "crates/harpoon_bridge/src/covenant.rs",
        "function": "add_metadata",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/harpoon_bridge/src/covenant.rs::build",
        "file": "crates/harpoon_bridge/src/covenant.rs",
        "function": "build",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "file": "crates/harpoon_bridge/src/strike.rs",
        "function": "execute_strike",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "id": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "file": "crates/harpoon_bridge/src/strike.rs",
        "function": "monitor_strike",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "id": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "file": "crates/harpoon_bridge/src/strike.rs",
        "function": "execute_strike",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon_bridge/src/strike.rs::select_strike_targets",
        "file": "crates/harpoon_bridge/src/strike.rs",
        "function": "select_strike_targets",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon_bridge/src/strike.rs::create_pr_for_target",
        "file": "crates/harpoon_bridge/src/strike.rs",
        "function": "create_pr_for_target",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "file": "crates/harpoon_bridge/src/strike.rs",
        "function": "monitor_strike",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon_bridge/src/lib.rs::new",
        "file": "crates/harpoon_bridge/src/lib.rs",
        "function": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "file": "crates/harpoon_bridge/src/lib.rs",
        "function": "create_covenant",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "id": "crates/harpoon_bridge/src/lib.rs::process",
        "file": "crates/harpoon_bridge/src/lib.rs",
        "function": "process",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "id": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "file": "crates/harpoon_bridge/src/lib.rs",
        "function": "execute_strike",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "id": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "file": "crates/harpoon_bridge/src/lib.rs",
        "function": "create_covenant",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon_bridge/src/lib.rs::process",
        "file": "crates/harpoon_bridge/src/lib.rs",
        "function": "process",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon_bridge/src/lib.rs::process_with_hosted_ai",
        "file": "crates/harpoon_bridge/src/lib.rs",
        "function": "process_with_hosted_ai",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon_bridge/src/lib.rs::run_with_hosted_ai",
        "file": "crates/harpoon_bridge/src/lib.rs",
        "function": "run_with_hosted_ai",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "file": "crates/harpoon_bridge/src/lib.rs",
        "function": "execute_strike",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon_bridge/src/fusion.rs::new",
        "file": "crates/harpoon_bridge/src/fusion.rs",
        "function": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "file": "crates/harpoon_bridge/src/fusion.rs",
        "function": "process_fragment",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "id": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "file": "crates/harpoon_bridge/src/fusion.rs",
        "function": "process_fragments",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "id": "crates/harpoon_bridge/src/fusion.rs::stats",
        "file": "crates/harpoon_bridge/src/fusion.rs",
        "function": "stats",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "file": "crates/harpoon_bridge/src/fusion.rs",
        "function": "process_fragment",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "file": "crates/harpoon_bridge/src/fusion.rs",
        "function": "process_fragments",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon_bridge/src/fusion.rs::main",
        "file": "crates/harpoon_bridge/src/fusion.rs",
        "function": "main",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/handlers.rs::handle_tool_call",
        "file": "crates/mcp_server/src/handlers.rs",
        "function": "handle_tool_call",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/handlers.rs::handle_resource_read",
        "file": "crates/mcp_server/src/handlers.rs",
        "function": "handle_resource_read",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/handlers.rs::handle_sampling",
        "file": "crates/mcp_server/src/handlers.rs",
        "function": "handle_sampling",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/handlers.rs::handle_classify",
        "file": "crates/mcp_server/src/handlers.rs",
        "function": "handle_classify",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/handlers.rs::handle_inference",
        "file": "crates/mcp_server/src/handlers.rs",
        "function": "handle_inference",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/handlers.rs::handle_create_pr",
        "file": "crates/mcp_server/src/handlers.rs",
        "function": "handle_create_pr",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/handlers.rs::handle_analyze_repo",
        "file": "crates/mcp_server/src/handlers.rs",
        "function": "handle_analyze_repo",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/handlers.rs::handle_covenant_resource",
        "file": "crates/mcp_server/src/handlers.rs",
        "function": "handle_covenant_resource",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/handlers.rs::handle_strike_resource",
        "file": "crates/mcp_server/src/handlers.rs",
        "function": "handle_strike_resource",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/handlers.rs::handle_agents_resource",
        "file": "crates/mcp_server/src/handlers.rs",
        "function": "handle_agents_resource",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/handlers.rs::handle_qoq_index",
        "file": "crates/mcp_server/src/handlers.rs",
        "function": "handle_qoq_index",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/handlers.rs::handle_qoq_status",
        "file": "crates/mcp_server/src/handlers.rs",
        "function": "handle_qoq_status",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/handlers.rs::handle_qoq_locate",
        "file": "crates/mcp_server/src/handlers.rs",
        "function": "handle_qoq_locate",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/handlers.rs::handle_covenant_evaluate",
        "file": "crates/mcp_server/src/handlers.rs",
        "function": "handle_covenant_evaluate",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/lib.rs::new",
        "file": "crates/mcp_server/src/lib.rs",
        "function": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/lib.rs::handle_request",
        "file": "crates/mcp_server/src/lib.rs",
        "function": "handle_request",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "id": "crates/mcp_server/src/lib.rs::add_connection",
        "file": "crates/mcp_server/src/lib.rs",
        "function": "add_connection",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/lib.rs::remove_connection",
        "file": "crates/mcp_server/src/lib.rs",
        "function": "remove_connection",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/lib.rs::initialize",
        "file": "crates/mcp_server/src/lib.rs",
        "function": "initialize",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/lib.rs::list_tools",
        "file": "crates/mcp_server/src/lib.rs",
        "function": "list_tools",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/lib.rs::call_tool",
        "file": "crates/mcp_server/src/lib.rs",
        "function": "call_tool",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/lib.rs::list_resources",
        "file": "crates/mcp_server/src/lib.rs",
        "function": "list_resources",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/lib.rs::read_resource",
        "file": "crates/mcp_server/src/lib.rs",
        "function": "read_resource",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/lib.rs::list_prompts",
        "file": "crates/mcp_server/src/lib.rs",
        "function": "list_prompts",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/lib.rs::get_prompt",
        "file": "crates/mcp_server/src/lib.rs",
        "function": "get_prompt",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/lib.rs::sample",
        "file": "crates/mcp_server/src/lib.rs",
        "function": "sample",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/lib.rs::handle_request",
        "file": "crates/mcp_server/src/lib.rs",
        "function": "handle_request",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/lib.rs::initialize",
        "file": "crates/mcp_server/src/lib.rs",
        "function": "initialize",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/lib.rs::list_tools",
        "file": "crates/mcp_server/src/lib.rs",
        "function": "list_tools",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/lib.rs::call_tool",
        "file": "crates/mcp_server/src/lib.rs",
        "function": "call_tool",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/lib.rs::list_resources",
        "file": "crates/mcp_server/src/lib.rs",
        "function": "list_resources",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/lib.rs::read_resource",
        "file": "crates/mcp_server/src/lib.rs",
        "function": "read_resource",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/lib.rs::list_prompts",
        "file": "crates/mcp_server/src/lib.rs",
        "function": "list_prompts",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/lib.rs::get_prompt",
        "file": "crates/mcp_server/src/lib.rs",
        "function": "get_prompt",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/lib.rs::sample",
        "file": "crates/mcp_server/src/lib.rs",
        "function": "sample",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/cli.rs::new",
        "file": "crates/mcp_server/src/cli.rs",
        "function": "new",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/cli.rs::generate",
        "file": "crates/mcp_server/src/cli.rs",
        "function": "generate",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/cli.rs::main",
        "file": "crates/mcp_server/src/cli.rs",
        "function": "main",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/cli.rs::example_client",
        "file": "crates/mcp_server/src/cli.rs",
        "function": "example_client",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/transport/websocket.rs::new",
        "file": "crates/mcp_server/src/transport/websocket.rs",
        "function": "new",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "id": "crates/mcp_server/src/transport/websocket.rs::run",
        "file": "crates/mcp_server/src/transport/websocket.rs",
        "function": "run",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "id": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "file": "crates/mcp_server/src/transport/websocket.rs",
        "function": "load_manifest",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "id": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "file": "crates/mcp_server/src/transport/websocket.rs",
        "function": "refresh_manifest",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "id": "crates/mcp_server/src/transport/websocket.rs::new",
        "file": "crates/mcp_server/src/transport/websocket.rs",
        "function": "new",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/transport/websocket.rs::run",
        "file": "crates/mcp_server/src/transport/websocket.rs",
        "function": "run",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/transport/websocket.rs::handle_session",
        "file": "crates/mcp_server/src/transport/websocket.rs",
        "function": "handle_session",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "file": "crates/mcp_server/src/transport/websocket.rs",
        "function": "load_manifest",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "file": "crates/mcp_server/src/transport/websocket.rs",
        "function": "refresh_manifest",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/transport/stdio.rs::new",
        "file": "crates/mcp_server/src/transport/stdio.rs",
        "function": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/transport/stdio.rs::run",
        "file": "crates/mcp_server/src/transport/stdio.rs",
        "function": "run",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "id": "crates/mcp_server/src/transport/stdio.rs::run",
        "file": "crates/mcp_server/src/transport/stdio.rs",
        "function": "run",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/transport/http.rs::new",
        "file": "crates/mcp_server/src/transport/http.rs",
        "function": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/transport/http.rs::router",
        "file": "crates/mcp_server/src/transport/http.rs",
        "function": "router",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/transport/http.rs::run",
        "file": "crates/mcp_server/src/transport/http.rs",
        "function": "run",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "id": "crates/mcp_server/src/transport/http.rs::run",
        "file": "crates/mcp_server/src/transport/http.rs",
        "function": "run",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/transport/http.rs::handle_health",
        "file": "crates/mcp_server/src/transport/http.rs",
        "function": "handle_health",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/transport/http.rs::handle_post",
        "file": "crates/mcp_server/src/transport/http.rs",
        "function": "handle_post",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/transport/http.rs::handle_sse",
        "file": "crates/mcp_server/src/transport/http.rs",
        "function": "handle_sse",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/mcp_server/src/transport/http.rs::check_needs_sse",
        "file": "crates/mcp_server/src/transport/http.rs",
        "function": "check_needs_sse",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/service/src/config.rs::from_env",
        "file": "crates/service/src/config.rs",
        "function": "from_env",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/service/src/config.rs::validate",
        "file": "crates/service/src/config.rs",
        "function": "validate",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/service/src/config.rs::load_hosted_ai_config",
        "file": "crates/service/src/config.rs",
        "function": "load_hosted_ai_config",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/service/src/mock_engine.rs::new",
        "file": "crates/service/src/mock_engine.rs",
        "function": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/service/src/mock_engine.rs::generate",
        "file": "crates/service/src/mock_engine.rs",
        "function": "generate",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/service/src/main.rs::main",
        "file": "crates/service/src/main.rs",
        "function": "main",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/service/src/main.rs::health",
        "file": "crates/service/src/main.rs",
        "function": "health",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/service/src/main.rs::classify_legacy",
        "file": "crates/service/src/main.rs",
        "function": "classify_legacy",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/service/src/main.rs::run_legacy",
        "file": "crates/service/src/main.rs",
        "function": "run_legacy",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/service/src/main.rs::process_unified",
        "file": "crates/service/src/main.rs",
        "function": "process_unified",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/service/src/main.rs::create_covenant",
        "file": "crates/service/src/main.rs",
        "function": "create_covenant",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/service/src/main.rs::execute_strike",
        "file": "crates/service/src/main.rs",
        "function": "execute_strike",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/service/src/auth/github_oauth.rs::new",
        "file": "crates/service/src/auth/github_oauth.rs",
        "function": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "file": "crates/service/src/auth/github_oauth.rs",
        "function": "start_device_flow",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "id": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "file": "crates/service/src/auth/github_oauth.rs",
        "function": "poll_for_token",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "id": "crates/service/src/auth/github_oauth.rs::get_user",
        "file": "crates/service/src/auth/github_oauth.rs",
        "function": "get_user",
        "type": "function",
        "visibility": "public",
        "async": true
      },
      {
        "id": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "file": "crates/service/src/auth/github_oauth.rs",
        "function": "start_device_flow",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "file": "crates/service/src/auth/github_oauth.rs",
        "function": "poll_for_token",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/service/src/auth/github_oauth.rs::get_user",
        "file": "crates/service/src/auth/github_oauth.rs",
        "function": "get_user",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/engine_pymlx/src/lib.rs::new",
        "file": "crates/engine_pymlx/src/lib.rs",
        "function": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/engine_pymlx/src/lib.rs::generate",
        "file": "crates/engine_pymlx/src/lib.rs",
        "function": "generate",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/engine_pymlx/src/lib.rs::ensure_loaded",
        "file": "crates/engine_pymlx/src/lib.rs",
        "function": "ensure_loaded",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/resources/src/lib.rs::register_prompt",
        "file": "crates/resources/src/lib.rs",
        "function": "register_prompt",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/resources/src/lib.rs::register_tool",
        "file": "crates/resources/src/lib.rs",
        "function": "register_tool",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/resources/src/lib.rs::register_schema",
        "file": "crates/resources/src/lib.rs",
        "function": "register_schema",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/resources/src/lib.rs::get_prompt",
        "file": "crates/resources/src/lib.rs",
        "function": "get_prompt",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/resources/src/lib.rs::get_tool",
        "file": "crates/resources/src/lib.rs",
        "function": "get_tool",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/resources/src/lib.rs::get_schema",
        "file": "crates/resources/src/lib.rs",
        "function": "get_schema",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/resources/src/lib.rs::prompts_for_agent",
        "file": "crates/resources/src/lib.rs",
        "function": "prompts_for_agent",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/resources/src/lib.rs::export_json",
        "file": "crates/resources/src/lib.rs",
        "function": "export_json",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/resources/src/lib.rs::render_prompt",
        "file": "crates/resources/src/lib.rs",
        "function": "render_prompt",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/resources/src/lib.rs::load_builtin_resources",
        "file": "crates/resources/src/lib.rs",
        "function": "load_builtin_resources",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/resources/src/sampling.rs::architect",
        "file": "crates/resources/src/sampling.rs",
        "function": "architect",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/resources/src/sampling.rs::foreman",
        "file": "crates/resources/src/sampling.rs",
        "function": "foreman",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/resources/src/sampling.rs::worker",
        "file": "crates/resources/src/sampling.rs",
        "function": "worker",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/resources/src/sampling.rs::new",
        "file": "crates/resources/src/sampling.rs",
        "function": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/resources/src/sampling.rs::register_strategy",
        "file": "crates/resources/src/sampling.rs",
        "function": "register_strategy",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/resources/src/sampling.rs::should_sample",
        "file": "crates/resources/src/sampling.rs",
        "function": "should_sample",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/resources/src/sampling.rs::record_sample",
        "file": "crates/resources/src/sampling.rs",
        "function": "record_sample",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/resources/src/sampling.rs::get_samples_for_validation",
        "file": "crates/resources/src/sampling.rs",
        "function": "get_samples_for_validation",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/resources/src/sampling.rs::sample_from_array",
        "file": "crates/resources/src/sampling.rs",
        "function": "sample_from_array",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/resources/src/sampling.rs::default",
        "file": "crates/resources/src/sampling.rs",
        "function": "default",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/resources/src/tools/covenant.rs::create_covenant_tool",
        "file": "crates/resources/src/tools/covenant.rs",
        "function": "create_covenant_tool",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/resources/src/tools/mlx.rs::classify_tool",
        "file": "crates/resources/src/tools/mlx.rs",
        "function": "classify_tool",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/resources/src/tools/mlx.rs::inference_tool",
        "file": "crates/resources/src/tools/mlx.rs",
        "function": "inference_tool",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/resources/src/tools/github.rs::create_pr_tool",
        "file": "crates/resources/src/tools/github.rs",
        "function": "create_pr_tool",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/resources/src/tools/github.rs::analyze_repo_tool",
        "file": "crates/resources/src/tools/github.rs",
        "function": "analyze_repo_tool",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/resources/src/tools/fusion.rs::process_fragments_tool",
        "file": "crates/resources/src/tools/fusion.rs",
        "function": "process_fragments_tool",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/resources/src/schemas/covenant.rs::covenant_schema",
        "file": "crates/resources/src/schemas/covenant.rs",
        "function": "covenant_schema",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/resources/src/schemas/strike.rs::strike_order_schema",
        "file": "crates/resources/src/schemas/strike.rs",
        "function": "strike_order_schema",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/resources/src/schemas/agent.rs::delegation_plan_schema",
        "file": "crates/resources/src/schemas/agent.rs",
        "function": "delegation_plan_schema",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/resources/src/schemas/agent.rs::agent_message_schema",
        "file": "crates/resources/src/schemas/agent.rs",
        "function": "agent_message_schema",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/resources/src/schemas/fusion.rs::fusion_trail_schema",
        "file": "crates/resources/src/schemas/fusion.rs",
        "function": "fusion_trail_schema",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/resources/src/prompts/covenant.rs::creation_prompt",
        "file": "crates/resources/src/prompts/covenant.rs",
        "function": "creation_prompt",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/resources/src/prompts/covenant.rs::review_prompt",
        "file": "crates/resources/src/prompts/covenant.rs",
        "function": "review_prompt",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/resources/src/prompts/strike.rs::delegation_prompt",
        "file": "crates/resources/src/prompts/strike.rs",
        "function": "delegation_prompt",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/resources/src/prompts/strike.rs::pr_creation_prompt",
        "file": "crates/resources/src/prompts/strike.rs",
        "function": "pr_creation_prompt",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/resources/src/prompts/agent.rs::agent_communication_prompt",
        "file": "crates/resources/src/prompts/agent.rs",
        "function": "agent_communication_prompt",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/resources/src/prompts/agent.rs::task_delegation_prompt",
        "file": "crates/resources/src/prompts/agent.rs",
        "function": "task_delegation_prompt",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/resources/src/prompts/fusion.rs::hygiene_prompt",
        "file": "crates/resources/src/prompts/fusion.rs",
        "function": "hygiene_prompt",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/pyffi/src/lib.rs::init",
        "file": "crates/pyffi/src/lib.rs",
        "function": "init",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/pyffi/src/lib.rs::classify",
        "file": "crates/pyffi/src/lib.rs",
        "function": "classify",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/pyffi/src/lib.rs::run",
        "file": "crates/pyffi/src/lib.rs",
        "function": "run",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/pyffi/src/lib.rs::homeskillet_oa4_rs",
        "file": "crates/pyffi/src/lib.rs",
        "function": "homeskillet_oa4_rs",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/wasm_classifier/src/lib.rs::classify_task",
        "file": "crates/wasm_classifier/src/lib.rs",
        "function": "classify_task",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/wasm_classifier/src/lib.rs::get_version",
        "file": "crates/wasm_classifier/src/lib.rs",
        "function": "get_version",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/wasm_classifier/src/lib.rs::init",
        "file": "crates/wasm_classifier/src/lib.rs",
        "function": "init",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::get_absorbed",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "get_absorbed",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::get_pending",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "get_pending",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::get_events",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "get_events",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::get_iterations",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "get_iterations",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::get_anchors",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "get_anchors",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::as_dict",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "as_dict",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::as_dict",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "as_dict",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::as_dict",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "as_dict",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::new_native",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "new_native",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::run_native_cycle",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "run_native_cycle",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "compute_fingerprint",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::thread_count",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "thread_count",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::configured_thread_count",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "configured_thread_count",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::new",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "envelope_cycle",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::fingerprint",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "fingerprint",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "fragment_hash",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::new",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "new",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "envelope_cycle",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "fragment_hash",
        "type": "function",
        "visibility": "public",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::from",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "from",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::extract_bound",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "extract_bound",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::new",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "new",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::to_report",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "to_report",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::from_data",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "from_data",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::new",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "new",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::compute_states",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "compute_states",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::compute_states",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "compute_states",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::configured_threads",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "configured_threads",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::thread_count",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "thread_count",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::run_cycle",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "run_cycle",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::compute_anchor_hash",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "compute_anchor_hash",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "compute_fingerprint",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::detect_language",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "detect_language",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "hygiene_score",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::compute_indent_balance",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "compute_indent_balance",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::compute_comment_ratio",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "compute_comment_ratio",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::path",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "path",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::idx",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "idx",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::lines",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "lines",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::hash",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "hash",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "hygiene_score",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::language",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "language",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::fingerprint",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "fingerprint",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::body_len",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "body_len",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::event",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "event",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::path",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "path",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::idx",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "idx",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::lines",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "lines",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::hash",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "hash",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "hygiene_score",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::anchor_prev",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "anchor_prev",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::anchor_next",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "anchor_next",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::language",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "language",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::fingerprint",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "fingerprint",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::iteration_index",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "iteration_index",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::absorbed",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "absorbed",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::pending",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "pending",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::events",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "events",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::iterations",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "iterations",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::anchors",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "anchors",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::threads",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "threads",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::configured_threads",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "configured_threads",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::harpoon_core",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "harpoon_core",
        "type": "function",
        "visibility": "private",
        "async": false
      },
      {
        "id": "crates/harpoon-core/src/lib.rs::serde_json_to_py",
        "file": "crates/harpoon-core/src/lib.rs",
        "function": "serde_json_to_py",
        "type": "function",
        "visibility": "private",
        "async": false
      }
    ],
    "edges": [
      {
        "from": "scripts/generate_high_signal_graph.py::main",
        "to": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_high_signal_graph.py::main",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/generate_high_signal_graph.py::main",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/generate_high_signal_graph.py::main",
        "to": "scripts/generate_network_graph_qoq.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_high_signal_graph.py::main",
        "to": "scripts/compliance/generate-policy-templates.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_high_signal_graph.py::main",
        "to": "crates/mcp_server/src/cli.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_high_signal_graph.py::main",
        "to": "scripts/analyze_codebase_simple.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_high_signal_graph.py::main",
        "to": "scripts/analyze_codebase.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_high_signal_graph.py::main",
        "to": "scripts/comprehensive_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_high_signal_graph.py::main",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/generate_high_signal_graph.py::main",
        "to": "scripts/compliance/audit-trail-generator.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_high_signal_graph.py::main",
        "to": "scripts/compliance/compliance-dashboard.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_high_signal_graph.py::main",
        "to": "crates/service/src/main.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_high_signal_graph.py::main",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/generate_high_signal_graph.py::main",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/generate_high_signal_graph.py::main",
        "to": "scripts/generate_unified_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_high_signal_graph.py::main",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/generate_high_signal_graph.py::main",
        "to": "scripts/generate_network_graph.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_high_signal_graph.py::main",
        "to": "scripts/compliance/compliance-scanner.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_high_signal_graph.py::main",
        "to": "crates/orchestrator/src/config.rs::load",
        "type": "calls"
      },
      {
        "from": "scripts/generate_high_signal_graph.py::main",
        "to": "crates/harpoon_bridge/src/fusion.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_high_signal_graph.py::main",
        "to": "scripts/generate_network_graph_enhanced.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_unified_analysis.py::main",
        "to": "scripts/compliance/audit-trail-generator.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_unified_analysis.py::main",
        "to": "scripts/generate_network_graph_qoq.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_unified_analysis.py::main",
        "to": "scripts/generate_network_graph.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_unified_analysis.py::main",
        "to": "scripts/compliance/compliance-dashboard.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_unified_analysis.py::main",
        "to": "scripts/compliance/compliance-scanner.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_unified_analysis.py::main",
        "to": "crates/orchestrator/src/config.rs::load",
        "type": "calls"
      },
      {
        "from": "scripts/generate_unified_analysis.py::main",
        "to": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_unified_analysis.py::main",
        "to": "crates/harpoon_bridge/src/fusion.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_unified_analysis.py::main",
        "to": "scripts/compliance/generate-policy-templates.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_unified_analysis.py::main",
        "to": "crates/mcp_server/src/cli.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_unified_analysis.py::main",
        "to": "scripts/generate_network_graph_enhanced.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_unified_analysis.py::main",
        "to": "scripts/analyze_codebase_simple.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_unified_analysis.py::main",
        "to": "scripts/generate_high_signal_graph.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_unified_analysis.py::main",
        "to": "crates/service/src/main.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_unified_analysis.py::main",
        "to": "scripts/analyze_codebase.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_unified_analysis.py::main",
        "to": "scripts/comprehensive_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase_simple.py::setup_git_hook",
        "to": "scripts/generate_unified_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase_simple.py::main",
        "to": "scripts/generate_unified_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase_simple.py::setup_git_hook",
        "to": "scripts/compliance/audit-trail-generator.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase_simple.py::main",
        "to": "scripts/compliance/audit-trail-generator.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase_simple.py::setup_git_hook",
        "to": "scripts/generate_network_graph_qoq.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase_simple.py::main",
        "to": "scripts/generate_network_graph_qoq.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase_simple.py::setup_git_hook",
        "to": "scripts/generate_network_graph.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase_simple.py::main",
        "to": "scripts/generate_network_graph.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase_simple.py::setup_git_hook",
        "to": "scripts/analyze_codebase.py::setup_git_hook",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase_simple.py::main",
        "to": "scripts/analyze_codebase.py::setup_git_hook",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase_simple.py::setup_git_hook",
        "to": "scripts/compliance/compliance-dashboard.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase_simple.py::main",
        "to": "scripts/compliance/compliance-dashboard.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase_simple.py::setup_git_hook",
        "to": "scripts/compliance/compliance-scanner.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase_simple.py::main",
        "to": "scripts/compliance/compliance-scanner.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase_simple.py::setup_git_hook",
        "to": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase_simple.py::main",
        "to": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase_simple.py::setup_git_hook",
        "to": "crates/harpoon_bridge/src/fusion.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase_simple.py::main",
        "to": "crates/harpoon_bridge/src/fusion.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase_simple.py::setup_git_hook",
        "to": "scripts/compliance/generate-policy-templates.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase_simple.py::main",
        "to": "scripts/compliance/generate-policy-templates.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase_simple.py::setup_git_hook",
        "to": "crates/mcp_server/src/cli.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase_simple.py::main",
        "to": "crates/mcp_server/src/cli.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase_simple.py::setup_git_hook",
        "to": "scripts/generate_network_graph_enhanced.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase_simple.py::main",
        "to": "scripts/generate_network_graph_enhanced.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase_simple.py::setup_git_hook",
        "to": "scripts/generate_high_signal_graph.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase_simple.py::main",
        "to": "scripts/generate_high_signal_graph.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase_simple.py::setup_git_hook",
        "to": "crates/service/src/main.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase_simple.py::main",
        "to": "crates/service/src/main.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase_simple.py::setup_git_hook",
        "to": "scripts/analyze_codebase.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase_simple.py::main",
        "to": "scripts/analyze_codebase.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase_simple.py::setup_git_hook",
        "to": "scripts/comprehensive_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase_simple.py::main",
        "to": "scripts/comprehensive_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::run_command",
        "to": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::count_lines_of_code",
        "to": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::count_files",
        "to": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_rust_crates",
        "to": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_python_components",
        "to": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_gtm_documentation",
        "to": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_ai_agents",
        "to": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_web_components",
        "to": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_infrastructure",
        "to": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::main",
        "to": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::run_command",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::count_lines_of_code",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::count_files",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_rust_crates",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_python_components",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_gtm_documentation",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_ai_agents",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_web_components",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_infrastructure",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::main",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::run_command",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::count_lines_of_code",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::count_files",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_rust_crates",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_python_components",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_gtm_documentation",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_ai_agents",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_web_components",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_infrastructure",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::main",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::run_command",
        "to": "scripts/generate_network_graph_qoq.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::count_lines_of_code",
        "to": "scripts/generate_network_graph_qoq.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::count_files",
        "to": "scripts/generate_network_graph_qoq.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_rust_crates",
        "to": "scripts/generate_network_graph_qoq.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_python_components",
        "to": "scripts/generate_network_graph_qoq.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_gtm_documentation",
        "to": "scripts/generate_network_graph_qoq.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_ai_agents",
        "to": "scripts/generate_network_graph_qoq.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_web_components",
        "to": "scripts/generate_network_graph_qoq.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_infrastructure",
        "to": "scripts/generate_network_graph_qoq.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::main",
        "to": "scripts/generate_network_graph_qoq.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::run_command",
        "to": "scripts/compliance/generate-policy-templates.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::count_lines_of_code",
        "to": "scripts/compliance/generate-policy-templates.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::count_files",
        "to": "scripts/compliance/generate-policy-templates.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_rust_crates",
        "to": "scripts/compliance/generate-policy-templates.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_python_components",
        "to": "scripts/compliance/generate-policy-templates.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_gtm_documentation",
        "to": "scripts/compliance/generate-policy-templates.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_ai_agents",
        "to": "scripts/compliance/generate-policy-templates.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_web_components",
        "to": "scripts/compliance/generate-policy-templates.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_infrastructure",
        "to": "scripts/compliance/generate-policy-templates.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::main",
        "to": "scripts/compliance/generate-policy-templates.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::run_command",
        "to": "crates/mcp_server/src/cli.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::count_lines_of_code",
        "to": "crates/mcp_server/src/cli.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::count_files",
        "to": "crates/mcp_server/src/cli.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_rust_crates",
        "to": "crates/mcp_server/src/cli.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_python_components",
        "to": "crates/mcp_server/src/cli.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_gtm_documentation",
        "to": "crates/mcp_server/src/cli.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_ai_agents",
        "to": "crates/mcp_server/src/cli.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_web_components",
        "to": "crates/mcp_server/src/cli.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_infrastructure",
        "to": "crates/mcp_server/src/cli.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::main",
        "to": "crates/mcp_server/src/cli.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::run_command",
        "to": "scripts/analyze_codebase_simple.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::count_lines_of_code",
        "to": "scripts/analyze_codebase_simple.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::count_files",
        "to": "scripts/analyze_codebase_simple.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_rust_crates",
        "to": "scripts/analyze_codebase_simple.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_python_components",
        "to": "scripts/analyze_codebase_simple.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_gtm_documentation",
        "to": "scripts/analyze_codebase_simple.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_ai_agents",
        "to": "scripts/analyze_codebase_simple.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_web_components",
        "to": "scripts/analyze_codebase_simple.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_infrastructure",
        "to": "scripts/analyze_codebase_simple.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::main",
        "to": "scripts/analyze_codebase_simple.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::run_command",
        "to": "scripts/generate_high_signal_graph.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::count_lines_of_code",
        "to": "scripts/generate_high_signal_graph.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::count_files",
        "to": "scripts/generate_high_signal_graph.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_rust_crates",
        "to": "scripts/generate_high_signal_graph.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_python_components",
        "to": "scripts/generate_high_signal_graph.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_gtm_documentation",
        "to": "scripts/generate_high_signal_graph.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_ai_agents",
        "to": "scripts/generate_high_signal_graph.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_web_components",
        "to": "scripts/generate_high_signal_graph.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_infrastructure",
        "to": "scripts/generate_high_signal_graph.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::main",
        "to": "scripts/generate_high_signal_graph.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::run_command",
        "to": "scripts/analyze_codebase.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::count_lines_of_code",
        "to": "scripts/analyze_codebase.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::count_files",
        "to": "scripts/analyze_codebase.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_rust_crates",
        "to": "scripts/analyze_codebase.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_python_components",
        "to": "scripts/analyze_codebase.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_gtm_documentation",
        "to": "scripts/analyze_codebase.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_ai_agents",
        "to": "scripts/analyze_codebase.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_web_components",
        "to": "scripts/analyze_codebase.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_infrastructure",
        "to": "scripts/analyze_codebase.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::main",
        "to": "scripts/analyze_codebase.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::run_command",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::count_lines_of_code",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::count_files",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_rust_crates",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_python_components",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_gtm_documentation",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_ai_agents",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_web_components",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_infrastructure",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::main",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::run_command",
        "to": "scripts/compliance/audit-trail-generator.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::count_lines_of_code",
        "to": "scripts/compliance/audit-trail-generator.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::count_files",
        "to": "scripts/compliance/audit-trail-generator.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_rust_crates",
        "to": "scripts/compliance/audit-trail-generator.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_python_components",
        "to": "scripts/compliance/audit-trail-generator.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_gtm_documentation",
        "to": "scripts/compliance/audit-trail-generator.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_ai_agents",
        "to": "scripts/compliance/audit-trail-generator.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_web_components",
        "to": "scripts/compliance/audit-trail-generator.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_infrastructure",
        "to": "scripts/compliance/audit-trail-generator.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::main",
        "to": "scripts/compliance/audit-trail-generator.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::run_command",
        "to": "scripts/compliance/compliance-dashboard.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::count_lines_of_code",
        "to": "scripts/compliance/compliance-dashboard.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::count_files",
        "to": "scripts/compliance/compliance-dashboard.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_rust_crates",
        "to": "scripts/compliance/compliance-dashboard.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_python_components",
        "to": "scripts/compliance/compliance-dashboard.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_gtm_documentation",
        "to": "scripts/compliance/compliance-dashboard.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_ai_agents",
        "to": "scripts/compliance/compliance-dashboard.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_web_components",
        "to": "scripts/compliance/compliance-dashboard.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_infrastructure",
        "to": "scripts/compliance/compliance-dashboard.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::main",
        "to": "scripts/compliance/compliance-dashboard.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::run_command",
        "to": "crates/service/src/main.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::count_lines_of_code",
        "to": "crates/service/src/main.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::count_files",
        "to": "crates/service/src/main.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_rust_crates",
        "to": "crates/service/src/main.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_python_components",
        "to": "crates/service/src/main.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_gtm_documentation",
        "to": "crates/service/src/main.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_ai_agents",
        "to": "crates/service/src/main.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_web_components",
        "to": "crates/service/src/main.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_infrastructure",
        "to": "crates/service/src/main.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::main",
        "to": "crates/service/src/main.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::run_command",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::count_lines_of_code",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::count_files",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_rust_crates",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_python_components",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_gtm_documentation",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_ai_agents",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_web_components",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_infrastructure",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::main",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::run_command",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::count_lines_of_code",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::count_files",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_rust_crates",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_python_components",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_gtm_documentation",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_ai_agents",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_web_components",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_infrastructure",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::main",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::run_command",
        "to": "scripts/generate_unified_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::count_lines_of_code",
        "to": "scripts/generate_unified_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::count_files",
        "to": "scripts/generate_unified_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_rust_crates",
        "to": "scripts/generate_unified_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_python_components",
        "to": "scripts/generate_unified_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_gtm_documentation",
        "to": "scripts/generate_unified_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_ai_agents",
        "to": "scripts/generate_unified_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_web_components",
        "to": "scripts/generate_unified_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_infrastructure",
        "to": "scripts/generate_unified_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::main",
        "to": "scripts/generate_unified_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::run_command",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::count_lines_of_code",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::count_files",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_rust_crates",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_python_components",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_gtm_documentation",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_ai_agents",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_web_components",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_infrastructure",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::main",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::run_command",
        "to": "scripts/generate_network_graph.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::count_lines_of_code",
        "to": "scripts/generate_network_graph.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::count_files",
        "to": "scripts/generate_network_graph.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_rust_crates",
        "to": "scripts/generate_network_graph.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_python_components",
        "to": "scripts/generate_network_graph.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_gtm_documentation",
        "to": "scripts/generate_network_graph.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_ai_agents",
        "to": "scripts/generate_network_graph.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_web_components",
        "to": "scripts/generate_network_graph.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_infrastructure",
        "to": "scripts/generate_network_graph.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::main",
        "to": "scripts/generate_network_graph.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::run_command",
        "to": "scripts/compliance/compliance-scanner.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::count_lines_of_code",
        "to": "scripts/compliance/compliance-scanner.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::count_files",
        "to": "scripts/compliance/compliance-scanner.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_rust_crates",
        "to": "scripts/compliance/compliance-scanner.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_python_components",
        "to": "scripts/compliance/compliance-scanner.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_gtm_documentation",
        "to": "scripts/compliance/compliance-scanner.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_ai_agents",
        "to": "scripts/compliance/compliance-scanner.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_web_components",
        "to": "scripts/compliance/compliance-scanner.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_infrastructure",
        "to": "scripts/compliance/compliance-scanner.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::main",
        "to": "scripts/compliance/compliance-scanner.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::run_command",
        "to": "crates/harpoon_bridge/src/fusion.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::count_lines_of_code",
        "to": "crates/harpoon_bridge/src/fusion.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::count_files",
        "to": "crates/harpoon_bridge/src/fusion.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_rust_crates",
        "to": "crates/harpoon_bridge/src/fusion.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_python_components",
        "to": "crates/harpoon_bridge/src/fusion.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_gtm_documentation",
        "to": "crates/harpoon_bridge/src/fusion.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_ai_agents",
        "to": "crates/harpoon_bridge/src/fusion.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_web_components",
        "to": "crates/harpoon_bridge/src/fusion.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_infrastructure",
        "to": "crates/harpoon_bridge/src/fusion.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::main",
        "to": "crates/harpoon_bridge/src/fusion.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::run_command",
        "to": "scripts/generate_network_graph_enhanced.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::count_lines_of_code",
        "to": "scripts/generate_network_graph_enhanced.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::count_files",
        "to": "scripts/generate_network_graph_enhanced.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_rust_crates",
        "to": "scripts/generate_network_graph_enhanced.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_python_components",
        "to": "scripts/generate_network_graph_enhanced.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_gtm_documentation",
        "to": "scripts/generate_network_graph_enhanced.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_ai_agents",
        "to": "scripts/generate_network_graph_enhanced.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_web_components",
        "to": "scripts/generate_network_graph_enhanced.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::analyze_infrastructure",
        "to": "scripts/generate_network_graph_enhanced.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/comprehensive_analysis.py::main",
        "to": "scripts/generate_network_graph_enhanced.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph.py::main",
        "to": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph.py::main",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph.py::main",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph.py::main",
        "to": "scripts/generate_network_graph_qoq.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph.py::main",
        "to": "scripts/compliance/generate-policy-templates.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph.py::main",
        "to": "crates/mcp_server/src/cli.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph.py::main",
        "to": "scripts/analyze_codebase_simple.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph.py::main",
        "to": "scripts/generate_high_signal_graph.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph.py::main",
        "to": "scripts/analyze_codebase.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph.py::main",
        "to": "scripts/comprehensive_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph.py::main",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph.py::main",
        "to": "scripts/compliance/audit-trail-generator.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph.py::main",
        "to": "scripts/compliance/compliance-dashboard.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph.py::main",
        "to": "crates/service/src/main.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph.py::main",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph.py::main",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph.py::main",
        "to": "scripts/generate_unified_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph.py::main",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph.py::main",
        "to": "scripts/compliance/compliance-scanner.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph.py::main",
        "to": "crates/orchestrator/src/config.rs::load",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph.py::main",
        "to": "crates/harpoon_bridge/src/fusion.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph.py::main",
        "to": "scripts/generate_network_graph_enhanced.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph_qoq.py::main",
        "to": "scripts/generate_unified_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph_qoq.py::main",
        "to": "scripts/compliance/audit-trail-generator.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph_qoq.py::main",
        "to": "scripts/generate_network_graph.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph_qoq.py::main",
        "to": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph_qoq.py::main",
        "to": "scripts/compliance/compliance-dashboard.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph_qoq.py::main",
        "to": "scripts/compliance/compliance-scanner.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph_qoq.py::main",
        "to": "crates/orchestrator/src/config.rs::load",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph_qoq.py::main",
        "to": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph_qoq.py::main",
        "to": "crates/harpoon_bridge/src/fusion.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph_qoq.py::main",
        "to": "scripts/compliance/generate-policy-templates.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph_qoq.py::main",
        "to": "crates/mcp_server/src/cli.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph_qoq.py::main",
        "to": "scripts/generate_network_graph_enhanced.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph_qoq.py::main",
        "to": "scripts/analyze_codebase_simple.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph_qoq.py::main",
        "to": "scripts/generate_high_signal_graph.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph_qoq.py::main",
        "to": "crates/service/src/main.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph_qoq.py::main",
        "to": "scripts/analyze_codebase.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph_qoq.py::main",
        "to": "scripts/comprehensive_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase.py::setup_git_hook",
        "to": "scripts/analyze_codebase_simple.py::setup_git_hook",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase.py::main",
        "to": "scripts/analyze_codebase_simple.py::setup_git_hook",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase.py::setup_git_hook",
        "to": "scripts/generate_unified_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase.py::main",
        "to": "scripts/generate_unified_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase.py::setup_git_hook",
        "to": "scripts/compliance/audit-trail-generator.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase.py::main",
        "to": "scripts/compliance/audit-trail-generator.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase.py::setup_git_hook",
        "to": "scripts/generate_network_graph_qoq.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase.py::main",
        "to": "scripts/generate_network_graph_qoq.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase.py::setup_git_hook",
        "to": "scripts/generate_network_graph.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase.py::main",
        "to": "scripts/generate_network_graph.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase.py::setup_git_hook",
        "to": "scripts/compliance/compliance-dashboard.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase.py::main",
        "to": "scripts/compliance/compliance-dashboard.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase.py::setup_git_hook",
        "to": "scripts/compliance/compliance-scanner.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase.py::main",
        "to": "scripts/compliance/compliance-scanner.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase.py::setup_git_hook",
        "to": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase.py::main",
        "to": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase.py::setup_git_hook",
        "to": "crates/harpoon_bridge/src/fusion.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase.py::main",
        "to": "crates/harpoon_bridge/src/fusion.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase.py::setup_git_hook",
        "to": "scripts/compliance/generate-policy-templates.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase.py::main",
        "to": "scripts/compliance/generate-policy-templates.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase.py::setup_git_hook",
        "to": "crates/mcp_server/src/cli.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase.py::main",
        "to": "crates/mcp_server/src/cli.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase.py::setup_git_hook",
        "to": "scripts/generate_network_graph_enhanced.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase.py::main",
        "to": "scripts/generate_network_graph_enhanced.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase.py::setup_git_hook",
        "to": "scripts/analyze_codebase_simple.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase.py::main",
        "to": "scripts/analyze_codebase_simple.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase.py::setup_git_hook",
        "to": "scripts/generate_high_signal_graph.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase.py::main",
        "to": "scripts/generate_high_signal_graph.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase.py::setup_git_hook",
        "to": "crates/service/src/main.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase.py::main",
        "to": "crates/service/src/main.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase.py::setup_git_hook",
        "to": "scripts/comprehensive_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/analyze_codebase.py::main",
        "to": "scripts/comprehensive_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph_enhanced.py::main",
        "to": "scripts/generate_unified_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph_enhanced.py::main",
        "to": "scripts/compliance/audit-trail-generator.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph_enhanced.py::main",
        "to": "scripts/generate_network_graph_qoq.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph_enhanced.py::main",
        "to": "scripts/generate_network_graph.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph_enhanced.py::main",
        "to": "scripts/compliance/compliance-dashboard.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph_enhanced.py::main",
        "to": "scripts/compliance/compliance-scanner.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph_enhanced.py::main",
        "to": "crates/orchestrator/src/config.rs::load",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph_enhanced.py::main",
        "to": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph_enhanced.py::main",
        "to": "crates/harpoon_bridge/src/fusion.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph_enhanced.py::main",
        "to": "scripts/compliance/generate-policy-templates.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph_enhanced.py::main",
        "to": "crates/mcp_server/src/cli.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph_enhanced.py::main",
        "to": "scripts/analyze_codebase_simple.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph_enhanced.py::main",
        "to": "scripts/generate_high_signal_graph.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph_enhanced.py::main",
        "to": "crates/service/src/main.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph_enhanced.py::main",
        "to": "scripts/analyze_codebase.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/generate_network_graph_enhanced.py::main",
        "to": "scripts/comprehensive_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/audit-trail-generator.py::main",
        "to": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/audit-trail-generator.py::main",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/audit-trail-generator.py::main",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/audit-trail-generator.py::main",
        "to": "scripts/generate_network_graph_qoq.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/audit-trail-generator.py::main",
        "to": "tests/mocks/mod.rs::connect",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/audit-trail-generator.py::main",
        "to": "scripts/compliance/generate-policy-templates.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/audit-trail-generator.py::main",
        "to": "crates/mcp_server/src/cli.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/audit-trail-generator.py::main",
        "to": "scripts/analyze_codebase_simple.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/audit-trail-generator.py::main",
        "to": "scripts/generate_high_signal_graph.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/audit-trail-generator.py::main",
        "to": "scripts/analyze_codebase.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/audit-trail-generator.py::main",
        "to": "scripts/comprehensive_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/audit-trail-generator.py::main",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/audit-trail-generator.py::main",
        "to": "scripts/compliance/compliance-dashboard.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/audit-trail-generator.py::main",
        "to": "crates/service/src/main.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/audit-trail-generator.py::main",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/audit-trail-generator.py::main",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/audit-trail-generator.py::main",
        "to": "scripts/generate_unified_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/audit-trail-generator.py::main",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/audit-trail-generator.py::main",
        "to": "scripts/generate_network_graph.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/audit-trail-generator.py::main",
        "to": "scripts/compliance/compliance-scanner.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/audit-trail-generator.py::main",
        "to": "crates/harpoon_bridge/src/fusion.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/audit-trail-generator.py::main",
        "to": "scripts/generate_network_graph_enhanced.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/compliance-dashboard.py::main",
        "to": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/compliance-dashboard.py::main",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/compliance-dashboard.py::main",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/compliance-dashboard.py::main",
        "to": "scripts/generate_network_graph_qoq.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/compliance-dashboard.py::main",
        "to": "scripts/compliance/generate-policy-templates.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/compliance-dashboard.py::main",
        "to": "crates/mcp_server/src/cli.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/compliance-dashboard.py::main",
        "to": "scripts/analyze_codebase_simple.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/compliance-dashboard.py::main",
        "to": "scripts/generate_high_signal_graph.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/compliance-dashboard.py::main",
        "to": "scripts/analyze_codebase.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/compliance-dashboard.py::main",
        "to": "scripts/comprehensive_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/compliance-dashboard.py::main",
        "to": "crates/orchestrator/src/hosted_ai.rs::get_metrics",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/compliance-dashboard.py::main",
        "to": "scripts/compliance/audit-trail-generator.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/compliance-dashboard.py::main",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/compliance-dashboard.py::main",
        "to": "crates/service/src/main.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/compliance-dashboard.py::main",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/compliance-dashboard.py::main",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/compliance-dashboard.py::main",
        "to": "scripts/generate_unified_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/compliance-dashboard.py::main",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/compliance-dashboard.py::main",
        "to": "scripts/generate_network_graph.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/compliance-dashboard.py::main",
        "to": "scripts/compliance/compliance-scanner.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/compliance-dashboard.py::main",
        "to": "crates/harpoon_bridge/src/fusion.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/compliance-dashboard.py::main",
        "to": "scripts/generate_network_graph_enhanced.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/compliance-scanner.py::main",
        "to": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/compliance-scanner.py::main",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/compliance-scanner.py::main",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/compliance-scanner.py::main",
        "to": "scripts/generate_network_graph_qoq.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/compliance-scanner.py::main",
        "to": "scripts/compliance/generate-policy-templates.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/compliance-scanner.py::main",
        "to": "crates/mcp_server/src/cli.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/compliance-scanner.py::main",
        "to": "scripts/analyze_codebase_simple.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/compliance-scanner.py::main",
        "to": "scripts/generate_high_signal_graph.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/compliance-scanner.py::main",
        "to": "scripts/analyze_codebase.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/compliance-scanner.py::main",
        "to": "scripts/comprehensive_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/compliance-scanner.py::main",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/compliance-scanner.py::main",
        "to": "scripts/compliance/audit-trail-generator.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/compliance-scanner.py::main",
        "to": "scripts/compliance/compliance-dashboard.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/compliance-scanner.py::main",
        "to": "crates/service/src/main.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/compliance-scanner.py::main",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/compliance-scanner.py::main",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/compliance-scanner.py::main",
        "to": "scripts/generate_unified_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/compliance-scanner.py::main",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/compliance-scanner.py::main",
        "to": "scripts/generate_network_graph.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/compliance-scanner.py::main",
        "to": "crates/harpoon_bridge/src/fusion.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/compliance-scanner.py::main",
        "to": "scripts/generate_network_graph_enhanced.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/generate-policy-templates.py::main",
        "to": "scripts/generate_unified_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/generate-policy-templates.py::main",
        "to": "scripts/compliance/audit-trail-generator.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/generate-policy-templates.py::main",
        "to": "scripts/generate_network_graph_qoq.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/generate-policy-templates.py::main",
        "to": "scripts/generate_network_graph.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/generate-policy-templates.py::main",
        "to": "scripts/compliance/compliance-dashboard.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/generate-policy-templates.py::main",
        "to": "scripts/compliance/compliance-scanner.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/generate-policy-templates.py::main",
        "to": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/generate-policy-templates.py::main",
        "to": "crates/harpoon_bridge/src/fusion.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/generate-policy-templates.py::main",
        "to": "crates/orchestrator/src/metrics.rs::render",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/generate-policy-templates.py::main",
        "to": "crates/mcp_server/src/cli.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/generate-policy-templates.py::main",
        "to": "scripts/generate_network_graph_enhanced.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/generate-policy-templates.py::main",
        "to": "scripts/analyze_codebase_simple.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/generate-policy-templates.py::main",
        "to": "scripts/generate_high_signal_graph.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/generate-policy-templates.py::main",
        "to": "crates/service/src/main.rs::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/generate-policy-templates.py::main",
        "to": "scripts/analyze_codebase.py::main",
        "type": "calls"
      },
      {
        "from": "scripts/compliance/generate-policy-templates.py::main",
        "to": "scripts/comprehensive_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::connect",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::disconnect",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::send",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::received_messages",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::generate",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::set_manifest",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::classify",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::connect",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::disconnect",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::send",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::received_messages",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::generate",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::set_manifest",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::classify",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::connect",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::disconnect",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::send",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::received_messages",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::generate",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::set_manifest",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::classify",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::connect",
        "to": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::disconnect",
        "to": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::send",
        "to": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::received_messages",
        "to": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::generate",
        "to": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::set_manifest",
        "to": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::classify",
        "to": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::connect",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::disconnect",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::send",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::received_messages",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::generate",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::set_manifest",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::classify",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::connect",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::disconnect",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::send",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::received_messages",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::generate",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::set_manifest",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::classify",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::connect",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::disconnect",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::send",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::received_messages",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::generate",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::set_manifest",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::classify",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::connect",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::disconnect",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::send",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::received_messages",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::generate",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::set_manifest",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::classify",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::connect",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::disconnect",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::send",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::received_messages",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::generate",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::set_manifest",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::classify",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::connect",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::disconnect",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::send",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::received_messages",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::generate",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::set_manifest",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::classify",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::connect",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::disconnect",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::send",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::received_messages",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::generate",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::set_manifest",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::classify",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::connect",
        "to": "crates/orchestrator/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::disconnect",
        "to": "crates/orchestrator/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::send",
        "to": "crates/orchestrator/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::received_messages",
        "to": "crates/orchestrator/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/orchestrator/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/orchestrator/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::generate",
        "to": "crates/orchestrator/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::set_manifest",
        "to": "crates/orchestrator/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/orchestrator/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/orchestrator/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/orchestrator/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::classify",
        "to": "crates/orchestrator/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/orchestrator/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/orchestrator/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/orchestrator/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/orchestrator/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/orchestrator/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::connect",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::disconnect",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::send",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::received_messages",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::generate",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::set_manifest",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::classify",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::connect",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::disconnect",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::send",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::received_messages",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::generate",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::set_manifest",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::classify",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/service/src/mock_engine.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::connect",
        "to": "crates/service/src/mock_engine.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::disconnect",
        "to": "crates/service/src/mock_engine.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::send",
        "to": "crates/service/src/mock_engine.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::received_messages",
        "to": "crates/service/src/mock_engine.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/service/src/mock_engine.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/service/src/mock_engine.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/service/src/mock_engine.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/service/src/mock_engine.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::generate",
        "to": "crates/service/src/mock_engine.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::set_manifest",
        "to": "crates/service/src/mock_engine.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/service/src/mock_engine.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/service/src/mock_engine.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/service/src/mock_engine.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/service/src/mock_engine.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/service/src/mock_engine.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::classify",
        "to": "crates/service/src/mock_engine.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/service/src/mock_engine.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/service/src/mock_engine.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/service/src/mock_engine.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/service/src/mock_engine.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/service/src/mock_engine.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::connect",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::disconnect",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::send",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::received_messages",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::generate",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::set_manifest",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::classify",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::connect",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::disconnect",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::send",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::received_messages",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::generate",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::set_manifest",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::classify",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::connect",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::disconnect",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::send",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::received_messages",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::generate",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::set_manifest",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::classify",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::connect",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::disconnect",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::send",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::received_messages",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::generate",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::set_manifest",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::classify",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/mcp_server/src/cli.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::connect",
        "to": "crates/mcp_server/src/cli.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::disconnect",
        "to": "crates/mcp_server/src/cli.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::send",
        "to": "crates/mcp_server/src/cli.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::received_messages",
        "to": "crates/mcp_server/src/cli.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/mcp_server/src/cli.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/mcp_server/src/cli.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/mcp_server/src/cli.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/mcp_server/src/cli.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::generate",
        "to": "crates/mcp_server/src/cli.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::set_manifest",
        "to": "crates/mcp_server/src/cli.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/mcp_server/src/cli.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/mcp_server/src/cli.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/mcp_server/src/cli.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/mcp_server/src/cli.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/mcp_server/src/cli.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::classify",
        "to": "crates/mcp_server/src/cli.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/mcp_server/src/cli.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/mcp_server/src/cli.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/mcp_server/src/cli.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/mcp_server/src/cli.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/mcp_server/src/cli.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::connect",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::disconnect",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::send",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::received_messages",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::generate",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::set_manifest",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::classify",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/engine_pymlx/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::connect",
        "to": "crates/engine_pymlx/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::disconnect",
        "to": "crates/engine_pymlx/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::send",
        "to": "crates/engine_pymlx/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::received_messages",
        "to": "crates/engine_pymlx/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/engine_pymlx/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/engine_pymlx/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/engine_pymlx/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/engine_pymlx/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::generate",
        "to": "crates/engine_pymlx/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::set_manifest",
        "to": "crates/engine_pymlx/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/engine_pymlx/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/engine_pymlx/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/engine_pymlx/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/engine_pymlx/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/engine_pymlx/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::classify",
        "to": "crates/engine_pymlx/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/engine_pymlx/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/engine_pymlx/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/engine_pymlx/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/engine_pymlx/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/engine_pymlx/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::connect",
        "to": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::disconnect",
        "to": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::send",
        "to": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::received_messages",
        "to": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::generate",
        "to": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::set_manifest",
        "to": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::classify",
        "to": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::connect",
        "to": "crates/orchestrator/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::disconnect",
        "to": "crates/orchestrator/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::send",
        "to": "crates/orchestrator/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::received_messages",
        "to": "crates/orchestrator/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/orchestrator/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/orchestrator/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::generate",
        "to": "crates/orchestrator/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::set_manifest",
        "to": "crates/orchestrator/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/orchestrator/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/orchestrator/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/orchestrator/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::classify",
        "to": "crates/orchestrator/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/orchestrator/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/orchestrator/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/orchestrator/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/orchestrator/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/orchestrator/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/hosted_ai.rs::inference",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::connect",
        "to": "crates/orchestrator/src/hosted_ai.rs::inference",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::disconnect",
        "to": "crates/orchestrator/src/hosted_ai.rs::inference",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::send",
        "to": "crates/orchestrator/src/hosted_ai.rs::inference",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::received_messages",
        "to": "crates/orchestrator/src/hosted_ai.rs::inference",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/hosted_ai.rs::inference",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/orchestrator/src/hosted_ai.rs::inference",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/orchestrator/src/hosted_ai.rs::inference",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/hosted_ai.rs::inference",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::generate",
        "to": "crates/orchestrator/src/hosted_ai.rs::inference",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::set_manifest",
        "to": "crates/orchestrator/src/hosted_ai.rs::inference",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/hosted_ai.rs::inference",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/orchestrator/src/hosted_ai.rs::inference",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/orchestrator/src/hosted_ai.rs::inference",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/orchestrator/src/hosted_ai.rs::inference",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/hosted_ai.rs::inference",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::classify",
        "to": "crates/orchestrator/src/hosted_ai.rs::inference",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/orchestrator/src/hosted_ai.rs::inference",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/orchestrator/src/hosted_ai.rs::inference",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/orchestrator/src/hosted_ai.rs::inference",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/orchestrator/src/hosted_ai.rs::inference",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/orchestrator/src/hosted_ai.rs::inference",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/hosted_ai.rs::release",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::connect",
        "to": "crates/orchestrator/src/hosted_ai.rs::release",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::disconnect",
        "to": "crates/orchestrator/src/hosted_ai.rs::release",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::send",
        "to": "crates/orchestrator/src/hosted_ai.rs::release",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::received_messages",
        "to": "crates/orchestrator/src/hosted_ai.rs::release",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/hosted_ai.rs::release",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/orchestrator/src/hosted_ai.rs::release",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/orchestrator/src/hosted_ai.rs::release",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/hosted_ai.rs::release",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::generate",
        "to": "crates/orchestrator/src/hosted_ai.rs::release",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::set_manifest",
        "to": "crates/orchestrator/src/hosted_ai.rs::release",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/hosted_ai.rs::release",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/orchestrator/src/hosted_ai.rs::release",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/orchestrator/src/hosted_ai.rs::release",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/orchestrator/src/hosted_ai.rs::release",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/hosted_ai.rs::release",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::classify",
        "to": "crates/orchestrator/src/hosted_ai.rs::release",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/orchestrator/src/hosted_ai.rs::release",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/orchestrator/src/hosted_ai.rs::release",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/orchestrator/src/hosted_ai.rs::release",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/orchestrator/src/hosted_ai.rs::release",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/orchestrator/src/hosted_ai.rs::release",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::connect",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::disconnect",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::send",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::received_messages",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::generate",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::set_manifest",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::classify",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::connect",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::disconnect",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::send",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::received_messages",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::generate",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::set_manifest",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::classify",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::connect",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::disconnect",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::send",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::received_messages",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::generate",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::set_manifest",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::classify",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::connect",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::disconnect",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::send",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::received_messages",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::generate",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::set_manifest",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::new",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::classify",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::start_device_flow",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::poll_for_token",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::allocate_gpu",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::inference",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/mocks/mod.rs::release",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/qoq_integration_test.rs::test_function",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/qoq_integration_test.rs::test_function",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/qoq_integration_test.rs::test_function",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/qoq_integration_test.rs::test_function",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/qoq_integration_test.rs::test_function",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/qoq_integration_test.rs::test_function",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/qoq_integration_test.rs::test_function",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/qoq_integration_test.rs::test_function",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/qoq_integration_test.rs::test_function",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/qoq_integration_test.rs::test_function",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/qoq_integration_test.rs::test_function",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/qoq_integration_test.rs::test_function",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/qoq_integration_test.rs::test_function",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/qoq_integration_test.rs::test_function",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/qoq_integration_test.rs::test_function",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/qoq_integration_test.rs::test_function",
        "to": "crates/harpoon-core/src/lib.rs::path",
        "type": "calls"
      },
      {
        "from": "tests/integration/qoq_integration_test.rs::test_function",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/qoq_integration_test.rs::test_function",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/qoq_integration_test.rs::test_function",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/qoq_integration_test.rs::test_function",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/qoq_integration_test.rs::test_function",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::start_test_server",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::shutdown",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::start_test_server",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::shutdown",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::start_test_server",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::shutdown",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::start_test_server",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::shutdown",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::start_test_server",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::shutdown",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::start_test_server",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::shutdown",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::start_test_server",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::shutdown",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::start_test_server",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::shutdown",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::start_test_server",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::shutdown",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::start_test_server",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::shutdown",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::start_test_server",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::shutdown",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::start_test_server",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::shutdown",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::start_test_server",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::shutdown",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::start_test_server",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::shutdown",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::start_test_server",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::shutdown",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::start_test_server",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::shutdown",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::start_test_server",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::shutdown",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::start_test_server",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::shutdown",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::start_test_server",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::shutdown",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::start_test_server",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::shutdown",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::start_test_server",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::shutdown",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::start_test_server",
        "to": "tests/mocks/mod.rs::send",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::shutdown",
        "to": "tests/mocks/mod.rs::send",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::start_test_server",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::shutdown",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::start_test_server",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::shutdown",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::start_test_server",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::shutdown",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::start_test_server",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::shutdown",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::start_test_server",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/websocket_mcp_test.rs::shutdown",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/github_oauth_test.rs::mock_github_responses",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/github_oauth_test.rs::mock_github_responses",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/github_oauth_test.rs::mock_github_responses",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/github_oauth_test.rs::mock_github_responses",
        "to": "tests/mocks/mod.rs::poll_for_token",
        "type": "calls"
      },
      {
        "from": "tests/integration/github_oauth_test.rs::mock_github_responses",
        "to": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "type": "calls"
      },
      {
        "from": "tests/integration/github_oauth_test.rs::mock_github_responses",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/github_oauth_test.rs::mock_github_responses",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/github_oauth_test.rs::mock_github_responses",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/github_oauth_test.rs::mock_github_responses",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/github_oauth_test.rs::mock_github_responses",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/github_oauth_test.rs::mock_github_responses",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/github_oauth_test.rs::mock_github_responses",
        "to": "tests/mocks/mod.rs::start_device_flow",
        "type": "calls"
      },
      {
        "from": "tests/integration/github_oauth_test.rs::mock_github_responses",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/github_oauth_test.rs::mock_github_responses",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/github_oauth_test.rs::mock_github_responses",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/github_oauth_test.rs::mock_github_responses",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/github_oauth_test.rs::mock_github_responses",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/github_oauth_test.rs::mock_github_responses",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/github_oauth_test.rs::mock_github_responses",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/github_oauth_test.rs::mock_github_responses",
        "to": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "type": "calls"
      },
      {
        "from": "tests/integration/github_oauth_test.rs::mock_github_responses",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/github_oauth_test.rs::mock_github_responses",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/github_oauth_test.rs::mock_github_responses",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/integration/github_oauth_test.rs::mock_github_responses",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/e2e/full_system_test.rs::smoke_test_mcp_protocol",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/e2e/full_system_test.rs::smoke_test_unified_request",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/e2e/full_system_test.rs::smoke_test_mcp_protocol",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/e2e/full_system_test.rs::smoke_test_unified_request",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/e2e/full_system_test.rs::smoke_test_mcp_protocol",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/e2e/full_system_test.rs::smoke_test_unified_request",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/e2e/full_system_test.rs::smoke_test_mcp_protocol",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/e2e/full_system_test.rs::smoke_test_unified_request",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/e2e/full_system_test.rs::smoke_test_mcp_protocol",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/e2e/full_system_test.rs::smoke_test_unified_request",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/e2e/full_system_test.rs::smoke_test_mcp_protocol",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/e2e/full_system_test.rs::smoke_test_unified_request",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/e2e/full_system_test.rs::smoke_test_mcp_protocol",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/e2e/full_system_test.rs::smoke_test_unified_request",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/e2e/full_system_test.rs::smoke_test_mcp_protocol",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/e2e/full_system_test.rs::smoke_test_unified_request",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/e2e/full_system_test.rs::smoke_test_mcp_protocol",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/e2e/full_system_test.rs::smoke_test_unified_request",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/e2e/full_system_test.rs::smoke_test_mcp_protocol",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/e2e/full_system_test.rs::smoke_test_unified_request",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/e2e/full_system_test.rs::smoke_test_mcp_protocol",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/e2e/full_system_test.rs::smoke_test_unified_request",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/e2e/full_system_test.rs::smoke_test_mcp_protocol",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/e2e/full_system_test.rs::smoke_test_unified_request",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/e2e/full_system_test.rs::smoke_test_mcp_protocol",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/e2e/full_system_test.rs::smoke_test_unified_request",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/e2e/full_system_test.rs::smoke_test_mcp_protocol",
        "to": "crates/resources/src/schemas/agent.rs::agent_message_schema",
        "type": "calls"
      },
      {
        "from": "tests/e2e/full_system_test.rs::smoke_test_unified_request",
        "to": "crates/resources/src/schemas/agent.rs::agent_message_schema",
        "type": "calls"
      },
      {
        "from": "tests/e2e/full_system_test.rs::smoke_test_mcp_protocol",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/e2e/full_system_test.rs::smoke_test_unified_request",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/e2e/full_system_test.rs::smoke_test_mcp_protocol",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/e2e/full_system_test.rs::smoke_test_unified_request",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/e2e/full_system_test.rs::smoke_test_mcp_protocol",
        "to": "crates/resources/src/sampling.rs::sample_from_array",
        "type": "calls"
      },
      {
        "from": "tests/e2e/full_system_test.rs::smoke_test_unified_request",
        "to": "crates/resources/src/sampling.rs::sample_from_array",
        "type": "calls"
      },
      {
        "from": "tests/e2e/full_system_test.rs::smoke_test_mcp_protocol",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/e2e/full_system_test.rs::smoke_test_unified_request",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/e2e/full_system_test.rs::smoke_test_mcp_protocol",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/e2e/full_system_test.rs::smoke_test_unified_request",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/e2e/full_system_test.rs::smoke_test_mcp_protocol",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/e2e/full_system_test.rs::smoke_test_unified_request",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/e2e/full_system_test.rs::smoke_test_mcp_protocol",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/e2e/full_system_test.rs::smoke_test_unified_request",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/e2e/full_system_test.rs::smoke_test_mcp_protocol",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "tests/e2e/full_system_test.rs::smoke_test_unified_request",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "web-ui/components/McpClientProvider.tsx::McpClientProvider",
        "to": "tests/mocks/mod.rs::send",
        "type": "calls"
      },
      {
        "from": "web-ui/components/McpClientProvider.tsx::useMcp",
        "to": "tests/mocks/mod.rs::send",
        "type": "calls"
      },
      {
        "from": "web-ui/components/QoQViewer.tsx::QoQViewer",
        "to": "web-ui/components/McpClientProvider.tsx::useMcp",
        "type": "calls"
      },
      {
        "from": "web-ui/components/ConnectForm.tsx::ConnectForm",
        "to": "tests/mocks/mod.rs::connect",
        "type": "calls"
      },
      {
        "from": "web-ui/components/ConnectForm.tsx::ConnectForm",
        "to": "web-ui/components/McpClientProvider.tsx::useMcp",
        "type": "calls"
      },
      {
        "from": "web-ui/components/ToolList.tsx::ToolList",
        "to": "web-ui/components/McpClientProvider.tsx::useMcp",
        "type": "calls"
      },
      {
        "from": "web-ui/components/SessionLog.tsx::SessionLog",
        "to": "web-ui/components/McpClientProvider.tsx::useMcp",
        "type": "calls"
      },
      {
        "from": "web-ui/app/api/github/device/start/route.ts::POST",
        "to": "web-ui/app/api/github/device/poll/route.ts::POST",
        "type": "calls"
      },
      {
        "from": "web-ui/app/api/github/device/poll/route.ts::POST",
        "to": "web-ui/app/api/github/device/start/route.ts::POST",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/tests/hosted_ai_integration.rs::get_test_config",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/tests/hosted_ai_integration.rs::get_test_config",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/tests/hosted_ai_integration.rs::get_test_config",
        "to": "crates/orchestrator/src/metrics.rs::render",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/tests/hosted_ai_integration.rs::get_test_config",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/tests/hosted_ai_integration.rs::get_test_config",
        "to": "crates/orchestrator/src/hosted_ai.rs::get_allocation",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/tests/hosted_ai_integration.rs::get_test_config",
        "to": "tests/mocks/mod.rs::release",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/tests/hosted_ai_integration.rs::get_test_config",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/tests/hosted_ai_integration.rs::get_test_config",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/tests/hosted_ai_integration.rs::get_test_config",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/tests/hosted_ai_integration.rs::get_test_config",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/tests/hosted_ai_integration.rs::get_test_config",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/tests/hosted_ai_integration.rs::get_test_config",
        "to": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/tests/hosted_ai_integration.rs::get_test_config",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/tests/hosted_ai_integration.rs::get_test_config",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/tests/hosted_ai_integration.rs::get_test_config",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/tests/hosted_ai_integration.rs::get_test_config",
        "to": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/tests/hosted_ai_integration.rs::get_test_config",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/tests/hosted_ai_integration.rs::get_test_config",
        "to": "crates/orchestrator/src/hosted_ai.rs::get_metrics",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/tests/hosted_ai_integration.rs::get_test_config",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/tests/hosted_ai_integration.rs::get_test_config",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/tests/hosted_ai_integration.rs::get_test_config",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/tests/hosted_ai_integration.rs::get_test_config",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/tests/hosted_ai_integration.rs::get_test_config",
        "to": "crates/orchestrator/src/hosted_ai.rs::inference",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/tests/hosted_ai_integration.rs::get_test_config",
        "to": "crates/orchestrator/src/hosted_ai.rs::release",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/tests/hosted_ai_integration.rs::get_test_config",
        "to": "tests/mocks/mod.rs::inference",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/tests/hosted_ai_integration.rs::get_test_config",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/tests/hosted_ai_integration.rs::get_test_config",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/tests/hosted_ai_integration.rs::get_test_config",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/tests/hosted_ai_integration.rs::get_test_config",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::new",
        "to": "crates/orchestrator/src/lib.rs::generate_direct",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/orchestrator/src/lib.rs::generate_direct",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/orchestrator/src/lib.rs::generate_direct",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/orchestrator/src/lib.rs::generate_direct",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/orchestrator/src/lib.rs::generate_direct",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::new",
        "to": "crates/orchestrator/src/lib.rs::classify_async",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/orchestrator/src/lib.rs::classify_async",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/orchestrator/src/lib.rs::classify_async",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/orchestrator/src/lib.rs::classify_async",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/orchestrator/src/lib.rs::classify_async",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::new",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::new",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::new",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::new",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::new",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::new",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::new",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::new",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::new",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::new",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::new",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::new",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::new",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::new",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::new",
        "to": "tests/mocks/mod.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "tests/mocks/mod.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "tests/mocks/mod.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "tests/mocks/mod.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "tests/mocks/mod.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::new",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::new",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::new",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::new",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::new",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::new",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::new",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::new",
        "to": "crates/orchestrator/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/orchestrator/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/orchestrator/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/orchestrator/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/orchestrator/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::new",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::new",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::new",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::new",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::classify",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/types.rs::run",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::new",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::new",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_tenant",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_context_from_api_key",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_permission",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::update_usage",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_limits",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::record_event",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_usage_summary",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_current_usage",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_tenant",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_context_from_api_key",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_permission",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::update_usage",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_limits",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::record_event",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_usage_summary",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_current_usage",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::new",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::new",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_tenant",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_context_from_api_key",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_permission",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::update_usage",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_limits",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::record_event",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_usage_summary",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_current_usage",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_tenant",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_context_from_api_key",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_permission",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::update_usage",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_limits",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::record_event",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_usage_summary",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_current_usage",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::new",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::new",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_tenant",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_context_from_api_key",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_permission",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::update_usage",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_limits",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::record_event",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_usage_summary",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_current_usage",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_tenant",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_context_from_api_key",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_permission",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::update_usage",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_limits",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::record_event",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_usage_summary",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_current_usage",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::new",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::new",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_tenant",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_context_from_api_key",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_permission",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::update_usage",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_limits",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::record_event",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_usage_summary",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_current_usage",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_tenant",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_context_from_api_key",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_permission",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::update_usage",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_limits",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::record_event",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_usage_summary",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_current_usage",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::new",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::new",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_tenant",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_context_from_api_key",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_permission",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::update_usage",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_limits",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::record_event",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_usage_summary",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_current_usage",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_tenant",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_context_from_api_key",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_permission",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::update_usage",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_limits",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::record_event",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_usage_summary",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_current_usage",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::new",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::new",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_tenant",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_context_from_api_key",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_permission",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::update_usage",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_limits",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::record_event",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_usage_summary",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_current_usage",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_tenant",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_context_from_api_key",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_permission",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::update_usage",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_limits",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::record_event",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_usage_summary",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_current_usage",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::new",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::new",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_tenant",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_context_from_api_key",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_permission",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::update_usage",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_limits",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::record_event",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_usage_summary",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_current_usage",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_tenant",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_context_from_api_key",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_permission",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::update_usage",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_limits",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::record_event",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_usage_summary",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_current_usage",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::new",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::new",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_tenant",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_context_from_api_key",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_permission",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::update_usage",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_limits",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::record_event",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_usage_summary",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_current_usage",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_tenant",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_context_from_api_key",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_permission",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::update_usage",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_limits",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::record_event",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_usage_summary",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_current_usage",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::new",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::new",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_tenant",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_context_from_api_key",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_permission",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::update_usage",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_limits",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::record_event",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_usage_summary",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_current_usage",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_tenant",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_context_from_api_key",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_permission",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::update_usage",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_limits",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::record_event",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_usage_summary",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_current_usage",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::new",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::new",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_tenant",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_context_from_api_key",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_permission",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::update_usage",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_limits",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::record_event",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_usage_summary",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_current_usage",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_tenant",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_context_from_api_key",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_permission",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::update_usage",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_limits",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::record_event",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_usage_summary",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_current_usage",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::new",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::new",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_tenant",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_context_from_api_key",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_permission",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::update_usage",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_limits",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::record_event",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_usage_summary",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_current_usage",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_tenant",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_context_from_api_key",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_permission",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::update_usage",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_limits",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::record_event",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_usage_summary",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_current_usage",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::new",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::new",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_tenant",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_context_from_api_key",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_permission",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::update_usage",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_limits",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::record_event",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_usage_summary",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_current_usage",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_tenant",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_context_from_api_key",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_permission",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::update_usage",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_limits",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::record_event",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_usage_summary",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_current_usage",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::new",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::new",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_tenant",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_context_from_api_key",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_permission",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::update_usage",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_limits",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::record_event",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_usage_summary",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_current_usage",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_tenant",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_context_from_api_key",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_permission",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::update_usage",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_limits",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::record_event",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_usage_summary",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_current_usage",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::new",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::new",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_tenant",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_context_from_api_key",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_permission",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::update_usage",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_limits",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::record_event",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_usage_summary",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_current_usage",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_tenant",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_context_from_api_key",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_permission",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::update_usage",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_limits",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::record_event",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_usage_summary",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_current_usage",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::new",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::new",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_tenant",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_context_from_api_key",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_permission",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::update_usage",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_limits",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::record_event",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_usage_summary",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_current_usage",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_tenant",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_context_from_api_key",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_permission",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::update_usage",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_limits",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::record_event",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_usage_summary",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_current_usage",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::new",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::new",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_tenant",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_context_from_api_key",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_permission",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::update_usage",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_limits",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::record_event",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_usage_summary",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_current_usage",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_tenant",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_context_from_api_key",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_permission",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::update_usage",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_limits",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::record_event",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_usage_summary",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_current_usage",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::new",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::new",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_tenant",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_context_from_api_key",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_permission",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::update_usage",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_limits",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::record_event",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_usage_summary",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_current_usage",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_tenant",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_context_from_api_key",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_permission",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::update_usage",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_limits",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::record_event",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_usage_summary",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_current_usage",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::new",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::new",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_tenant",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_context_from_api_key",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_permission",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::update_usage",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_limits",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::record_event",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_usage_summary",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_current_usage",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_tenant",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_context_from_api_key",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_permission",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::update_usage",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_limits",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::record_event",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_usage_summary",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_current_usage",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::new",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::new",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_tenant",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_context_from_api_key",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_permission",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::update_usage",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_limits",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::record_event",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_usage_summary",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_current_usage",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_tenant",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_context_from_api_key",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_permission",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::update_usage",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::check_limits",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::record_event",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_usage_summary",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/tenant.rs::get_current_usage",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load",
        "to": "crates/service/src/config.rs::validate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load_from_file",
        "to": "crates/service/src/config.rs::validate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::save_to_file",
        "to": "crates/service/src/config.rs::validate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::new",
        "to": "crates/service/src/config.rs::validate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_server",
        "to": "crates/service/src/config.rs::validate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_hosted_ai",
        "to": "crates/service/src/config.rs::validate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_cache",
        "to": "crates/service/src/config.rs::validate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_monitoring",
        "to": "crates/service/src/config.rs::validate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::build",
        "to": "crates/service/src/config.rs::validate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::default",
        "to": "crates/service/src/config.rs::validate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::find_config_file",
        "to": "crates/service/src/config.rs::validate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::apply_env_overrides",
        "to": "crates/service/src/config.rs::validate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::validate",
        "to": "crates/service/src/config.rs::validate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load_from_file",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::save_to_file",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::new",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_server",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_hosted_ai",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_cache",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_monitoring",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::build",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::default",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::find_config_file",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::apply_env_overrides",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::validate",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load_from_file",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::save_to_file",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::new",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_server",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_hosted_ai",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_cache",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_monitoring",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::build",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::default",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::find_config_file",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::apply_env_overrides",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::validate",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load_from_file",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::save_to_file",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::new",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_server",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_hosted_ai",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_cache",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_monitoring",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::build",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::default",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::find_config_file",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::apply_env_overrides",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::validate",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load_from_file",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::save_to_file",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::new",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_server",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_hosted_ai",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_cache",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_monitoring",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::build",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::default",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::find_config_file",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::apply_env_overrides",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::validate",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load_from_file",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::save_to_file",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::new",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_server",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_hosted_ai",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_cache",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_monitoring",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::build",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::default",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::find_config_file",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::apply_env_overrides",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::validate",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load_from_file",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::save_to_file",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::new",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_server",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_hosted_ai",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_cache",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_monitoring",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::build",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::default",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::find_config_file",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::apply_env_overrides",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::validate",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load",
        "to": "crates/harpoon-core/src/lib.rs::from",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load_from_file",
        "to": "crates/harpoon-core/src/lib.rs::from",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::save_to_file",
        "to": "crates/harpoon-core/src/lib.rs::from",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::new",
        "to": "crates/harpoon-core/src/lib.rs::from",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_server",
        "to": "crates/harpoon-core/src/lib.rs::from",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_hosted_ai",
        "to": "crates/harpoon-core/src/lib.rs::from",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_cache",
        "to": "crates/harpoon-core/src/lib.rs::from",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_monitoring",
        "to": "crates/harpoon-core/src/lib.rs::from",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::build",
        "to": "crates/harpoon-core/src/lib.rs::from",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::default",
        "to": "crates/harpoon-core/src/lib.rs::from",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::find_config_file",
        "to": "crates/harpoon-core/src/lib.rs::from",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::apply_env_overrides",
        "to": "crates/harpoon-core/src/lib.rs::from",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::validate",
        "to": "crates/harpoon-core/src/lib.rs::from",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load_from_file",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::save_to_file",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::new",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_server",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_hosted_ai",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_cache",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_monitoring",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::build",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::default",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::find_config_file",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::apply_env_overrides",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::validate",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load_from_file",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::save_to_file",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::new",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_server",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_hosted_ai",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_cache",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_monitoring",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::build",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::default",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::find_config_file",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::apply_env_overrides",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::validate",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load_from_file",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::save_to_file",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::new",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_server",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_hosted_ai",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_cache",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_monitoring",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::build",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::default",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::find_config_file",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::apply_env_overrides",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::validate",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load_from_file",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::save_to_file",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::new",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_server",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_hosted_ai",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_cache",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_monitoring",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::build",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::default",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::find_config_file",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::apply_env_overrides",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::validate",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load_from_file",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::save_to_file",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::new",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_server",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_hosted_ai",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_cache",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_monitoring",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::build",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::default",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::find_config_file",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::apply_env_overrides",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::validate",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load_from_file",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::save_to_file",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::new",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_server",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_hosted_ai",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_cache",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_monitoring",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::build",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::default",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::find_config_file",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::apply_env_overrides",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::validate",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load_from_file",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::save_to_file",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::new",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_server",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_hosted_ai",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_cache",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_monitoring",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::build",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::default",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::find_config_file",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::apply_env_overrides",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::validate",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load_from_file",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::save_to_file",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::new",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_server",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_hosted_ai",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_cache",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_monitoring",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::build",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::default",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::find_config_file",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::apply_env_overrides",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::validate",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load_from_file",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::save_to_file",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::new",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_server",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_hosted_ai",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_cache",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_monitoring",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::build",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::default",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::find_config_file",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::apply_env_overrides",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::validate",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load_from_file",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::save_to_file",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::new",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_server",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_hosted_ai",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_cache",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_monitoring",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::build",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::default",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::find_config_file",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::apply_env_overrides",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::validate",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load_from_file",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::save_to_file",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::new",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_server",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_hosted_ai",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_cache",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_monitoring",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::build",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::default",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::find_config_file",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::apply_env_overrides",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::validate",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load_from_file",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::save_to_file",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::new",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_server",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_hosted_ai",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_cache",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_monitoring",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::build",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::default",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::find_config_file",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::apply_env_overrides",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::validate",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load_from_file",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::save_to_file",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::new",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_server",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_hosted_ai",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_cache",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_monitoring",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::build",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::default",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::find_config_file",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::apply_env_overrides",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::validate",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load_from_file",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::save_to_file",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::new",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_server",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_hosted_ai",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_cache",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_monitoring",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::build",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::default",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::find_config_file",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::apply_env_overrides",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::validate",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::load_from_file",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::save_to_file",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::new",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_server",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_hosted_ai",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_cache",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::with_monitoring",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::build",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::default",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::find_config_file",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::apply_env_overrides",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/config.rs::validate",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "tests/mocks/mod.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "tests/mocks/mod.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify",
        "to": "tests/mocks/mod.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run",
        "to": "tests/mocks/mod.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "tests/mocks/mod.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "tests/mocks/mod.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::example",
        "to": "tests/mocks/mod.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::convert_gen_options",
        "to": "tests/mocks/mod.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "tests/mocks/mod.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "tests/mocks/mod.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "tests/mocks/mod.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "tests/mocks/mod.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "tests/mocks/mod.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "tests/mocks/mod.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_gemma",
        "to": "tests/mocks/mod.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_qwen",
        "to": "tests/mocks/mod.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::example",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::convert_gen_options",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_gemma",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_qwen",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::example",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::convert_gen_options",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_gemma",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_qwen",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::example",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::convert_gen_options",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_gemma",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_qwen",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::example",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::convert_gen_options",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_gemma",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_qwen",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::example",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::convert_gen_options",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_gemma",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_qwen",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::example",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::convert_gen_options",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_gemma",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_qwen",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::example",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::convert_gen_options",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_gemma",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_qwen",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::example",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::convert_gen_options",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_gemma",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_qwen",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::example",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::convert_gen_options",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_gemma",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_qwen",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::example",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::convert_gen_options",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_gemma",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_qwen",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::example",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::convert_gen_options",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_gemma",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_qwen",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::example",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::convert_gen_options",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_gemma",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_qwen",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::example",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::convert_gen_options",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_gemma",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_qwen",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::example",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::convert_gen_options",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_gemma",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_qwen",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/service/src/mock_engine.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/service/src/mock_engine.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify",
        "to": "crates/service/src/mock_engine.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run",
        "to": "crates/service/src/mock_engine.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/service/src/mock_engine.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/service/src/mock_engine.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::example",
        "to": "crates/service/src/mock_engine.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::convert_gen_options",
        "to": "crates/service/src/mock_engine.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/service/src/mock_engine.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/service/src/mock_engine.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/service/src/mock_engine.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/service/src/mock_engine.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/service/src/mock_engine.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/service/src/mock_engine.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_gemma",
        "to": "crates/service/src/mock_engine.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_qwen",
        "to": "crates/service/src/mock_engine.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::example",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::convert_gen_options",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_gemma",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_qwen",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "tests/mocks/mod.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "tests/mocks/mod.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify",
        "to": "tests/mocks/mod.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run",
        "to": "tests/mocks/mod.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "tests/mocks/mod.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "tests/mocks/mod.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::example",
        "to": "tests/mocks/mod.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::convert_gen_options",
        "to": "tests/mocks/mod.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "tests/mocks/mod.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "tests/mocks/mod.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "tests/mocks/mod.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "tests/mocks/mod.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "tests/mocks/mod.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "tests/mocks/mod.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_gemma",
        "to": "tests/mocks/mod.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_qwen",
        "to": "tests/mocks/mod.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::example",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::convert_gen_options",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_gemma",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_qwen",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::example",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::convert_gen_options",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_gemma",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_qwen",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::example",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::convert_gen_options",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_gemma",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_qwen",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::example",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::convert_gen_options",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_gemma",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_qwen",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/mcp_server/src/cli.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/mcp_server/src/cli.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify",
        "to": "crates/mcp_server/src/cli.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run",
        "to": "crates/mcp_server/src/cli.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/mcp_server/src/cli.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/mcp_server/src/cli.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::example",
        "to": "crates/mcp_server/src/cli.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::convert_gen_options",
        "to": "crates/mcp_server/src/cli.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/mcp_server/src/cli.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/mcp_server/src/cli.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/mcp_server/src/cli.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/mcp_server/src/cli.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/mcp_server/src/cli.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/mcp_server/src/cli.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_gemma",
        "to": "crates/mcp_server/src/cli.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_qwen",
        "to": "crates/mcp_server/src/cli.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::example",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::convert_gen_options",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_gemma",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_qwen",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::example",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::convert_gen_options",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_gemma",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_qwen",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::example",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::convert_gen_options",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_gemma",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_qwen",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/engine_pymlx/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/engine_pymlx/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify",
        "to": "crates/engine_pymlx/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run",
        "to": "crates/engine_pymlx/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/engine_pymlx/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/engine_pymlx/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::example",
        "to": "crates/engine_pymlx/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::convert_gen_options",
        "to": "crates/engine_pymlx/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/engine_pymlx/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/engine_pymlx/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/engine_pymlx/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/engine_pymlx/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/engine_pymlx/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/engine_pymlx/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_gemma",
        "to": "crates/engine_pymlx/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_qwen",
        "to": "crates/engine_pymlx/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::example",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::convert_gen_options",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_gemma",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_qwen",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::example",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::convert_gen_options",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_gemma",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_qwen",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::example",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::convert_gen_options",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_gemma",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_qwen",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::example",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::convert_gen_options",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_gemma",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_qwen",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::example",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::convert_gen_options",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_gemma",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_qwen",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::new",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::example",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::convert_gen_options",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::classify_async",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::generate_direct",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_gemma",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/lib.rs::run_qwen",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_router",
        "to": "crates/orchestrator/src/lib.rs::generate_direct",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/orchestrator/src/lib.rs::generate_direct",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::into_response",
        "to": "crates/orchestrator/src/lib.rs::generate_direct",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::health_handler",
        "to": "crates/orchestrator/src/lib.rs::generate_direct",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::ready_handler",
        "to": "crates/orchestrator/src/lib.rs::generate_direct",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::metrics_handler",
        "to": "crates/orchestrator/src/lib.rs::generate_direct",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::classify_handler",
        "to": "crates/orchestrator/src/lib.rs::generate_direct",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::inference_handler",
        "to": "crates/orchestrator/src/lib.rs::generate_direct",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::list_models_handler",
        "to": "crates/orchestrator/src/lib.rs::generate_direct",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/orchestrator/src/lib.rs::generate_direct",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_metrics_router",
        "to": "crates/orchestrator/src/lib.rs::generate_direct",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_router",
        "to": "crates/orchestrator/src/lib.rs::classify_async",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/orchestrator/src/lib.rs::classify_async",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::into_response",
        "to": "crates/orchestrator/src/lib.rs::classify_async",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::health_handler",
        "to": "crates/orchestrator/src/lib.rs::classify_async",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::ready_handler",
        "to": "crates/orchestrator/src/lib.rs::classify_async",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::metrics_handler",
        "to": "crates/orchestrator/src/lib.rs::classify_async",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::classify_handler",
        "to": "crates/orchestrator/src/lib.rs::classify_async",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::inference_handler",
        "to": "crates/orchestrator/src/lib.rs::classify_async",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::list_models_handler",
        "to": "crates/orchestrator/src/lib.rs::classify_async",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/orchestrator/src/lib.rs::classify_async",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_metrics_router",
        "to": "crates/orchestrator/src/lib.rs::classify_async",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_router",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::into_response",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::health_handler",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::ready_handler",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::metrics_handler",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::classify_handler",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::inference_handler",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::list_models_handler",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_metrics_router",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_router",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::into_response",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::health_handler",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::ready_handler",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::metrics_handler",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::classify_handler",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::inference_handler",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::list_models_handler",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_metrics_router",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_router",
        "to": "crates/orchestrator/src/metrics.rs::render",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/orchestrator/src/metrics.rs::render",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::into_response",
        "to": "crates/orchestrator/src/metrics.rs::render",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::health_handler",
        "to": "crates/orchestrator/src/metrics.rs::render",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::ready_handler",
        "to": "crates/orchestrator/src/metrics.rs::render",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::metrics_handler",
        "to": "crates/orchestrator/src/metrics.rs::render",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::classify_handler",
        "to": "crates/orchestrator/src/metrics.rs::render",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::inference_handler",
        "to": "crates/orchestrator/src/metrics.rs::render",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::list_models_handler",
        "to": "crates/orchestrator/src/metrics.rs::render",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/orchestrator/src/metrics.rs::render",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_metrics_router",
        "to": "crates/orchestrator/src/metrics.rs::render",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_router",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::into_response",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::health_handler",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::ready_handler",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::metrics_handler",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::classify_handler",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::inference_handler",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::list_models_handler",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_metrics_router",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_router",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::into_response",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::health_handler",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::ready_handler",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::metrics_handler",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::classify_handler",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::inference_handler",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::list_models_handler",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_metrics_router",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_router",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::into_response",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::health_handler",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::ready_handler",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::metrics_handler",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::classify_handler",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::inference_handler",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::list_models_handler",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_metrics_router",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_router",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::into_response",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::health_handler",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::ready_handler",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::metrics_handler",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::classify_handler",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::inference_handler",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::list_models_handler",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_metrics_router",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_router",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::into_response",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::health_handler",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::ready_handler",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::metrics_handler",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::classify_handler",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::inference_handler",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::list_models_handler",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_metrics_router",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_router",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::into_response",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::health_handler",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::ready_handler",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::metrics_handler",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::classify_handler",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::inference_handler",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::list_models_handler",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_metrics_router",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_router",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::into_response",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::health_handler",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::ready_handler",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::metrics_handler",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::classify_handler",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::inference_handler",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::list_models_handler",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_metrics_router",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_router",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::into_response",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::health_handler",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::ready_handler",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::metrics_handler",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::classify_handler",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::inference_handler",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::list_models_handler",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_metrics_router",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_router",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::into_response",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::health_handler",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::ready_handler",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::metrics_handler",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::classify_handler",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::inference_handler",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::list_models_handler",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_metrics_router",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_router",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::into_response",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::health_handler",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::ready_handler",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::metrics_handler",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::classify_handler",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::inference_handler",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::list_models_handler",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_metrics_router",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_router",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::into_response",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::health_handler",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::ready_handler",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::metrics_handler",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::classify_handler",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::inference_handler",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::list_models_handler",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_metrics_router",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_router",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::into_response",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::health_handler",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::ready_handler",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::metrics_handler",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::classify_handler",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::inference_handler",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::list_models_handler",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_metrics_router",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_router",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::into_response",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::health_handler",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::ready_handler",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::metrics_handler",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::classify_handler",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::inference_handler",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::list_models_handler",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_metrics_router",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_router",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::into_response",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::health_handler",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::ready_handler",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::metrics_handler",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::classify_handler",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::inference_handler",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::list_models_handler",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_metrics_router",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_router",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::into_response",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::health_handler",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::ready_handler",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::metrics_handler",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::classify_handler",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::inference_handler",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::list_models_handler",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_metrics_router",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_router",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::into_response",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::health_handler",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::ready_handler",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::metrics_handler",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::classify_handler",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::inference_handler",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::list_models_handler",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_metrics_router",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_router",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::into_response",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::health_handler",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::ready_handler",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::metrics_handler",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::classify_handler",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::inference_handler",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::list_models_handler",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_metrics_router",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_router",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::into_response",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::health_handler",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::ready_handler",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::metrics_handler",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::classify_handler",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::inference_handler",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::list_models_handler",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_metrics_router",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_router",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::into_response",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::health_handler",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::ready_handler",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::metrics_handler",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::classify_handler",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::inference_handler",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::list_models_handler",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_metrics_router",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_router",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::into_response",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::health_handler",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::ready_handler",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::metrics_handler",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::classify_handler",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::inference_handler",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::list_models_handler",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_metrics_router",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_router",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::into_response",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::health_handler",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::ready_handler",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::metrics_handler",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::classify_handler",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::inference_handler",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::list_models_handler",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_metrics_router",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_router",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::into_response",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::health_handler",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::ready_handler",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::metrics_handler",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::classify_handler",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::inference_handler",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::list_models_handler",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_metrics_router",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_router",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::into_response",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::health_handler",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::ready_handler",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::metrics_handler",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::classify_handler",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::inference_handler",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::list_models_handler",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_metrics_router",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_router",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::into_response",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::health_handler",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::ready_handler",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::metrics_handler",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::classify_handler",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::inference_handler",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::list_models_handler",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_metrics_router",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_router",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::into_response",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::health_handler",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::ready_handler",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::metrics_handler",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::classify_handler",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::inference_handler",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::list_models_handler",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_metrics_router",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_router",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::into_response",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::health_handler",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::ready_handler",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::metrics_handler",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::classify_handler",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::inference_handler",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::list_models_handler",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::start_server",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/server.rs::create_metrics_router",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::new",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::observe_duration",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::init_metrics",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_allocation_attempt",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_active_allocations",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_inference_request",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_inference_metrics",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_circuit_breaker",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_api_request",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_gpu_utilization",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::track_inference_cost",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::new",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::gather",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::render",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::new",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::observe_duration",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::init_metrics",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_allocation_attempt",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_active_allocations",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_inference_request",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_inference_metrics",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_circuit_breaker",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_api_request",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_gpu_utilization",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::track_inference_cost",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::new",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::gather",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::render",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::new",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::observe_duration",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::init_metrics",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_allocation_attempt",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_active_allocations",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_inference_request",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_inference_metrics",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_circuit_breaker",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_api_request",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_gpu_utilization",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::track_inference_cost",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::new",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::gather",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::render",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::new",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::observe_duration",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::init_metrics",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_allocation_attempt",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_active_allocations",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_inference_request",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_inference_metrics",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_circuit_breaker",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_api_request",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_gpu_utilization",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::track_inference_cost",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::new",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::gather",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::render",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::new",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::observe_duration",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::init_metrics",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_allocation_attempt",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_active_allocations",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_inference_request",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_inference_metrics",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_circuit_breaker",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_api_request",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_gpu_utilization",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::track_inference_cost",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::new",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::gather",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::render",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::new",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::observe_duration",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::init_metrics",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_allocation_attempt",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_active_allocations",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_inference_request",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_inference_metrics",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_circuit_breaker",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_api_request",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_gpu_utilization",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::track_inference_cost",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::new",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::gather",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::render",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::new",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::observe_duration",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::init_metrics",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_allocation_attempt",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_active_allocations",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_inference_request",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_inference_metrics",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_circuit_breaker",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_api_request",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_gpu_utilization",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::track_inference_cost",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::new",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::gather",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::render",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::new",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::observe_duration",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::init_metrics",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_allocation_attempt",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_active_allocations",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_inference_request",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_inference_metrics",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_circuit_breaker",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_api_request",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_gpu_utilization",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::track_inference_cost",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::new",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::gather",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::render",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::new",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::observe_duration",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::init_metrics",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_allocation_attempt",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_active_allocations",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_inference_request",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_inference_metrics",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_circuit_breaker",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_api_request",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_gpu_utilization",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::track_inference_cost",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::new",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::gather",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::render",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::new",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::observe_duration",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::init_metrics",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_allocation_attempt",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_active_allocations",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_inference_request",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_inference_metrics",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_circuit_breaker",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_api_request",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_gpu_utilization",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::track_inference_cost",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::new",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::gather",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::render",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::new",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::observe_duration",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::init_metrics",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_allocation_attempt",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_active_allocations",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_inference_request",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_inference_metrics",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_circuit_breaker",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_api_request",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_gpu_utilization",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::track_inference_cost",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::new",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::gather",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::render",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::new",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::observe_duration",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::init_metrics",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_allocation_attempt",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_active_allocations",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_inference_request",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_inference_metrics",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_circuit_breaker",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_api_request",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_gpu_utilization",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::track_inference_cost",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::new",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::gather",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::render",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::new",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::observe_duration",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::init_metrics",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_allocation_attempt",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_active_allocations",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_inference_request",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_inference_metrics",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_circuit_breaker",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_api_request",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_gpu_utilization",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::track_inference_cost",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::new",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::gather",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::render",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::new",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::observe_duration",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::init_metrics",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_allocation_attempt",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_active_allocations",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_inference_request",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_inference_metrics",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_circuit_breaker",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_api_request",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_gpu_utilization",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::track_inference_cost",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::new",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::gather",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::render",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::new",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::observe_duration",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::init_metrics",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_allocation_attempt",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_active_allocations",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_inference_request",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_inference_metrics",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_circuit_breaker",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_api_request",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_gpu_utilization",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::track_inference_cost",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::new",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::gather",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::render",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::new",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::observe_duration",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::init_metrics",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_allocation_attempt",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_active_allocations",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_inference_request",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_inference_metrics",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_circuit_breaker",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_api_request",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_gpu_utilization",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::track_inference_cost",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::new",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::gather",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::render",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::new",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::observe_duration",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::init_metrics",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_allocation_attempt",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_active_allocations",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_inference_request",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_inference_metrics",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_circuit_breaker",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_api_request",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_gpu_utilization",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::track_inference_cost",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::new",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::gather",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::render",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::new",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::observe_duration",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::init_metrics",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_allocation_attempt",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_active_allocations",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_inference_request",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_inference_metrics",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_circuit_breaker",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_api_request",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_gpu_utilization",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::track_inference_cost",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::new",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::gather",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::render",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::new",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::observe_duration",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::init_metrics",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_allocation_attempt",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_active_allocations",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_inference_request",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_inference_metrics",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_circuit_breaker",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::record_api_request",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::update_gpu_utilization",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::track_inference_cost",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::new",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::gather",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/metrics.rs::render",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::new",
        "to": "crates/orchestrator/src/metrics.rs::track_inference_cost",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/orchestrator/src/metrics.rs::track_inference_cost",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/orchestrator/src/metrics.rs::track_inference_cost",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/orchestrator/src/metrics.rs::track_inference_cost",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_allocation",
        "to": "crates/orchestrator/src/metrics.rs::track_inference_cost",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::list_allocations",
        "to": "crates/orchestrator/src/metrics.rs::track_inference_cost",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_metrics",
        "to": "crates/orchestrator/src/metrics.rs::track_inference_cost",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/orchestrator/src/metrics.rs::track_inference_cost",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_timeout",
        "to": "crates/orchestrator/src/metrics.rs::track_inference_cost",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_max_retries",
        "to": "crates/orchestrator/src/metrics.rs::track_inference_cost",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/orchestrator/src/metrics.rs::track_inference_cost",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/orchestrator/src/metrics.rs::track_inference_cost",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/orchestrator/src/metrics.rs::track_inference_cost",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/orchestrator/src/metrics.rs::track_inference_cost",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::post_with_retry",
        "to": "crates/orchestrator/src/metrics.rs::track_inference_cost",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::delete_with_retry",
        "to": "crates/orchestrator/src/metrics.rs::track_inference_cost",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_post_request",
        "to": "crates/orchestrator/src/metrics.rs::track_inference_cost",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_delete_request",
        "to": "crates/orchestrator/src/metrics.rs::track_inference_cost",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::handle_response",
        "to": "crates/orchestrator/src/metrics.rs::track_inference_cost",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::new",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_allocation",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::list_allocations",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_metrics",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_timeout",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_max_retries",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::post_with_retry",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::delete_with_retry",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_post_request",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_delete_request",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::handle_response",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::new",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_allocation",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::list_allocations",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_metrics",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_timeout",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_max_retries",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::post_with_retry",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::delete_with_retry",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_post_request",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_delete_request",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::handle_response",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::new",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_allocation",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::list_allocations",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_metrics",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_timeout",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_max_retries",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::post_with_retry",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::delete_with_retry",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_post_request",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_delete_request",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::handle_response",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::new",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_allocation",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::list_allocations",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_metrics",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_timeout",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_max_retries",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::post_with_retry",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::delete_with_retry",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_post_request",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_delete_request",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::handle_response",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::new",
        "to": "crates/orchestrator/src/metrics.rs::record_inference_metrics",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/orchestrator/src/metrics.rs::record_inference_metrics",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/orchestrator/src/metrics.rs::record_inference_metrics",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/orchestrator/src/metrics.rs::record_inference_metrics",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_allocation",
        "to": "crates/orchestrator/src/metrics.rs::record_inference_metrics",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::list_allocations",
        "to": "crates/orchestrator/src/metrics.rs::record_inference_metrics",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_metrics",
        "to": "crates/orchestrator/src/metrics.rs::record_inference_metrics",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/orchestrator/src/metrics.rs::record_inference_metrics",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_timeout",
        "to": "crates/orchestrator/src/metrics.rs::record_inference_metrics",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_max_retries",
        "to": "crates/orchestrator/src/metrics.rs::record_inference_metrics",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/orchestrator/src/metrics.rs::record_inference_metrics",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/orchestrator/src/metrics.rs::record_inference_metrics",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/orchestrator/src/metrics.rs::record_inference_metrics",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/orchestrator/src/metrics.rs::record_inference_metrics",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::post_with_retry",
        "to": "crates/orchestrator/src/metrics.rs::record_inference_metrics",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::delete_with_retry",
        "to": "crates/orchestrator/src/metrics.rs::record_inference_metrics",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_post_request",
        "to": "crates/orchestrator/src/metrics.rs::record_inference_metrics",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_delete_request",
        "to": "crates/orchestrator/src/metrics.rs::record_inference_metrics",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::handle_response",
        "to": "crates/orchestrator/src/metrics.rs::record_inference_metrics",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::new",
        "to": "tests/mocks/mod.rs::release",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "tests/mocks/mod.rs::release",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "tests/mocks/mod.rs::release",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "tests/mocks/mod.rs::release",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_allocation",
        "to": "tests/mocks/mod.rs::release",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::list_allocations",
        "to": "tests/mocks/mod.rs::release",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_metrics",
        "to": "tests/mocks/mod.rs::release",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "tests/mocks/mod.rs::release",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_timeout",
        "to": "tests/mocks/mod.rs::release",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_max_retries",
        "to": "tests/mocks/mod.rs::release",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "tests/mocks/mod.rs::release",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "tests/mocks/mod.rs::release",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "tests/mocks/mod.rs::release",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "tests/mocks/mod.rs::release",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::post_with_retry",
        "to": "tests/mocks/mod.rs::release",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::delete_with_retry",
        "to": "tests/mocks/mod.rs::release",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_post_request",
        "to": "tests/mocks/mod.rs::release",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_delete_request",
        "to": "tests/mocks/mod.rs::release",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::handle_response",
        "to": "tests/mocks/mod.rs::release",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::new",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_allocation",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::list_allocations",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_metrics",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_timeout",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_max_retries",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::post_with_retry",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::delete_with_retry",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_post_request",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_delete_request",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::handle_response",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::new",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_allocation",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::list_allocations",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_metrics",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_timeout",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_max_retries",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::post_with_retry",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::delete_with_retry",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_post_request",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_delete_request",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::handle_response",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::new",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_allocation",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::list_allocations",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_metrics",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_timeout",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_max_retries",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::post_with_retry",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::delete_with_retry",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_post_request",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_delete_request",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::handle_response",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::new",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_allocation",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::list_allocations",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_metrics",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_timeout",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_max_retries",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::post_with_retry",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::delete_with_retry",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_post_request",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_delete_request",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::handle_response",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::new",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_allocation",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::list_allocations",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_metrics",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_timeout",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_max_retries",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::post_with_retry",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::delete_with_retry",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_post_request",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_delete_request",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::handle_response",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::new",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_allocation",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::list_allocations",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_metrics",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_timeout",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_max_retries",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::post_with_retry",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::delete_with_retry",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_post_request",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_delete_request",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::handle_response",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::new",
        "to": "crates/orchestrator/src/metrics.rs::observe_duration",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/orchestrator/src/metrics.rs::observe_duration",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/orchestrator/src/metrics.rs::observe_duration",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/orchestrator/src/metrics.rs::observe_duration",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_allocation",
        "to": "crates/orchestrator/src/metrics.rs::observe_duration",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::list_allocations",
        "to": "crates/orchestrator/src/metrics.rs::observe_duration",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_metrics",
        "to": "crates/orchestrator/src/metrics.rs::observe_duration",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/orchestrator/src/metrics.rs::observe_duration",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_timeout",
        "to": "crates/orchestrator/src/metrics.rs::observe_duration",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_max_retries",
        "to": "crates/orchestrator/src/metrics.rs::observe_duration",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/orchestrator/src/metrics.rs::observe_duration",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/orchestrator/src/metrics.rs::observe_duration",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/orchestrator/src/metrics.rs::observe_duration",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/orchestrator/src/metrics.rs::observe_duration",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::post_with_retry",
        "to": "crates/orchestrator/src/metrics.rs::observe_duration",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::delete_with_retry",
        "to": "crates/orchestrator/src/metrics.rs::observe_duration",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_post_request",
        "to": "crates/orchestrator/src/metrics.rs::observe_duration",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_delete_request",
        "to": "crates/orchestrator/src/metrics.rs::observe_duration",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::handle_response",
        "to": "crates/orchestrator/src/metrics.rs::observe_duration",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::new",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_allocation",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::list_allocations",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_metrics",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_timeout",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_max_retries",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::post_with_retry",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::delete_with_retry",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_post_request",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_delete_request",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::handle_response",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::new",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_allocation",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::list_allocations",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_metrics",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_timeout",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_max_retries",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::post_with_retry",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::delete_with_retry",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_post_request",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_delete_request",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::handle_response",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::new",
        "to": "crates/orchestrator/src/metrics.rs::record_api_request",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/orchestrator/src/metrics.rs::record_api_request",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/orchestrator/src/metrics.rs::record_api_request",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/orchestrator/src/metrics.rs::record_api_request",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_allocation",
        "to": "crates/orchestrator/src/metrics.rs::record_api_request",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::list_allocations",
        "to": "crates/orchestrator/src/metrics.rs::record_api_request",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_metrics",
        "to": "crates/orchestrator/src/metrics.rs::record_api_request",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/orchestrator/src/metrics.rs::record_api_request",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_timeout",
        "to": "crates/orchestrator/src/metrics.rs::record_api_request",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_max_retries",
        "to": "crates/orchestrator/src/metrics.rs::record_api_request",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/orchestrator/src/metrics.rs::record_api_request",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/orchestrator/src/metrics.rs::record_api_request",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/orchestrator/src/metrics.rs::record_api_request",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/orchestrator/src/metrics.rs::record_api_request",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::post_with_retry",
        "to": "crates/orchestrator/src/metrics.rs::record_api_request",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::delete_with_retry",
        "to": "crates/orchestrator/src/metrics.rs::record_api_request",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_post_request",
        "to": "crates/orchestrator/src/metrics.rs::record_api_request",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_delete_request",
        "to": "crates/orchestrator/src/metrics.rs::record_api_request",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::handle_response",
        "to": "crates/orchestrator/src/metrics.rs::record_api_request",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::new",
        "to": "crates/orchestrator/src/metrics.rs::update_active_allocations",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/orchestrator/src/metrics.rs::update_active_allocations",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/orchestrator/src/metrics.rs::update_active_allocations",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/orchestrator/src/metrics.rs::update_active_allocations",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_allocation",
        "to": "crates/orchestrator/src/metrics.rs::update_active_allocations",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::list_allocations",
        "to": "crates/orchestrator/src/metrics.rs::update_active_allocations",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_metrics",
        "to": "crates/orchestrator/src/metrics.rs::update_active_allocations",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/orchestrator/src/metrics.rs::update_active_allocations",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_timeout",
        "to": "crates/orchestrator/src/metrics.rs::update_active_allocations",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_max_retries",
        "to": "crates/orchestrator/src/metrics.rs::update_active_allocations",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/orchestrator/src/metrics.rs::update_active_allocations",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/orchestrator/src/metrics.rs::update_active_allocations",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/orchestrator/src/metrics.rs::update_active_allocations",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/orchestrator/src/metrics.rs::update_active_allocations",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::post_with_retry",
        "to": "crates/orchestrator/src/metrics.rs::update_active_allocations",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::delete_with_retry",
        "to": "crates/orchestrator/src/metrics.rs::update_active_allocations",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_post_request",
        "to": "crates/orchestrator/src/metrics.rs::update_active_allocations",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_delete_request",
        "to": "crates/orchestrator/src/metrics.rs::update_active_allocations",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::handle_response",
        "to": "crates/orchestrator/src/metrics.rs::update_active_allocations",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::new",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_allocation",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::list_allocations",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_metrics",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_timeout",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_max_retries",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::post_with_retry",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::delete_with_retry",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_post_request",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_delete_request",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::handle_response",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::new",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_allocation",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::list_allocations",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_metrics",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_timeout",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_max_retries",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::post_with_retry",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::delete_with_retry",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_post_request",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_delete_request",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::handle_response",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::new",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_allocation",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::list_allocations",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_metrics",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_timeout",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_max_retries",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::post_with_retry",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::delete_with_retry",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_post_request",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_delete_request",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::handle_response",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::new",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_allocation",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::list_allocations",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_metrics",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_timeout",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_max_retries",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::post_with_retry",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::delete_with_retry",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_post_request",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_delete_request",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::handle_response",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::new",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_allocation",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::list_allocations",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_metrics",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_timeout",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_max_retries",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::post_with_retry",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::delete_with_retry",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_post_request",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_delete_request",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::handle_response",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::new",
        "to": "tests/mocks/mod.rs::send",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "tests/mocks/mod.rs::send",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "tests/mocks/mod.rs::send",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "tests/mocks/mod.rs::send",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_allocation",
        "to": "tests/mocks/mod.rs::send",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::list_allocations",
        "to": "tests/mocks/mod.rs::send",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_metrics",
        "to": "tests/mocks/mod.rs::send",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "tests/mocks/mod.rs::send",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_timeout",
        "to": "tests/mocks/mod.rs::send",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_max_retries",
        "to": "tests/mocks/mod.rs::send",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "tests/mocks/mod.rs::send",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "tests/mocks/mod.rs::send",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "tests/mocks/mod.rs::send",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "tests/mocks/mod.rs::send",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::post_with_retry",
        "to": "tests/mocks/mod.rs::send",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::delete_with_retry",
        "to": "tests/mocks/mod.rs::send",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_post_request",
        "to": "tests/mocks/mod.rs::send",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_delete_request",
        "to": "tests/mocks/mod.rs::send",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::handle_response",
        "to": "tests/mocks/mod.rs::send",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::new",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_allocation",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::list_allocations",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_metrics",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_timeout",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_max_retries",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::post_with_retry",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::delete_with_retry",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_post_request",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_delete_request",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::handle_response",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::new",
        "to": "tests/mocks/mod.rs::inference",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "tests/mocks/mod.rs::inference",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "tests/mocks/mod.rs::inference",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "tests/mocks/mod.rs::inference",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_allocation",
        "to": "tests/mocks/mod.rs::inference",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::list_allocations",
        "to": "tests/mocks/mod.rs::inference",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_metrics",
        "to": "tests/mocks/mod.rs::inference",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "tests/mocks/mod.rs::inference",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_timeout",
        "to": "tests/mocks/mod.rs::inference",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_max_retries",
        "to": "tests/mocks/mod.rs::inference",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "tests/mocks/mod.rs::inference",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "tests/mocks/mod.rs::inference",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "tests/mocks/mod.rs::inference",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "tests/mocks/mod.rs::inference",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::post_with_retry",
        "to": "tests/mocks/mod.rs::inference",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::delete_with_retry",
        "to": "tests/mocks/mod.rs::inference",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_post_request",
        "to": "tests/mocks/mod.rs::inference",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_delete_request",
        "to": "tests/mocks/mod.rs::inference",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::handle_response",
        "to": "tests/mocks/mod.rs::inference",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::new",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_allocation",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::list_allocations",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_metrics",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_timeout",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_max_retries",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::post_with_retry",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::delete_with_retry",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_post_request",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_delete_request",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::handle_response",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::new",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_allocation",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::list_allocations",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_metrics",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_timeout",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_max_retries",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::post_with_retry",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::delete_with_retry",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_post_request",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_delete_request",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::handle_response",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::new",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_allocation",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::list_allocations",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_metrics",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_timeout",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_max_retries",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::post_with_retry",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::delete_with_retry",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_post_request",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_delete_request",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::handle_response",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::new",
        "to": "crates/orchestrator/src/metrics.rs::record_allocation_attempt",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/orchestrator/src/metrics.rs::record_allocation_attempt",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/orchestrator/src/metrics.rs::record_allocation_attempt",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/orchestrator/src/metrics.rs::record_allocation_attempt",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_allocation",
        "to": "crates/orchestrator/src/metrics.rs::record_allocation_attempt",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::list_allocations",
        "to": "crates/orchestrator/src/metrics.rs::record_allocation_attempt",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_metrics",
        "to": "crates/orchestrator/src/metrics.rs::record_allocation_attempt",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/orchestrator/src/metrics.rs::record_allocation_attempt",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_timeout",
        "to": "crates/orchestrator/src/metrics.rs::record_allocation_attempt",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_max_retries",
        "to": "crates/orchestrator/src/metrics.rs::record_allocation_attempt",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/orchestrator/src/metrics.rs::record_allocation_attempt",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/orchestrator/src/metrics.rs::record_allocation_attempt",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/orchestrator/src/metrics.rs::record_allocation_attempt",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/orchestrator/src/metrics.rs::record_allocation_attempt",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::post_with_retry",
        "to": "crates/orchestrator/src/metrics.rs::record_allocation_attempt",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::delete_with_retry",
        "to": "crates/orchestrator/src/metrics.rs::record_allocation_attempt",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_post_request",
        "to": "crates/orchestrator/src/metrics.rs::record_allocation_attempt",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_delete_request",
        "to": "crates/orchestrator/src/metrics.rs::record_allocation_attempt",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::handle_response",
        "to": "crates/orchestrator/src/metrics.rs::record_allocation_attempt",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::new",
        "to": "crates/orchestrator/src/metrics.rs::record_inference_request",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/orchestrator/src/metrics.rs::record_inference_request",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/orchestrator/src/metrics.rs::record_inference_request",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/orchestrator/src/metrics.rs::record_inference_request",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_allocation",
        "to": "crates/orchestrator/src/metrics.rs::record_inference_request",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::list_allocations",
        "to": "crates/orchestrator/src/metrics.rs::record_inference_request",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_metrics",
        "to": "crates/orchestrator/src/metrics.rs::record_inference_request",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/orchestrator/src/metrics.rs::record_inference_request",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_timeout",
        "to": "crates/orchestrator/src/metrics.rs::record_inference_request",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_max_retries",
        "to": "crates/orchestrator/src/metrics.rs::record_inference_request",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/orchestrator/src/metrics.rs::record_inference_request",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/orchestrator/src/metrics.rs::record_inference_request",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/orchestrator/src/metrics.rs::record_inference_request",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/orchestrator/src/metrics.rs::record_inference_request",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::post_with_retry",
        "to": "crates/orchestrator/src/metrics.rs::record_inference_request",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::delete_with_retry",
        "to": "crates/orchestrator/src/metrics.rs::record_inference_request",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_post_request",
        "to": "crates/orchestrator/src/metrics.rs::record_inference_request",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_delete_request",
        "to": "crates/orchestrator/src/metrics.rs::record_inference_request",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::handle_response",
        "to": "crates/orchestrator/src/metrics.rs::record_inference_request",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::new",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_allocation",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::list_allocations",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_metrics",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_timeout",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_max_retries",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::post_with_retry",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::delete_with_retry",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_post_request",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_delete_request",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::handle_response",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::new",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_allocation",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::list_allocations",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::get_metrics",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_timeout",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::default_max_retries",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::request_vgpu",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::inference",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::release",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::health_check",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::post_with_retry",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::delete_with_retry",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_post_request",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::make_delete_request",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/hosted_ai.rs::handle_response",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "to": "crates/wasm_classifier/src/lib.rs::init",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "to": "crates/orchestrator/src/server.rs::start_server",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "to": "scripts/generate_network_graph_qoq.py::main",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "to": "scripts/compliance/generate-policy-templates.py::main",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "to": "crates/mcp_server/src/cli.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "to": "scripts/analyze_codebase_simple.py::main",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "to": "scripts/generate_high_signal_graph.py::main",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "to": "scripts/analyze_codebase.py::main",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "to": "scripts/comprehensive_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "to": "scripts/compliance/audit-trail-generator.py::main",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "to": "scripts/compliance/compliance-dashboard.py::main",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "to": "crates/service/src/main.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "to": "scripts/generate_unified_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "to": "scripts/generate_network_graph.py::main",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "to": "scripts/compliance/compliance-scanner.py::main",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "to": "crates/orchestrator/src/config.rs::load",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "to": "crates/harpoon_bridge/src/fusion.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "to": "scripts/generate_network_graph_enhanced.py::main",
        "type": "calls"
      },
      {
        "from": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "to": "crates/pyffi/src/lib.rs::init",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::new",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::reality_state",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::target_state",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::add_metadata",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::build",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::new",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::reality_state",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::target_state",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::add_metadata",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::build",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::new",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::reality_state",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::target_state",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::add_metadata",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::build",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::new",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::reality_state",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::target_state",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::add_metadata",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::build",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::new",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::reality_state",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::target_state",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::add_metadata",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::build",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::new",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::reality_state",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::target_state",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::add_metadata",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::build",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::new",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::reality_state",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::target_state",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::add_metadata",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::build",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::new",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::reality_state",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::target_state",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::add_metadata",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::build",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::new",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::reality_state",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::target_state",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::add_metadata",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::build",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::new",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::reality_state",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::target_state",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::add_metadata",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::build",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::new",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::reality_state",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::target_state",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::add_metadata",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::build",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::new",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::reality_state",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::target_state",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::add_metadata",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::build",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::new",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::reality_state",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::target_state",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::add_metadata",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::build",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::new",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::reality_state",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::target_state",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::add_metadata",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::build",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::new",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::reality_state",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::target_state",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::add_metadata",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::build",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::new",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::reality_state",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::target_state",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::add_metadata",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::build",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::new",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::reality_state",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::target_state",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::add_metadata",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::build",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::new",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::reality_state",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::target_state",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::add_metadata",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::build",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::new",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::reality_state",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::target_state",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::add_metadata",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::build",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::new",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::reality_state",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::target_state",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::add_metadata",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/covenant.rs::build",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::select_strike_targets",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::create_pr_for_target",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::select_strike_targets",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::create_pr_for_target",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::select_strike_targets",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::create_pr_for_target",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::select_strike_targets",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::create_pr_for_target",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::select_strike_targets",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::create_pr_for_target",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::select_strike_targets",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::create_pr_for_target",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::select_strike_targets",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::create_pr_for_target",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::select_strike_targets",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::create_pr_for_target",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::select_strike_targets",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::create_pr_for_target",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::select_strike_targets",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::create_pr_for_target",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::select_strike_targets",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::create_pr_for_target",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::select_strike_targets",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::create_pr_for_target",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::select_strike_targets",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::create_pr_for_target",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::select_strike_targets",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::create_pr_for_target",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::select_strike_targets",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::create_pr_for_target",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "to": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "to": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "to": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::select_strike_targets",
        "to": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::create_pr_for_target",
        "to": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "to": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "to": "crates/service/src/main.rs::execute_strike",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "to": "crates/service/src/main.rs::execute_strike",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "to": "crates/service/src/main.rs::execute_strike",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::select_strike_targets",
        "to": "crates/service/src/main.rs::execute_strike",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::create_pr_for_target",
        "to": "crates/service/src/main.rs::execute_strike",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "to": "crates/service/src/main.rs::execute_strike",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::select_strike_targets",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::create_pr_for_target",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::select_strike_targets",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::create_pr_for_target",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::select_strike_targets",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::create_pr_for_target",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::select_strike_targets",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::create_pr_for_target",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::select_strike_targets",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::create_pr_for_target",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/strike.rs::monitor_strike",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::new",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process_with_hosted_ai",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::run_with_hosted_ai",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::new",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process_with_hosted_ai",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::run_with_hosted_ai",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::new",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process_with_hosted_ai",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::run_with_hosted_ai",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::new",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process_with_hosted_ai",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::run_with_hosted_ai",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::new",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process_with_hosted_ai",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::run_with_hosted_ai",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::new",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process_with_hosted_ai",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::run_with_hosted_ai",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::new",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process_with_hosted_ai",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::run_with_hosted_ai",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::new",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process_with_hosted_ai",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::run_with_hosted_ai",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::new",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process_with_hosted_ai",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::run_with_hosted_ai",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::new",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process_with_hosted_ai",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::run_with_hosted_ai",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::new",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process_with_hosted_ai",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::run_with_hosted_ai",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::new",
        "to": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process_with_hosted_ai",
        "to": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::run_with_hosted_ai",
        "to": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::new",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process_with_hosted_ai",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::run_with_hosted_ai",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::new",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process_with_hosted_ai",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::run_with_hosted_ai",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::new",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process_with_hosted_ai",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::run_with_hosted_ai",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::new",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process_with_hosted_ai",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::run_with_hosted_ai",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::new",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process_with_hosted_ai",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::run_with_hosted_ai",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::new",
        "to": "tests/mocks/mod.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "tests/mocks/mod.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "tests/mocks/mod.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "tests/mocks/mod.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "tests/mocks/mod.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "tests/mocks/mod.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process_with_hosted_ai",
        "to": "tests/mocks/mod.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::run_with_hosted_ai",
        "to": "tests/mocks/mod.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "tests/mocks/mod.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::new",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process_with_hosted_ai",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::run_with_hosted_ai",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::new",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process_with_hosted_ai",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::run_with_hosted_ai",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::new",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process_with_hosted_ai",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::run_with_hosted_ai",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::new",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process_with_hosted_ai",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::run_with_hosted_ai",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::new",
        "to": "crates/service/src/main.rs::create_covenant",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/service/src/main.rs::create_covenant",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/service/src/main.rs::create_covenant",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/service/src/main.rs::create_covenant",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/service/src/main.rs::create_covenant",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/service/src/main.rs::create_covenant",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process_with_hosted_ai",
        "to": "crates/service/src/main.rs::create_covenant",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::run_with_hosted_ai",
        "to": "crates/service/src/main.rs::create_covenant",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/service/src/main.rs::create_covenant",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::new",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process_with_hosted_ai",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::run_with_hosted_ai",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/pyffi/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::new",
        "to": "crates/service/src/main.rs::execute_strike",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/service/src/main.rs::execute_strike",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/service/src/main.rs::execute_strike",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/service/src/main.rs::execute_strike",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/service/src/main.rs::execute_strike",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/service/src/main.rs::execute_strike",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process_with_hosted_ai",
        "to": "crates/service/src/main.rs::execute_strike",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::run_with_hosted_ai",
        "to": "crates/service/src/main.rs::execute_strike",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/service/src/main.rs::execute_strike",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::new",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process_with_hosted_ai",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::run_with_hosted_ai",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::new",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process_with_hosted_ai",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::run_with_hosted_ai",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::new",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process_with_hosted_ai",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::run_with_hosted_ai",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::new",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process_with_hosted_ai",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::run_with_hosted_ai",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::new",
        "to": "crates/orchestrator/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/orchestrator/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/orchestrator/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/orchestrator/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/orchestrator/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/orchestrator/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process_with_hosted_ai",
        "to": "crates/orchestrator/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::run_with_hosted_ai",
        "to": "crates/orchestrator/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/orchestrator/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::new",
        "to": "crates/orchestrator/src/hosted_ai.rs::inference",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/orchestrator/src/hosted_ai.rs::inference",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/orchestrator/src/hosted_ai.rs::inference",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/orchestrator/src/hosted_ai.rs::inference",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/orchestrator/src/hosted_ai.rs::inference",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/orchestrator/src/hosted_ai.rs::inference",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process_with_hosted_ai",
        "to": "crates/orchestrator/src/hosted_ai.rs::inference",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::run_with_hosted_ai",
        "to": "crates/orchestrator/src/hosted_ai.rs::inference",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/orchestrator/src/hosted_ai.rs::inference",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::new",
        "to": "tests/mocks/mod.rs::inference",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "tests/mocks/mod.rs::inference",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "tests/mocks/mod.rs::inference",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "tests/mocks/mod.rs::inference",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "tests/mocks/mod.rs::inference",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "tests/mocks/mod.rs::inference",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process_with_hosted_ai",
        "to": "tests/mocks/mod.rs::inference",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::run_with_hosted_ai",
        "to": "tests/mocks/mod.rs::inference",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "tests/mocks/mod.rs::inference",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::new",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process_with_hosted_ai",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::run_with_hosted_ai",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::new",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process_with_hosted_ai",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::run_with_hosted_ai",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::new",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process_with_hosted_ai",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::run_with_hosted_ai",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::new",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process_with_hosted_ai",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::run_with_hosted_ai",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::new",
        "to": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "to": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process",
        "to": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::process_with_hosted_ai",
        "to": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::run_with_hosted_ai",
        "to": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "to": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::new",
        "to": "crates/harpoon-core/src/lib.rs::get_pending",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/harpoon-core/src/lib.rs::get_pending",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/harpoon-core/src/lib.rs::get_pending",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::stats",
        "to": "crates/harpoon-core/src/lib.rs::get_pending",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/harpoon-core/src/lib.rs::get_pending",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/harpoon-core/src/lib.rs::get_pending",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::main",
        "to": "crates/harpoon-core/src/lib.rs::get_pending",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::new",
        "to": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::stats",
        "to": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::main",
        "to": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::new",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::stats",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::main",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::new",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::stats",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::main",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::new",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::stats",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::main",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::new",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::stats",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::main",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::new",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::stats",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::main",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::new",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::stats",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::main",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::new",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::stats",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::main",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::new",
        "to": "crates/harpoon-core/src/lib.rs::get_iterations",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/harpoon-core/src/lib.rs::get_iterations",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/harpoon-core/src/lib.rs::get_iterations",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::stats",
        "to": "crates/harpoon-core/src/lib.rs::get_iterations",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/harpoon-core/src/lib.rs::get_iterations",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/harpoon-core/src/lib.rs::get_iterations",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::main",
        "to": "crates/harpoon-core/src/lib.rs::get_iterations",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::new",
        "to": "scripts/generate_network_graph_qoq.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "scripts/generate_network_graph_qoq.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "scripts/generate_network_graph_qoq.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::stats",
        "to": "scripts/generate_network_graph_qoq.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "scripts/generate_network_graph_qoq.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "scripts/generate_network_graph_qoq.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::main",
        "to": "scripts/generate_network_graph_qoq.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::new",
        "to": "crates/harpoon-core/src/lib.rs::new_native",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/harpoon-core/src/lib.rs::new_native",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/harpoon-core/src/lib.rs::new_native",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::stats",
        "to": "crates/harpoon-core/src/lib.rs::new_native",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/harpoon-core/src/lib.rs::new_native",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/harpoon-core/src/lib.rs::new_native",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::main",
        "to": "crates/harpoon-core/src/lib.rs::new_native",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::new",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::stats",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::main",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::new",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::stats",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::main",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::new",
        "to": "scripts/compliance/generate-policy-templates.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "scripts/compliance/generate-policy-templates.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "scripts/compliance/generate-policy-templates.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::stats",
        "to": "scripts/compliance/generate-policy-templates.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "scripts/compliance/generate-policy-templates.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "scripts/compliance/generate-policy-templates.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::main",
        "to": "scripts/compliance/generate-policy-templates.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::new",
        "to": "crates/mcp_server/src/cli.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/mcp_server/src/cli.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/mcp_server/src/cli.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::stats",
        "to": "crates/mcp_server/src/cli.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/mcp_server/src/cli.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/mcp_server/src/cli.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::main",
        "to": "crates/mcp_server/src/cli.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::new",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::stats",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::main",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::new",
        "to": "scripts/analyze_codebase_simple.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "scripts/analyze_codebase_simple.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "scripts/analyze_codebase_simple.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::stats",
        "to": "scripts/analyze_codebase_simple.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "scripts/analyze_codebase_simple.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "scripts/analyze_codebase_simple.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::main",
        "to": "scripts/analyze_codebase_simple.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::new",
        "to": "scripts/generate_high_signal_graph.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "scripts/generate_high_signal_graph.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "scripts/generate_high_signal_graph.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::stats",
        "to": "scripts/generate_high_signal_graph.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "scripts/generate_high_signal_graph.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "scripts/generate_high_signal_graph.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::main",
        "to": "scripts/generate_high_signal_graph.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::new",
        "to": "scripts/analyze_codebase.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "scripts/analyze_codebase.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "scripts/analyze_codebase.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::stats",
        "to": "scripts/analyze_codebase.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "scripts/analyze_codebase.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "scripts/analyze_codebase.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::main",
        "to": "scripts/analyze_codebase.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::new",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::stats",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::main",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::new",
        "to": "scripts/comprehensive_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "scripts/comprehensive_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "scripts/comprehensive_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::stats",
        "to": "scripts/comprehensive_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "scripts/comprehensive_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "scripts/comprehensive_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::main",
        "to": "scripts/comprehensive_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::new",
        "to": "crates/harpoon-core/src/lib.rs::run_native_cycle",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/harpoon-core/src/lib.rs::run_native_cycle",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/harpoon-core/src/lib.rs::run_native_cycle",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::stats",
        "to": "crates/harpoon-core/src/lib.rs::run_native_cycle",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/harpoon-core/src/lib.rs::run_native_cycle",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/harpoon-core/src/lib.rs::run_native_cycle",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::main",
        "to": "crates/harpoon-core/src/lib.rs::run_native_cycle",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::new",
        "to": "scripts/compliance/audit-trail-generator.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "scripts/compliance/audit-trail-generator.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "scripts/compliance/audit-trail-generator.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::stats",
        "to": "scripts/compliance/audit-trail-generator.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "scripts/compliance/audit-trail-generator.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "scripts/compliance/audit-trail-generator.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::main",
        "to": "scripts/compliance/audit-trail-generator.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::new",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::stats",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::main",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::new",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::stats",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::main",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::new",
        "to": "scripts/compliance/compliance-dashboard.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "scripts/compliance/compliance-dashboard.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "scripts/compliance/compliance-dashboard.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::stats",
        "to": "scripts/compliance/compliance-dashboard.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "scripts/compliance/compliance-dashboard.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "scripts/compliance/compliance-dashboard.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::main",
        "to": "scripts/compliance/compliance-dashboard.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::new",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::stats",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::main",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::new",
        "to": "crates/harpoon-core/src/lib.rs::get_absorbed",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/harpoon-core/src/lib.rs::get_absorbed",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/harpoon-core/src/lib.rs::get_absorbed",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::stats",
        "to": "crates/harpoon-core/src/lib.rs::get_absorbed",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/harpoon-core/src/lib.rs::get_absorbed",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/harpoon-core/src/lib.rs::get_absorbed",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::main",
        "to": "crates/harpoon-core/src/lib.rs::get_absorbed",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::new",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::stats",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::main",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::new",
        "to": "crates/service/src/main.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/service/src/main.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/service/src/main.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::stats",
        "to": "crates/service/src/main.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/service/src/main.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/service/src/main.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::main",
        "to": "crates/service/src/main.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::new",
        "to": "crates/harpoon-core/src/lib.rs::get_anchors",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/harpoon-core/src/lib.rs::get_anchors",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/harpoon-core/src/lib.rs::get_anchors",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::stats",
        "to": "crates/harpoon-core/src/lib.rs::get_anchors",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/harpoon-core/src/lib.rs::get_anchors",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/harpoon-core/src/lib.rs::get_anchors",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::main",
        "to": "crates/harpoon-core/src/lib.rs::get_anchors",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::new",
        "to": "scripts/generate_unified_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "scripts/generate_unified_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "scripts/generate_unified_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::stats",
        "to": "scripts/generate_unified_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "scripts/generate_unified_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "scripts/generate_unified_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::main",
        "to": "scripts/generate_unified_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::new",
        "to": "scripts/generate_network_graph.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "scripts/generate_network_graph.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "scripts/generate_network_graph.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::stats",
        "to": "scripts/generate_network_graph.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "scripts/generate_network_graph.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "scripts/generate_network_graph.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::main",
        "to": "scripts/generate_network_graph.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::new",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::stats",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::main",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::new",
        "to": "crates/harpoon-core/src/lib.rs::thread_count",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/harpoon-core/src/lib.rs::thread_count",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/harpoon-core/src/lib.rs::thread_count",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::stats",
        "to": "crates/harpoon-core/src/lib.rs::thread_count",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/harpoon-core/src/lib.rs::thread_count",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/harpoon-core/src/lib.rs::thread_count",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::main",
        "to": "crates/harpoon-core/src/lib.rs::thread_count",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::new",
        "to": "scripts/compliance/compliance-scanner.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "scripts/compliance/compliance-scanner.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "scripts/compliance/compliance-scanner.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::stats",
        "to": "scripts/compliance/compliance-scanner.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "scripts/compliance/compliance-scanner.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "scripts/compliance/compliance-scanner.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::main",
        "to": "scripts/compliance/compliance-scanner.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::new",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::stats",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::main",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::new",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::stats",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::main",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::new",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::stats",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::main",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::new",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::stats",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::main",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::new",
        "to": "scripts/generate_network_graph_enhanced.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "scripts/generate_network_graph_enhanced.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "scripts/generate_network_graph_enhanced.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::stats",
        "to": "scripts/generate_network_graph_enhanced.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "scripts/generate_network_graph_enhanced.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "scripts/generate_network_graph_enhanced.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::main",
        "to": "scripts/generate_network_graph_enhanced.py::main",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::new",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::stats",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragment",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::process_fragments",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon_bridge/src/fusion.rs::main",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_tool_call",
        "to": "crates/resources/src/sampling.rs::sample_from_array",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_resource_read",
        "to": "crates/resources/src/sampling.rs::sample_from_array",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_sampling",
        "to": "crates/resources/src/sampling.rs::sample_from_array",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_classify",
        "to": "crates/resources/src/sampling.rs::sample_from_array",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_inference",
        "to": "crates/resources/src/sampling.rs::sample_from_array",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_create_pr",
        "to": "crates/resources/src/sampling.rs::sample_from_array",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_analyze_repo",
        "to": "crates/resources/src/sampling.rs::sample_from_array",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_covenant_resource",
        "to": "crates/resources/src/sampling.rs::sample_from_array",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_strike_resource",
        "to": "crates/resources/src/sampling.rs::sample_from_array",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_agents_resource",
        "to": "crates/resources/src/sampling.rs::sample_from_array",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_qoq_index",
        "to": "crates/resources/src/sampling.rs::sample_from_array",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_qoq_status",
        "to": "crates/resources/src/sampling.rs::sample_from_array",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_qoq_locate",
        "to": "crates/resources/src/sampling.rs::sample_from_array",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_covenant_evaluate",
        "to": "crates/resources/src/sampling.rs::sample_from_array",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_tool_call",
        "to": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_resource_read",
        "to": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_sampling",
        "to": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_classify",
        "to": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_inference",
        "to": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_create_pr",
        "to": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_analyze_repo",
        "to": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_covenant_resource",
        "to": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_strike_resource",
        "to": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_agents_resource",
        "to": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_qoq_index",
        "to": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_qoq_status",
        "to": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_qoq_locate",
        "to": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_covenant_evaluate",
        "to": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_tool_call",
        "to": "crates/harpoon_bridge/src/lib.rs::process",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_resource_read",
        "to": "crates/harpoon_bridge/src/lib.rs::process",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_sampling",
        "to": "crates/harpoon_bridge/src/lib.rs::process",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_classify",
        "to": "crates/harpoon_bridge/src/lib.rs::process",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_inference",
        "to": "crates/harpoon_bridge/src/lib.rs::process",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_create_pr",
        "to": "crates/harpoon_bridge/src/lib.rs::process",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_analyze_repo",
        "to": "crates/harpoon_bridge/src/lib.rs::process",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_covenant_resource",
        "to": "crates/harpoon_bridge/src/lib.rs::process",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_strike_resource",
        "to": "crates/harpoon_bridge/src/lib.rs::process",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_agents_resource",
        "to": "crates/harpoon_bridge/src/lib.rs::process",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_qoq_index",
        "to": "crates/harpoon_bridge/src/lib.rs::process",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_qoq_status",
        "to": "crates/harpoon_bridge/src/lib.rs::process",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_qoq_locate",
        "to": "crates/harpoon_bridge/src/lib.rs::process",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_covenant_evaluate",
        "to": "crates/harpoon_bridge/src/lib.rs::process",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_tool_call",
        "to": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_resource_read",
        "to": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_sampling",
        "to": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_classify",
        "to": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_inference",
        "to": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_create_pr",
        "to": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_analyze_repo",
        "to": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_covenant_resource",
        "to": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_strike_resource",
        "to": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_agents_resource",
        "to": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_qoq_index",
        "to": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_qoq_status",
        "to": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_qoq_locate",
        "to": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/handlers.rs::handle_covenant_evaluate",
        "to": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::new",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::add_connection",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::remove_connection",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::new",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::add_connection",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::remove_connection",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::new",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::add_connection",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::remove_connection",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::new",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::add_connection",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::remove_connection",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::new",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::add_connection",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::remove_connection",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::new",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::add_connection",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::remove_connection",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::new",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::add_connection",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::remove_connection",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::new",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::add_connection",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::remove_connection",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::new",
        "to": "crates/mcp_server/src/handlers.rs::handle_tool_call",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/mcp_server/src/handlers.rs::handle_tool_call",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::add_connection",
        "to": "crates/mcp_server/src/handlers.rs::handle_tool_call",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::remove_connection",
        "to": "crates/mcp_server/src/handlers.rs::handle_tool_call",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/mcp_server/src/handlers.rs::handle_tool_call",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/mcp_server/src/handlers.rs::handle_tool_call",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/mcp_server/src/handlers.rs::handle_tool_call",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/mcp_server/src/handlers.rs::handle_tool_call",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/mcp_server/src/handlers.rs::handle_tool_call",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/mcp_server/src/handlers.rs::handle_tool_call",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/mcp_server/src/handlers.rs::handle_tool_call",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/mcp_server/src/handlers.rs::handle_tool_call",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/mcp_server/src/handlers.rs::handle_tool_call",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/mcp_server/src/handlers.rs::handle_tool_call",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/mcp_server/src/handlers.rs::handle_tool_call",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/mcp_server/src/handlers.rs::handle_tool_call",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/mcp_server/src/handlers.rs::handle_tool_call",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/mcp_server/src/handlers.rs::handle_tool_call",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/mcp_server/src/handlers.rs::handle_tool_call",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/mcp_server/src/handlers.rs::handle_tool_call",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/mcp_server/src/handlers.rs::handle_tool_call",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::new",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::add_connection",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::remove_connection",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::new",
        "to": "crates/resources/src/lib.rs::render_prompt",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/resources/src/lib.rs::render_prompt",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::add_connection",
        "to": "crates/resources/src/lib.rs::render_prompt",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::remove_connection",
        "to": "crates/resources/src/lib.rs::render_prompt",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/resources/src/lib.rs::render_prompt",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/resources/src/lib.rs::render_prompt",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/resources/src/lib.rs::render_prompt",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/resources/src/lib.rs::render_prompt",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/resources/src/lib.rs::render_prompt",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/resources/src/lib.rs::render_prompt",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/resources/src/lib.rs::render_prompt",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/resources/src/lib.rs::render_prompt",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/resources/src/lib.rs::render_prompt",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/resources/src/lib.rs::render_prompt",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/resources/src/lib.rs::render_prompt",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/resources/src/lib.rs::render_prompt",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/resources/src/lib.rs::render_prompt",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/resources/src/lib.rs::render_prompt",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/resources/src/lib.rs::render_prompt",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/resources/src/lib.rs::render_prompt",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/resources/src/lib.rs::render_prompt",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::new",
        "to": "crates/mcp_server/src/handlers.rs::handle_resource_read",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/mcp_server/src/handlers.rs::handle_resource_read",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::add_connection",
        "to": "crates/mcp_server/src/handlers.rs::handle_resource_read",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::remove_connection",
        "to": "crates/mcp_server/src/handlers.rs::handle_resource_read",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/mcp_server/src/handlers.rs::handle_resource_read",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/mcp_server/src/handlers.rs::handle_resource_read",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/mcp_server/src/handlers.rs::handle_resource_read",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/mcp_server/src/handlers.rs::handle_resource_read",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/mcp_server/src/handlers.rs::handle_resource_read",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/mcp_server/src/handlers.rs::handle_resource_read",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/mcp_server/src/handlers.rs::handle_resource_read",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/mcp_server/src/handlers.rs::handle_resource_read",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/mcp_server/src/handlers.rs::handle_resource_read",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/mcp_server/src/handlers.rs::handle_resource_read",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/mcp_server/src/handlers.rs::handle_resource_read",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/mcp_server/src/handlers.rs::handle_resource_read",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/mcp_server/src/handlers.rs::handle_resource_read",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/mcp_server/src/handlers.rs::handle_resource_read",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/mcp_server/src/handlers.rs::handle_resource_read",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/mcp_server/src/handlers.rs::handle_resource_read",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/mcp_server/src/handlers.rs::handle_resource_read",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::new",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::add_connection",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::remove_connection",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::new",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::add_connection",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::remove_connection",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::new",
        "to": "crates/resources/src/lib.rs::get_prompt",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/resources/src/lib.rs::get_prompt",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::add_connection",
        "to": "crates/resources/src/lib.rs::get_prompt",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::remove_connection",
        "to": "crates/resources/src/lib.rs::get_prompt",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/resources/src/lib.rs::get_prompt",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/resources/src/lib.rs::get_prompt",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/resources/src/lib.rs::get_prompt",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/resources/src/lib.rs::get_prompt",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/resources/src/lib.rs::get_prompt",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/resources/src/lib.rs::get_prompt",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/resources/src/lib.rs::get_prompt",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/resources/src/lib.rs::get_prompt",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/resources/src/lib.rs::get_prompt",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/resources/src/lib.rs::get_prompt",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/resources/src/lib.rs::get_prompt",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/resources/src/lib.rs::get_prompt",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/resources/src/lib.rs::get_prompt",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/resources/src/lib.rs::get_prompt",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/resources/src/lib.rs::get_prompt",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/resources/src/lib.rs::get_prompt",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/resources/src/lib.rs::get_prompt",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::new",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::add_connection",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::remove_connection",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::new",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::add_connection",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::remove_connection",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::new",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::add_connection",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::remove_connection",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::new",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::add_connection",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::remove_connection",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::new",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::add_connection",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::remove_connection",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::new",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::add_connection",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::remove_connection",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::new",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::add_connection",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::remove_connection",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::new",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::add_connection",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::remove_connection",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::new",
        "to": "crates/mcp_server/src/handlers.rs::handle_sampling",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/mcp_server/src/handlers.rs::handle_sampling",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::add_connection",
        "to": "crates/mcp_server/src/handlers.rs::handle_sampling",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::remove_connection",
        "to": "crates/mcp_server/src/handlers.rs::handle_sampling",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/mcp_server/src/handlers.rs::handle_sampling",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/mcp_server/src/handlers.rs::handle_sampling",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/mcp_server/src/handlers.rs::handle_sampling",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/mcp_server/src/handlers.rs::handle_sampling",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/mcp_server/src/handlers.rs::handle_sampling",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/mcp_server/src/handlers.rs::handle_sampling",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/mcp_server/src/handlers.rs::handle_sampling",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/mcp_server/src/handlers.rs::handle_sampling",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::handle_request",
        "to": "crates/mcp_server/src/handlers.rs::handle_sampling",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::initialize",
        "to": "crates/mcp_server/src/handlers.rs::handle_sampling",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_tools",
        "to": "crates/mcp_server/src/handlers.rs::handle_sampling",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::call_tool",
        "to": "crates/mcp_server/src/handlers.rs::handle_sampling",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_resources",
        "to": "crates/mcp_server/src/handlers.rs::handle_sampling",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::read_resource",
        "to": "crates/mcp_server/src/handlers.rs::handle_sampling",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::list_prompts",
        "to": "crates/mcp_server/src/handlers.rs::handle_sampling",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::get_prompt",
        "to": "crates/mcp_server/src/handlers.rs::handle_sampling",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/lib.rs::sample",
        "to": "crates/mcp_server/src/handlers.rs::handle_sampling",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "tests/mocks/mod.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "tests/mocks/mod.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "tests/mocks/mod.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "tests/mocks/mod.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "crates/wasm_classifier/src/lib.rs::init",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "crates/wasm_classifier/src/lib.rs::init",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "crates/wasm_classifier/src/lib.rs::init",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "crates/wasm_classifier/src/lib.rs::init",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "scripts/generate_network_graph_qoq.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "scripts/generate_network_graph_qoq.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "scripts/generate_network_graph_qoq.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "scripts/generate_network_graph_qoq.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "crates/orchestrator/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "crates/orchestrator/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "crates/orchestrator/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "crates/orchestrator/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "scripts/compliance/generate-policy-templates.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "scripts/compliance/generate-policy-templates.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "scripts/compliance/generate-policy-templates.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "scripts/compliance/generate-policy-templates.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "crates/service/src/mock_engine.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "crates/service/src/mock_engine.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "crates/service/src/mock_engine.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "crates/service/src/mock_engine.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "scripts/analyze_codebase_simple.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "scripts/analyze_codebase_simple.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "scripts/analyze_codebase_simple.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "scripts/analyze_codebase_simple.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "scripts/generate_high_signal_graph.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "scripts/generate_high_signal_graph.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "scripts/generate_high_signal_graph.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "scripts/generate_high_signal_graph.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "scripts/analyze_codebase.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "scripts/analyze_codebase.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "scripts/analyze_codebase.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "scripts/analyze_codebase.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "scripts/comprehensive_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "scripts/comprehensive_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "scripts/comprehensive_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "scripts/comprehensive_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "scripts/compliance/audit-trail-generator.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "scripts/compliance/audit-trail-generator.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "scripts/compliance/audit-trail-generator.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "scripts/compliance/audit-trail-generator.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "scripts/compliance/compliance-dashboard.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "scripts/compliance/compliance-dashboard.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "scripts/compliance/compliance-dashboard.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "scripts/compliance/compliance-dashboard.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "crates/service/src/main.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "crates/service/src/main.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "crates/service/src/main.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "crates/service/src/main.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "crates/engine_pymlx/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "crates/engine_pymlx/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "crates/engine_pymlx/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "crates/engine_pymlx/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "scripts/generate_unified_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "scripts/generate_unified_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "scripts/generate_unified_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "scripts/generate_unified_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "scripts/generate_network_graph.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "scripts/generate_network_graph.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "scripts/generate_network_graph.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "scripts/generate_network_graph.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "scripts/compliance/compliance-scanner.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "scripts/compliance/compliance-scanner.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "scripts/compliance/compliance-scanner.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "scripts/compliance/compliance-scanner.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "crates/harpoon_bridge/src/fusion.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "crates/harpoon_bridge/src/fusion.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "crates/harpoon_bridge/src/fusion.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "crates/harpoon_bridge/src/fusion.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "scripts/generate_network_graph_enhanced.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "scripts/generate_network_graph_enhanced.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "scripts/generate_network_graph_enhanced.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "scripts/generate_network_graph_enhanced.py::main",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::new",
        "to": "crates/pyffi/src/lib.rs::init",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::generate",
        "to": "crates/pyffi/src/lib.rs::init",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::main",
        "to": "crates/pyffi/src/lib.rs::init",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/cli.rs::example_client",
        "to": "crates/pyffi/src/lib.rs::init",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/mcp_server/src/lib.rs::handle_request",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/mcp_server/src/lib.rs::handle_request",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/mcp_server/src/lib.rs::handle_request",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/mcp_server/src/lib.rs::handle_request",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/mcp_server/src/lib.rs::handle_request",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/mcp_server/src/lib.rs::handle_request",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::handle_session",
        "to": "crates/mcp_server/src/lib.rs::handle_request",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/mcp_server/src/lib.rs::handle_request",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/mcp_server/src/lib.rs::handle_request",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::handle_session",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::handle_session",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::handle_session",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::handle_session",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::handle_session",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::handle_session",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::handle_session",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::handle_session",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::handle_session",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/mcp_server/src/lib.rs::remove_connection",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/mcp_server/src/lib.rs::remove_connection",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/mcp_server/src/lib.rs::remove_connection",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/mcp_server/src/lib.rs::remove_connection",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/mcp_server/src/lib.rs::remove_connection",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/mcp_server/src/lib.rs::remove_connection",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::handle_session",
        "to": "crates/mcp_server/src/lib.rs::remove_connection",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/mcp_server/src/lib.rs::remove_connection",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/mcp_server/src/lib.rs::remove_connection",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::handle_session",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::handle_session",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::handle_session",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::handle_session",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::handle_session",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::handle_session",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/mcp_server/src/lib.rs::add_connection",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/mcp_server/src/lib.rs::add_connection",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/mcp_server/src/lib.rs::add_connection",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/mcp_server/src/lib.rs::add_connection",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/mcp_server/src/lib.rs::add_connection",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/mcp_server/src/lib.rs::add_connection",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::handle_session",
        "to": "crates/mcp_server/src/lib.rs::add_connection",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/mcp_server/src/lib.rs::add_connection",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/mcp_server/src/lib.rs::add_connection",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::handle_session",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::handle_session",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::handle_session",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::handle_session",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "tests/mocks/mod.rs::send",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "tests/mocks/mod.rs::send",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "tests/mocks/mod.rs::send",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "tests/mocks/mod.rs::send",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "tests/mocks/mod.rs::send",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "tests/mocks/mod.rs::send",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::handle_session",
        "to": "tests/mocks/mod.rs::send",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "tests/mocks/mod.rs::send",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "tests/mocks/mod.rs::send",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::handle_session",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::handle_session",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::handle_session",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::handle_session",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::new",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::run",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::handle_session",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::load_manifest",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/websocket.rs::refresh_manifest",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::new",
        "to": "crates/mcp_server/src/lib.rs::handle_request",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/mcp_server/src/lib.rs::handle_request",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/mcp_server/src/lib.rs::handle_request",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::new",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::new",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::new",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::new",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::new",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::new",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::new",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::new",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::new",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::new",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::new",
        "to": "crates/mcp_server/src/lib.rs::remove_connection",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/mcp_server/src/lib.rs::remove_connection",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/mcp_server/src/lib.rs::remove_connection",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::new",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::new",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::new",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::new",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::new",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::new",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::new",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::new",
        "to": "crates/mcp_server/src/lib.rs::add_connection",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/mcp_server/src/lib.rs::add_connection",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/mcp_server/src/lib.rs::add_connection",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::new",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::new",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::new",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::new",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::new",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::new",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::new",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/stdio.rs::run",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::new",
        "to": "crates/mcp_server/src/lib.rs::handle_request",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::router",
        "to": "crates/mcp_server/src/lib.rs::handle_request",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/mcp_server/src/lib.rs::handle_request",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/mcp_server/src/lib.rs::handle_request",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_health",
        "to": "crates/mcp_server/src/lib.rs::handle_request",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_post",
        "to": "crates/mcp_server/src/lib.rs::handle_request",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_sse",
        "to": "crates/mcp_server/src/lib.rs::handle_request",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::check_needs_sse",
        "to": "crates/mcp_server/src/lib.rs::handle_request",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::new",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::router",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_health",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_post",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_sse",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::check_needs_sse",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::new",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::router",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_health",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_post",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_sse",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::check_needs_sse",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::new",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::router",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_health",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_post",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_sse",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::check_needs_sse",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::new",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::router",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_health",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_post",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_sse",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::check_needs_sse",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::new",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::router",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_health",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_post",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_sse",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::check_needs_sse",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::new",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::router",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_health",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_post",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_sse",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::check_needs_sse",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::new",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::router",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_health",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_post",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_sse",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::check_needs_sse",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::new",
        "to": "crates/orchestrator/src/server.rs::into_response",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::router",
        "to": "crates/orchestrator/src/server.rs::into_response",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/orchestrator/src/server.rs::into_response",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/orchestrator/src/server.rs::into_response",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_health",
        "to": "crates/orchestrator/src/server.rs::into_response",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_post",
        "to": "crates/orchestrator/src/server.rs::into_response",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_sse",
        "to": "crates/orchestrator/src/server.rs::into_response",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::check_needs_sse",
        "to": "crates/orchestrator/src/server.rs::into_response",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::new",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::router",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_health",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_post",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_sse",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::check_needs_sse",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::new",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::router",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_health",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_post",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_sse",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::check_needs_sse",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::new",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::router",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_health",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_post",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_sse",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::check_needs_sse",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::new",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::router",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_health",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_post",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_sse",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::check_needs_sse",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::new",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::router",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_health",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_post",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_sse",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::check_needs_sse",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::new",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::router",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_health",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_post",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_sse",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::check_needs_sse",
        "to": "crates/pyffi/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::new",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::router",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_health",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_post",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_sse",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::check_needs_sse",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::new",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::router",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_health",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_post",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_sse",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::check_needs_sse",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::new",
        "to": "crates/mcp_server/src/lib.rs::add_connection",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::router",
        "to": "crates/mcp_server/src/lib.rs::add_connection",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/mcp_server/src/lib.rs::add_connection",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/mcp_server/src/lib.rs::add_connection",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_health",
        "to": "crates/mcp_server/src/lib.rs::add_connection",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_post",
        "to": "crates/mcp_server/src/lib.rs::add_connection",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_sse",
        "to": "crates/mcp_server/src/lib.rs::add_connection",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::check_needs_sse",
        "to": "crates/mcp_server/src/lib.rs::add_connection",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::new",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::router",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_health",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_post",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_sse",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::check_needs_sse",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::new",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::router",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_health",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_post",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_sse",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::check_needs_sse",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::new",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::router",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_health",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_post",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_sse",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::check_needs_sse",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::new",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::router",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_health",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_post",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_sse",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::check_needs_sse",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::new",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::router",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_health",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_post",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_sse",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::check_needs_sse",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::new",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::router",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_health",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_post",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_sse",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::check_needs_sse",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::new",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::router",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_health",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_post",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_sse",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::check_needs_sse",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::new",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::router",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_health",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_post",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_sse",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::check_needs_sse",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::new",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::router",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::run",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_health",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_post",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::handle_sse",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/mcp_server/src/transport/http.rs::check_needs_sse",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/config.rs::from_env",
        "to": "crates/orchestrator/src/config.rs::validate",
        "type": "calls"
      },
      {
        "from": "crates/service/src/config.rs::validate",
        "to": "crates/orchestrator/src/config.rs::validate",
        "type": "calls"
      },
      {
        "from": "crates/service/src/config.rs::load_hosted_ai_config",
        "to": "crates/orchestrator/src/config.rs::validate",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::new",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::generate",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::new",
        "to": "tests/mocks/mod.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::generate",
        "to": "tests/mocks/mod.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::new",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::generate",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::new",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::generate",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::new",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::generate",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::new",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::generate",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::new",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::generate",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::new",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::generate",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::new",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::generate",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::new",
        "to": "crates/orchestrator/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::generate",
        "to": "crates/orchestrator/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::new",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::generate",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::new",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::generate",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::new",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::generate",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::new",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::generate",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::new",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::generate",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::new",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::generate",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::new",
        "to": "crates/mcp_server/src/cli.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::generate",
        "to": "crates/mcp_server/src/cli.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::new",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::generate",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::new",
        "to": "crates/engine_pymlx/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::generate",
        "to": "crates/engine_pymlx/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::new",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::generate",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::new",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::generate",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::new",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::generate",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::new",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/mock_engine.rs::generate",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::main",
        "to": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::health",
        "to": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::classify_legacy",
        "to": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::run_legacy",
        "to": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::process_unified",
        "to": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::create_covenant",
        "to": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::execute_strike",
        "to": "crates/orchestrator/src/bin/homeskillet-orchestrator.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::main",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::health",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::classify_legacy",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::run_legacy",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::process_unified",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::create_covenant",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::execute_strike",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::main",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::health",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::classify_legacy",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::run_legacy",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::process_unified",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::create_covenant",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::execute_strike",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::main",
        "to": "crates/wasm_classifier/src/lib.rs::init",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::health",
        "to": "crates/wasm_classifier/src/lib.rs::init",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::classify_legacy",
        "to": "crates/wasm_classifier/src/lib.rs::init",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::run_legacy",
        "to": "crates/wasm_classifier/src/lib.rs::init",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::process_unified",
        "to": "crates/wasm_classifier/src/lib.rs::init",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::create_covenant",
        "to": "crates/wasm_classifier/src/lib.rs::init",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::execute_strike",
        "to": "crates/wasm_classifier/src/lib.rs::init",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::main",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::health",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::classify_legacy",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::run_legacy",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::process_unified",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::create_covenant",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::execute_strike",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::main",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::health",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::classify_legacy",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::run_legacy",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::process_unified",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::create_covenant",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::execute_strike",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::main",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::health",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::classify_legacy",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::run_legacy",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::process_unified",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::create_covenant",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::execute_strike",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::main",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::health",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::classify_legacy",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::run_legacy",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::process_unified",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::create_covenant",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::execute_strike",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::main",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::health",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::classify_legacy",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::run_legacy",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::process_unified",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::create_covenant",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::execute_strike",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::main",
        "to": "crates/harpoon_bridge/src/lib.rs::process",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::health",
        "to": "crates/harpoon_bridge/src/lib.rs::process",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::classify_legacy",
        "to": "crates/harpoon_bridge/src/lib.rs::process",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::run_legacy",
        "to": "crates/harpoon_bridge/src/lib.rs::process",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::process_unified",
        "to": "crates/harpoon_bridge/src/lib.rs::process",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::create_covenant",
        "to": "crates/harpoon_bridge/src/lib.rs::process",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::execute_strike",
        "to": "crates/harpoon_bridge/src/lib.rs::process",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::main",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::health",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::classify_legacy",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::run_legacy",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::process_unified",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::create_covenant",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::execute_strike",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::main",
        "to": "scripts/generate_network_graph_qoq.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::health",
        "to": "scripts/generate_network_graph_qoq.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::classify_legacy",
        "to": "scripts/generate_network_graph_qoq.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::run_legacy",
        "to": "scripts/generate_network_graph_qoq.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::process_unified",
        "to": "scripts/generate_network_graph_qoq.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::create_covenant",
        "to": "scripts/generate_network_graph_qoq.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::execute_strike",
        "to": "scripts/generate_network_graph_qoq.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::main",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::health",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::classify_legacy",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::run_legacy",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::process_unified",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::create_covenant",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::execute_strike",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::main",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::health",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::classify_legacy",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::run_legacy",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::process_unified",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::create_covenant",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::execute_strike",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::main",
        "to": "scripts/compliance/generate-policy-templates.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::health",
        "to": "scripts/compliance/generate-policy-templates.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::classify_legacy",
        "to": "scripts/compliance/generate-policy-templates.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::run_legacy",
        "to": "scripts/compliance/generate-policy-templates.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::process_unified",
        "to": "scripts/compliance/generate-policy-templates.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::create_covenant",
        "to": "scripts/compliance/generate-policy-templates.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::execute_strike",
        "to": "scripts/compliance/generate-policy-templates.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::main",
        "to": "crates/mcp_server/src/cli.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::health",
        "to": "crates/mcp_server/src/cli.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::classify_legacy",
        "to": "crates/mcp_server/src/cli.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::run_legacy",
        "to": "crates/mcp_server/src/cli.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::process_unified",
        "to": "crates/mcp_server/src/cli.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::create_covenant",
        "to": "crates/mcp_server/src/cli.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::execute_strike",
        "to": "crates/mcp_server/src/cli.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::main",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::health",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::classify_legacy",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::run_legacy",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::process_unified",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::create_covenant",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::execute_strike",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::main",
        "to": "scripts/analyze_codebase_simple.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::health",
        "to": "scripts/analyze_codebase_simple.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::classify_legacy",
        "to": "scripts/analyze_codebase_simple.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::run_legacy",
        "to": "scripts/analyze_codebase_simple.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::process_unified",
        "to": "scripts/analyze_codebase_simple.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::create_covenant",
        "to": "scripts/analyze_codebase_simple.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::execute_strike",
        "to": "scripts/analyze_codebase_simple.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::main",
        "to": "scripts/generate_high_signal_graph.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::health",
        "to": "scripts/generate_high_signal_graph.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::classify_legacy",
        "to": "scripts/generate_high_signal_graph.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::run_legacy",
        "to": "scripts/generate_high_signal_graph.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::process_unified",
        "to": "scripts/generate_high_signal_graph.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::create_covenant",
        "to": "scripts/generate_high_signal_graph.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::execute_strike",
        "to": "scripts/generate_high_signal_graph.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::main",
        "to": "scripts/analyze_codebase.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::health",
        "to": "scripts/analyze_codebase.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::classify_legacy",
        "to": "scripts/analyze_codebase.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::run_legacy",
        "to": "scripts/analyze_codebase.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::process_unified",
        "to": "scripts/analyze_codebase.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::create_covenant",
        "to": "scripts/analyze_codebase.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::execute_strike",
        "to": "scripts/analyze_codebase.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::main",
        "to": "crates/harpoon_bridge/src/covenant.rs::target_state",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::health",
        "to": "crates/harpoon_bridge/src/covenant.rs::target_state",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::classify_legacy",
        "to": "crates/harpoon_bridge/src/covenant.rs::target_state",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::run_legacy",
        "to": "crates/harpoon_bridge/src/covenant.rs::target_state",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::process_unified",
        "to": "crates/harpoon_bridge/src/covenant.rs::target_state",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::create_covenant",
        "to": "crates/harpoon_bridge/src/covenant.rs::target_state",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::execute_strike",
        "to": "crates/harpoon_bridge/src/covenant.rs::target_state",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::main",
        "to": "scripts/comprehensive_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::health",
        "to": "scripts/comprehensive_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::classify_legacy",
        "to": "scripts/comprehensive_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::run_legacy",
        "to": "scripts/comprehensive_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::process_unified",
        "to": "scripts/comprehensive_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::create_covenant",
        "to": "scripts/comprehensive_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::execute_strike",
        "to": "scripts/comprehensive_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::main",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::health",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::classify_legacy",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::run_legacy",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::process_unified",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::create_covenant",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::execute_strike",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::main",
        "to": "scripts/compliance/audit-trail-generator.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::health",
        "to": "scripts/compliance/audit-trail-generator.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::classify_legacy",
        "to": "scripts/compliance/audit-trail-generator.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::run_legacy",
        "to": "scripts/compliance/audit-trail-generator.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::process_unified",
        "to": "scripts/compliance/audit-trail-generator.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::create_covenant",
        "to": "scripts/compliance/audit-trail-generator.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::execute_strike",
        "to": "scripts/compliance/audit-trail-generator.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::main",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::health",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::classify_legacy",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::run_legacy",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::process_unified",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::create_covenant",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::execute_strike",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::main",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::health",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::classify_legacy",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::run_legacy",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::process_unified",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::create_covenant",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::execute_strike",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::main",
        "to": "scripts/compliance/compliance-dashboard.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::health",
        "to": "scripts/compliance/compliance-dashboard.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::classify_legacy",
        "to": "scripts/compliance/compliance-dashboard.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::run_legacy",
        "to": "scripts/compliance/compliance-dashboard.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::process_unified",
        "to": "scripts/compliance/compliance-dashboard.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::create_covenant",
        "to": "scripts/compliance/compliance-dashboard.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::execute_strike",
        "to": "scripts/compliance/compliance-dashboard.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::main",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::health",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::classify_legacy",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::run_legacy",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::process_unified",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::create_covenant",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::execute_strike",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::main",
        "to": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::health",
        "to": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::classify_legacy",
        "to": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::run_legacy",
        "to": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::process_unified",
        "to": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::create_covenant",
        "to": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::execute_strike",
        "to": "crates/harpoon_bridge/src/lib.rs::execute_strike",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::main",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::health",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::classify_legacy",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::run_legacy",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::process_unified",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::create_covenant",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::execute_strike",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::main",
        "to": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::health",
        "to": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::classify_legacy",
        "to": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::run_legacy",
        "to": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::process_unified",
        "to": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::create_covenant",
        "to": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::execute_strike",
        "to": "crates/harpoon_bridge/src/lib.rs::create_covenant",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::main",
        "to": "scripts/generate_unified_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::health",
        "to": "scripts/generate_unified_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::classify_legacy",
        "to": "scripts/generate_unified_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::run_legacy",
        "to": "scripts/generate_unified_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::process_unified",
        "to": "scripts/generate_unified_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::create_covenant",
        "to": "scripts/generate_unified_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::execute_strike",
        "to": "scripts/generate_unified_analysis.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::main",
        "to": "scripts/generate_network_graph.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::health",
        "to": "scripts/generate_network_graph.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::classify_legacy",
        "to": "scripts/generate_network_graph.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::run_legacy",
        "to": "scripts/generate_network_graph.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::process_unified",
        "to": "scripts/generate_network_graph.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::create_covenant",
        "to": "scripts/generate_network_graph.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::execute_strike",
        "to": "scripts/generate_network_graph.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::main",
        "to": "crates/harpoon_bridge/src/covenant.rs::reality_state",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::health",
        "to": "crates/harpoon_bridge/src/covenant.rs::reality_state",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::classify_legacy",
        "to": "crates/harpoon_bridge/src/covenant.rs::reality_state",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::run_legacy",
        "to": "crates/harpoon_bridge/src/covenant.rs::reality_state",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::process_unified",
        "to": "crates/harpoon_bridge/src/covenant.rs::reality_state",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::create_covenant",
        "to": "crates/harpoon_bridge/src/covenant.rs::reality_state",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::execute_strike",
        "to": "crates/harpoon_bridge/src/covenant.rs::reality_state",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::main",
        "to": "scripts/compliance/compliance-scanner.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::health",
        "to": "scripts/compliance/compliance-scanner.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::classify_legacy",
        "to": "scripts/compliance/compliance-scanner.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::run_legacy",
        "to": "scripts/compliance/compliance-scanner.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::process_unified",
        "to": "scripts/compliance/compliance-scanner.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::create_covenant",
        "to": "scripts/compliance/compliance-scanner.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::execute_strike",
        "to": "scripts/compliance/compliance-scanner.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::main",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::health",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::classify_legacy",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::run_legacy",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::process_unified",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::create_covenant",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::execute_strike",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::main",
        "to": "crates/harpoon_bridge/src/fusion.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::health",
        "to": "crates/harpoon_bridge/src/fusion.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::classify_legacy",
        "to": "crates/harpoon_bridge/src/fusion.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::run_legacy",
        "to": "crates/harpoon_bridge/src/fusion.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::process_unified",
        "to": "crates/harpoon_bridge/src/fusion.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::create_covenant",
        "to": "crates/harpoon_bridge/src/fusion.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::execute_strike",
        "to": "crates/harpoon_bridge/src/fusion.rs::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::main",
        "to": "crates/service/src/config.rs::from_env",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::health",
        "to": "crates/service/src/config.rs::from_env",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::classify_legacy",
        "to": "crates/service/src/config.rs::from_env",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::run_legacy",
        "to": "crates/service/src/config.rs::from_env",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::process_unified",
        "to": "crates/service/src/config.rs::from_env",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::create_covenant",
        "to": "crates/service/src/config.rs::from_env",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::execute_strike",
        "to": "crates/service/src/config.rs::from_env",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::main",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::health",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::classify_legacy",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::run_legacy",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::process_unified",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::create_covenant",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::execute_strike",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::main",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::health",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::classify_legacy",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::run_legacy",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::process_unified",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::create_covenant",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::execute_strike",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::main",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::health",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::classify_legacy",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::run_legacy",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::process_unified",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::create_covenant",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::execute_strike",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::main",
        "to": "scripts/generate_network_graph_enhanced.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::health",
        "to": "scripts/generate_network_graph_enhanced.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::classify_legacy",
        "to": "scripts/generate_network_graph_enhanced.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::run_legacy",
        "to": "scripts/generate_network_graph_enhanced.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::process_unified",
        "to": "scripts/generate_network_graph_enhanced.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::create_covenant",
        "to": "scripts/generate_network_graph_enhanced.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::execute_strike",
        "to": "scripts/generate_network_graph_enhanced.py::main",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::main",
        "to": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::health",
        "to": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::classify_legacy",
        "to": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::run_legacy",
        "to": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::process_unified",
        "to": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::create_covenant",
        "to": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::execute_strike",
        "to": "crates/harpoon_bridge/src/strike.rs::execute_strike",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::main",
        "to": "crates/pyffi/src/lib.rs::init",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::health",
        "to": "crates/pyffi/src/lib.rs::init",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::classify_legacy",
        "to": "crates/pyffi/src/lib.rs::init",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::run_legacy",
        "to": "crates/pyffi/src/lib.rs::init",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::process_unified",
        "to": "crates/pyffi/src/lib.rs::init",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::create_covenant",
        "to": "crates/pyffi/src/lib.rs::init",
        "type": "calls"
      },
      {
        "from": "crates/service/src/main.rs::execute_strike",
        "to": "crates/pyffi/src/lib.rs::init",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::new",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::get_user",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::get_user",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::new",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::get_user",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::get_user",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::new",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::get_user",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::get_user",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::new",
        "to": "tests/mocks/mod.rs::poll_for_token",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "to": "tests/mocks/mod.rs::poll_for_token",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "to": "tests/mocks/mod.rs::poll_for_token",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::get_user",
        "to": "tests/mocks/mod.rs::poll_for_token",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "to": "tests/mocks/mod.rs::poll_for_token",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "to": "tests/mocks/mod.rs::poll_for_token",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::get_user",
        "to": "tests/mocks/mod.rs::poll_for_token",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::new",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::get_user",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::get_user",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::new",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::get_user",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::get_user",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::new",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::get_user",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::get_user",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::new",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::get_user",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::get_user",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::new",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::get_user",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::get_user",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::new",
        "to": "tests/mocks/mod.rs::start_device_flow",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "to": "tests/mocks/mod.rs::start_device_flow",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "to": "tests/mocks/mod.rs::start_device_flow",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::get_user",
        "to": "tests/mocks/mod.rs::start_device_flow",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "to": "tests/mocks/mod.rs::start_device_flow",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "to": "tests/mocks/mod.rs::start_device_flow",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::get_user",
        "to": "tests/mocks/mod.rs::start_device_flow",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::new",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::get_user",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::get_user",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::new",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::get_user",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::get_user",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::new",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::get_user",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::get_user",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::new",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::get_user",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::get_user",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::new",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::get_user",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::get_user",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::new",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::get_user",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::get_user",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::new",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::get_user",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::get_user",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::new",
        "to": "tests/mocks/mod.rs::send",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "to": "tests/mocks/mod.rs::send",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "to": "tests/mocks/mod.rs::send",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::get_user",
        "to": "tests/mocks/mod.rs::send",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "to": "tests/mocks/mod.rs::send",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "to": "tests/mocks/mod.rs::send",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::get_user",
        "to": "tests/mocks/mod.rs::send",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::new",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::get_user",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::get_user",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::new",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::get_user",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::get_user",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::new",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::get_user",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::get_user",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::new",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::get_user",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::start_device_flow",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::poll_for_token",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/service/src/auth/github_oauth.rs::get_user",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::new",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::generate",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::ensure_loaded",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::new",
        "to": "tests/mocks/mod.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::generate",
        "to": "tests/mocks/mod.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::ensure_loaded",
        "to": "tests/mocks/mod.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::new",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::generate",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::ensure_loaded",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::new",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::generate",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::ensure_loaded",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::new",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::generate",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::ensure_loaded",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::new",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::generate",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::ensure_loaded",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::new",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::generate",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::ensure_loaded",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::new",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::generate",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::ensure_loaded",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::new",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::generate",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::ensure_loaded",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::new",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::generate",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::ensure_loaded",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::new",
        "to": "crates/orchestrator/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::generate",
        "to": "crates/orchestrator/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::ensure_loaded",
        "to": "crates/orchestrator/src/lib.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::new",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::generate",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::ensure_loaded",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::new",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::generate",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::ensure_loaded",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::new",
        "to": "crates/service/src/mock_engine.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::generate",
        "to": "crates/service/src/mock_engine.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::ensure_loaded",
        "to": "crates/service/src/mock_engine.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::new",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::generate",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::ensure_loaded",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::new",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::generate",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::ensure_loaded",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::new",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::generate",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::ensure_loaded",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::new",
        "to": "crates/mcp_server/src/cli.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::generate",
        "to": "crates/mcp_server/src/cli.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::ensure_loaded",
        "to": "crates/mcp_server/src/cli.rs::generate",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::new",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::generate",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::ensure_loaded",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::new",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::generate",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::ensure_loaded",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::new",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::generate",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::ensure_loaded",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::new",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::generate",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::ensure_loaded",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::new",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::generate",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/engine_pymlx/src/lib.rs::ensure_loaded",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_prompt",
        "to": "crates/resources/src/tools/github.rs::analyze_repo_tool",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_tool",
        "to": "crates/resources/src/tools/github.rs::analyze_repo_tool",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_schema",
        "to": "crates/resources/src/tools/github.rs::analyze_repo_tool",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_prompt",
        "to": "crates/resources/src/tools/github.rs::analyze_repo_tool",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_tool",
        "to": "crates/resources/src/tools/github.rs::analyze_repo_tool",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_schema",
        "to": "crates/resources/src/tools/github.rs::analyze_repo_tool",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::prompts_for_agent",
        "to": "crates/resources/src/tools/github.rs::analyze_repo_tool",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::export_json",
        "to": "crates/resources/src/tools/github.rs::analyze_repo_tool",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::render_prompt",
        "to": "crates/resources/src/tools/github.rs::analyze_repo_tool",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::load_builtin_resources",
        "to": "crates/resources/src/tools/github.rs::analyze_repo_tool",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_prompt",
        "to": "crates/resources/src/prompts/covenant.rs::review_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_tool",
        "to": "crates/resources/src/prompts/covenant.rs::review_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_schema",
        "to": "crates/resources/src/prompts/covenant.rs::review_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_prompt",
        "to": "crates/resources/src/prompts/covenant.rs::review_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_tool",
        "to": "crates/resources/src/prompts/covenant.rs::review_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_schema",
        "to": "crates/resources/src/prompts/covenant.rs::review_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::prompts_for_agent",
        "to": "crates/resources/src/prompts/covenant.rs::review_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::export_json",
        "to": "crates/resources/src/prompts/covenant.rs::review_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::render_prompt",
        "to": "crates/resources/src/prompts/covenant.rs::review_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::load_builtin_resources",
        "to": "crates/resources/src/prompts/covenant.rs::review_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_prompt",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_tool",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_schema",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_prompt",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_tool",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_schema",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::prompts_for_agent",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::export_json",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::render_prompt",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::load_builtin_resources",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_prompt",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_tool",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_schema",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_prompt",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_tool",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_schema",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::prompts_for_agent",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::export_json",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::render_prompt",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::load_builtin_resources",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_prompt",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_tool",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_schema",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_prompt",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_tool",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_schema",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::prompts_for_agent",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::export_json",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::render_prompt",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::load_builtin_resources",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_prompt",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_tool",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_schema",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_prompt",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_tool",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_schema",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::prompts_for_agent",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::export_json",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::render_prompt",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::load_builtin_resources",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_prompt",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_tool",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_schema",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_prompt",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_tool",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_schema",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::prompts_for_agent",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::export_json",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::render_prompt",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::load_builtin_resources",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_prompt",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_tool",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_schema",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_prompt",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_tool",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_schema",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::prompts_for_agent",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::export_json",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::render_prompt",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::load_builtin_resources",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_prompt",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_tool",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_schema",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_prompt",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_tool",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_schema",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::prompts_for_agent",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::export_json",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::render_prompt",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::load_builtin_resources",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_prompt",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_tool",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_schema",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_prompt",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_tool",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_schema",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::prompts_for_agent",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::export_json",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::render_prompt",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::load_builtin_resources",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_prompt",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_tool",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_schema",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_prompt",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_tool",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_schema",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::prompts_for_agent",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::export_json",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::render_prompt",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::load_builtin_resources",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_prompt",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_tool",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_schema",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_prompt",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_tool",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_schema",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::prompts_for_agent",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::export_json",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::render_prompt",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::load_builtin_resources",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_prompt",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_tool",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_schema",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_prompt",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_tool",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_schema",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::prompts_for_agent",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::export_json",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::render_prompt",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::load_builtin_resources",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_prompt",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_tool",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_schema",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_prompt",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_tool",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_schema",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::prompts_for_agent",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::export_json",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::render_prompt",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::load_builtin_resources",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_prompt",
        "to": "crates/resources/src/tools/mlx.rs::classify_tool",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_tool",
        "to": "crates/resources/src/tools/mlx.rs::classify_tool",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_schema",
        "to": "crates/resources/src/tools/mlx.rs::classify_tool",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_prompt",
        "to": "crates/resources/src/tools/mlx.rs::classify_tool",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_tool",
        "to": "crates/resources/src/tools/mlx.rs::classify_tool",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_schema",
        "to": "crates/resources/src/tools/mlx.rs::classify_tool",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::prompts_for_agent",
        "to": "crates/resources/src/tools/mlx.rs::classify_tool",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::export_json",
        "to": "crates/resources/src/tools/mlx.rs::classify_tool",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::render_prompt",
        "to": "crates/resources/src/tools/mlx.rs::classify_tool",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::load_builtin_resources",
        "to": "crates/resources/src/tools/mlx.rs::classify_tool",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_prompt",
        "to": "crates/mcp_server/src/lib.rs::get_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_tool",
        "to": "crates/mcp_server/src/lib.rs::get_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_schema",
        "to": "crates/mcp_server/src/lib.rs::get_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_prompt",
        "to": "crates/mcp_server/src/lib.rs::get_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_tool",
        "to": "crates/mcp_server/src/lib.rs::get_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_schema",
        "to": "crates/mcp_server/src/lib.rs::get_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::prompts_for_agent",
        "to": "crates/mcp_server/src/lib.rs::get_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::export_json",
        "to": "crates/mcp_server/src/lib.rs::get_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::render_prompt",
        "to": "crates/mcp_server/src/lib.rs::get_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::load_builtin_resources",
        "to": "crates/mcp_server/src/lib.rs::get_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_prompt",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_tool",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_schema",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_prompt",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_tool",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_schema",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::prompts_for_agent",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::export_json",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::render_prompt",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::load_builtin_resources",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_prompt",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_tool",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_schema",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_prompt",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_tool",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_schema",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::prompts_for_agent",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::export_json",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::render_prompt",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::load_builtin_resources",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_prompt",
        "to": "crates/resources/src/tools/github.rs::create_pr_tool",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_tool",
        "to": "crates/resources/src/tools/github.rs::create_pr_tool",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_schema",
        "to": "crates/resources/src/tools/github.rs::create_pr_tool",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_prompt",
        "to": "crates/resources/src/tools/github.rs::create_pr_tool",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_tool",
        "to": "crates/resources/src/tools/github.rs::create_pr_tool",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_schema",
        "to": "crates/resources/src/tools/github.rs::create_pr_tool",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::prompts_for_agent",
        "to": "crates/resources/src/tools/github.rs::create_pr_tool",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::export_json",
        "to": "crates/resources/src/tools/github.rs::create_pr_tool",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::render_prompt",
        "to": "crates/resources/src/tools/github.rs::create_pr_tool",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::load_builtin_resources",
        "to": "crates/resources/src/tools/github.rs::create_pr_tool",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_prompt",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_tool",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_schema",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_prompt",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_tool",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_schema",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::prompts_for_agent",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::export_json",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::render_prompt",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::load_builtin_resources",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_prompt",
        "to": "crates/resources/src/prompts/strike.rs::delegation_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_tool",
        "to": "crates/resources/src/prompts/strike.rs::delegation_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_schema",
        "to": "crates/resources/src/prompts/strike.rs::delegation_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_prompt",
        "to": "crates/resources/src/prompts/strike.rs::delegation_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_tool",
        "to": "crates/resources/src/prompts/strike.rs::delegation_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_schema",
        "to": "crates/resources/src/prompts/strike.rs::delegation_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::prompts_for_agent",
        "to": "crates/resources/src/prompts/strike.rs::delegation_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::export_json",
        "to": "crates/resources/src/prompts/strike.rs::delegation_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::render_prompt",
        "to": "crates/resources/src/prompts/strike.rs::delegation_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::load_builtin_resources",
        "to": "crates/resources/src/prompts/strike.rs::delegation_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_prompt",
        "to": "crates/resources/src/schemas/covenant.rs::covenant_schema",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_tool",
        "to": "crates/resources/src/schemas/covenant.rs::covenant_schema",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_schema",
        "to": "crates/resources/src/schemas/covenant.rs::covenant_schema",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_prompt",
        "to": "crates/resources/src/schemas/covenant.rs::covenant_schema",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_tool",
        "to": "crates/resources/src/schemas/covenant.rs::covenant_schema",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_schema",
        "to": "crates/resources/src/schemas/covenant.rs::covenant_schema",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::prompts_for_agent",
        "to": "crates/resources/src/schemas/covenant.rs::covenant_schema",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::export_json",
        "to": "crates/resources/src/schemas/covenant.rs::covenant_schema",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::render_prompt",
        "to": "crates/resources/src/schemas/covenant.rs::covenant_schema",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::load_builtin_resources",
        "to": "crates/resources/src/schemas/covenant.rs::covenant_schema",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_prompt",
        "to": "crates/resources/src/schemas/agent.rs::delegation_plan_schema",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_tool",
        "to": "crates/resources/src/schemas/agent.rs::delegation_plan_schema",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_schema",
        "to": "crates/resources/src/schemas/agent.rs::delegation_plan_schema",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_prompt",
        "to": "crates/resources/src/schemas/agent.rs::delegation_plan_schema",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_tool",
        "to": "crates/resources/src/schemas/agent.rs::delegation_plan_schema",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_schema",
        "to": "crates/resources/src/schemas/agent.rs::delegation_plan_schema",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::prompts_for_agent",
        "to": "crates/resources/src/schemas/agent.rs::delegation_plan_schema",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::export_json",
        "to": "crates/resources/src/schemas/agent.rs::delegation_plan_schema",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::render_prompt",
        "to": "crates/resources/src/schemas/agent.rs::delegation_plan_schema",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::load_builtin_resources",
        "to": "crates/resources/src/schemas/agent.rs::delegation_plan_schema",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_prompt",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_tool",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_schema",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_prompt",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_tool",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_schema",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::prompts_for_agent",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::export_json",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::render_prompt",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::load_builtin_resources",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_prompt",
        "to": "crates/resources/src/tools/mlx.rs::inference_tool",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_tool",
        "to": "crates/resources/src/tools/mlx.rs::inference_tool",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_schema",
        "to": "crates/resources/src/tools/mlx.rs::inference_tool",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_prompt",
        "to": "crates/resources/src/tools/mlx.rs::inference_tool",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_tool",
        "to": "crates/resources/src/tools/mlx.rs::inference_tool",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_schema",
        "to": "crates/resources/src/tools/mlx.rs::inference_tool",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::prompts_for_agent",
        "to": "crates/resources/src/tools/mlx.rs::inference_tool",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::export_json",
        "to": "crates/resources/src/tools/mlx.rs::inference_tool",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::render_prompt",
        "to": "crates/resources/src/tools/mlx.rs::inference_tool",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::load_builtin_resources",
        "to": "crates/resources/src/tools/mlx.rs::inference_tool",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_prompt",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_tool",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_schema",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_prompt",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_tool",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_schema",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::prompts_for_agent",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::export_json",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::render_prompt",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::load_builtin_resources",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_prompt",
        "to": "crates/resources/src/schemas/strike.rs::strike_order_schema",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_tool",
        "to": "crates/resources/src/schemas/strike.rs::strike_order_schema",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_schema",
        "to": "crates/resources/src/schemas/strike.rs::strike_order_schema",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_prompt",
        "to": "crates/resources/src/schemas/strike.rs::strike_order_schema",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_tool",
        "to": "crates/resources/src/schemas/strike.rs::strike_order_schema",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_schema",
        "to": "crates/resources/src/schemas/strike.rs::strike_order_schema",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::prompts_for_agent",
        "to": "crates/resources/src/schemas/strike.rs::strike_order_schema",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::export_json",
        "to": "crates/resources/src/schemas/strike.rs::strike_order_schema",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::render_prompt",
        "to": "crates/resources/src/schemas/strike.rs::strike_order_schema",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::load_builtin_resources",
        "to": "crates/resources/src/schemas/strike.rs::strike_order_schema",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_prompt",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_tool",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_schema",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_prompt",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_tool",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_schema",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::prompts_for_agent",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::export_json",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::render_prompt",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::load_builtin_resources",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_prompt",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_tool",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_schema",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_prompt",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_tool",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_schema",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::prompts_for_agent",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::export_json",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::render_prompt",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::load_builtin_resources",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_prompt",
        "to": "crates/resources/src/prompts/covenant.rs::creation_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_tool",
        "to": "crates/resources/src/prompts/covenant.rs::creation_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_schema",
        "to": "crates/resources/src/prompts/covenant.rs::creation_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_prompt",
        "to": "crates/resources/src/prompts/covenant.rs::creation_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_tool",
        "to": "crates/resources/src/prompts/covenant.rs::creation_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_schema",
        "to": "crates/resources/src/prompts/covenant.rs::creation_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::prompts_for_agent",
        "to": "crates/resources/src/prompts/covenant.rs::creation_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::export_json",
        "to": "crates/resources/src/prompts/covenant.rs::creation_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::render_prompt",
        "to": "crates/resources/src/prompts/covenant.rs::creation_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::load_builtin_resources",
        "to": "crates/resources/src/prompts/covenant.rs::creation_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_prompt",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_tool",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_schema",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_prompt",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_tool",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_schema",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::prompts_for_agent",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::export_json",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::render_prompt",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::load_builtin_resources",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_prompt",
        "to": "crates/resources/src/prompts/fusion.rs::hygiene_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_tool",
        "to": "crates/resources/src/prompts/fusion.rs::hygiene_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::register_schema",
        "to": "crates/resources/src/prompts/fusion.rs::hygiene_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_prompt",
        "to": "crates/resources/src/prompts/fusion.rs::hygiene_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_tool",
        "to": "crates/resources/src/prompts/fusion.rs::hygiene_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::get_schema",
        "to": "crates/resources/src/prompts/fusion.rs::hygiene_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::prompts_for_agent",
        "to": "crates/resources/src/prompts/fusion.rs::hygiene_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::export_json",
        "to": "crates/resources/src/prompts/fusion.rs::hygiene_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::render_prompt",
        "to": "crates/resources/src/prompts/fusion.rs::hygiene_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/lib.rs::load_builtin_resources",
        "to": "crates/resources/src/prompts/fusion.rs::hygiene_prompt",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::architect",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::foreman",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::worker",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::new",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::register_strategy",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::should_sample",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::record_sample",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::get_samples_for_validation",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::sample_from_array",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::default",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::architect",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::foreman",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::worker",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::new",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::register_strategy",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::should_sample",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::record_sample",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::get_samples_for_validation",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::sample_from_array",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::default",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::architect",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::foreman",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::worker",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::new",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::register_strategy",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::should_sample",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::record_sample",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::get_samples_for_validation",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::sample_from_array",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::default",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::architect",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::foreman",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::worker",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::new",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::register_strategy",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::should_sample",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::record_sample",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::get_samples_for_validation",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::sample_from_array",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::default",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::architect",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::foreman",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::worker",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::new",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::register_strategy",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::should_sample",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::record_sample",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::get_samples_for_validation",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::sample_from_array",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::default",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::architect",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::foreman",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::worker",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::new",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::register_strategy",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::should_sample",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::record_sample",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::get_samples_for_validation",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::sample_from_array",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::default",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::architect",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::foreman",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::worker",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::new",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::register_strategy",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::should_sample",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::record_sample",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::get_samples_for_validation",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::sample_from_array",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::default",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::architect",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::foreman",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::worker",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::new",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::register_strategy",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::should_sample",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::record_sample",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::get_samples_for_validation",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::sample_from_array",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::default",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::architect",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::foreman",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::worker",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::new",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::register_strategy",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::should_sample",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::record_sample",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::get_samples_for_validation",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::sample_from_array",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::default",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::architect",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::foreman",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::worker",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::new",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::register_strategy",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::should_sample",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::record_sample",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::get_samples_for_validation",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::sample_from_array",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::default",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::architect",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::foreman",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::worker",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::new",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::register_strategy",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::should_sample",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::record_sample",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::get_samples_for_validation",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::sample_from_array",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::default",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::architect",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::foreman",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::worker",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::new",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::register_strategy",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::should_sample",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::record_sample",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::get_samples_for_validation",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::sample_from_array",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::default",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::architect",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::foreman",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::worker",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::new",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::register_strategy",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::should_sample",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::record_sample",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::get_samples_for_validation",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::sample_from_array",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::default",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::architect",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::foreman",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::worker",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::new",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::register_strategy",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::should_sample",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::record_sample",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::get_samples_for_validation",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::sample_from_array",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::default",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::architect",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::foreman",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::worker",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::new",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::register_strategy",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::should_sample",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::record_sample",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::get_samples_for_validation",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::sample_from_array",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::default",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::architect",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::foreman",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::worker",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::new",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::register_strategy",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::should_sample",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::record_sample",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::get_samples_for_validation",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::sample_from_array",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::default",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::architect",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::foreman",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::worker",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::new",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::register_strategy",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::should_sample",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::record_sample",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::get_samples_for_validation",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::sample_from_array",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::default",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::architect",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::foreman",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::worker",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::new",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::register_strategy",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::should_sample",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::record_sample",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::get_samples_for_validation",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::sample_from_array",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::default",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::architect",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::foreman",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::worker",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::new",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::register_strategy",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::should_sample",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::record_sample",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::get_samples_for_validation",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::sample_from_array",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::default",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::architect",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::foreman",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::worker",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::new",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::register_strategy",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::should_sample",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::record_sample",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::get_samples_for_validation",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::sample_from_array",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/resources/src/sampling.rs::default",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::init",
        "to": "crates/wasm_classifier/src/lib.rs::init",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::classify",
        "to": "crates/wasm_classifier/src/lib.rs::init",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::run",
        "to": "crates/wasm_classifier/src/lib.rs::init",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::homeskillet_oa4_rs",
        "to": "crates/wasm_classifier/src/lib.rs::init",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::init",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::classify",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::run",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::homeskillet_oa4_rs",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::init",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::classify",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::run",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::homeskillet_oa4_rs",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::init",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::classify",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::run",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::homeskillet_oa4_rs",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::init",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::classify",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::run",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::homeskillet_oa4_rs",
        "to": "crates/mcp_server/src/transport/http.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::init",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::classify",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::run",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::homeskillet_oa4_rs",
        "to": "crates/mcp_server/src/transport/websocket.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::init",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::classify",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::run",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::homeskillet_oa4_rs",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::init",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::classify",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::run",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::homeskillet_oa4_rs",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::init",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::classify",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::run",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::homeskillet_oa4_rs",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::init",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::classify",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::run",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::homeskillet_oa4_rs",
        "to": "crates/orchestrator/src/types.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::init",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::classify",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::run",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::homeskillet_oa4_rs",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::init",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::classify",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::run",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::homeskillet_oa4_rs",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::init",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::classify",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::run",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::homeskillet_oa4_rs",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::init",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::classify",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::run",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::homeskillet_oa4_rs",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::init",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::classify",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::run",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::homeskillet_oa4_rs",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::init",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::classify",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::run",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::homeskillet_oa4_rs",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::init",
        "to": "tests/mocks/mod.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::classify",
        "to": "tests/mocks/mod.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::run",
        "to": "tests/mocks/mod.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::homeskillet_oa4_rs",
        "to": "tests/mocks/mod.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::init",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::classify",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::run",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::homeskillet_oa4_rs",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::init",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::classify",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::run",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::homeskillet_oa4_rs",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::init",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::classify",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::run",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::homeskillet_oa4_rs",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::init",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::classify",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::run",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::homeskillet_oa4_rs",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::init",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::classify",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::run",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::homeskillet_oa4_rs",
        "to": "crates/orchestrator/src/lib.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::init",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::classify",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::run",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::homeskillet_oa4_rs",
        "to": "crates/mcp_server/src/transport/stdio.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::init",
        "to": "tests/mocks/mod.rs::send",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::classify",
        "to": "tests/mocks/mod.rs::send",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::run",
        "to": "tests/mocks/mod.rs::send",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::homeskillet_oa4_rs",
        "to": "tests/mocks/mod.rs::send",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::init",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::classify",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::run",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::homeskillet_oa4_rs",
        "to": "crates/orchestrator/src/types.rs::run",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::init",
        "to": "crates/orchestrator/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::classify",
        "to": "crates/orchestrator/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::run",
        "to": "crates/orchestrator/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::homeskillet_oa4_rs",
        "to": "crates/orchestrator/src/lib.rs::classify",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::init",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::classify",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::run",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::homeskillet_oa4_rs",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::init",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::classify",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::run",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::homeskillet_oa4_rs",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::init",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::classify",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::run",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::homeskillet_oa4_rs",
        "to": "crates/harpoon-core/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::init",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::classify",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::run",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/pyffi/src/lib.rs::homeskillet_oa4_rs",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/wasm_classifier/src/lib.rs::classify_task",
        "to": "crates/pyffi/src/lib.rs::init",
        "type": "calls"
      },
      {
        "from": "crates/wasm_classifier/src/lib.rs::get_version",
        "to": "crates/pyffi/src/lib.rs::init",
        "type": "calls"
      },
      {
        "from": "crates/wasm_classifier/src/lib.rs::init",
        "to": "crates/pyffi/src/lib.rs::init",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_absorbed",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_pending",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_events",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_iterations",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_anchors",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new_native",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_native_cycle",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_thread_count",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::extract_bound",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::to_report",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from_data",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_cycle",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_anchor_hash",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::detect_language",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_indent_balance",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_comment_ratio",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::body_len",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::event",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_prev",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_next",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iteration_index",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::absorbed",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::pending",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::events",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iterations",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchors",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::threads",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::harpoon_core",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::serde_json_to_py",
        "to": "crates/orchestrator/src/config.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_absorbed",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_pending",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_events",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_iterations",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_anchors",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new_native",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_native_cycle",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_thread_count",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::extract_bound",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::to_report",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from_data",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_cycle",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_anchor_hash",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::detect_language",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_indent_balance",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_comment_ratio",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::body_len",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::event",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_prev",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_next",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iteration_index",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::absorbed",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::pending",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::events",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iterations",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchors",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::threads",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::harpoon_core",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::serde_json_to_py",
        "to": "crates/orchestrator/src/metrics.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_absorbed",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_pending",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_events",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_iterations",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_anchors",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new_native",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_native_cycle",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_thread_count",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::extract_bound",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::to_report",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from_data",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_cycle",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_anchor_hash",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::detect_language",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_indent_balance",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_comment_ratio",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::body_len",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::event",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_prev",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_next",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iteration_index",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::absorbed",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::pending",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::events",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iterations",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchors",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::threads",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::harpoon_core",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::serde_json_to_py",
        "to": "crates/orchestrator/src/config.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_absorbed",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_pending",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_events",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_iterations",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_anchors",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new_native",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_native_cycle",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_thread_count",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::extract_bound",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::to_report",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from_data",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_cycle",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_anchor_hash",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::detect_language",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_indent_balance",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_comment_ratio",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::body_len",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::event",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_prev",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_next",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iteration_index",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::absorbed",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::pending",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::events",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iterations",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchors",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::threads",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::harpoon_core",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::serde_json_to_py",
        "to": "crates/harpoon_bridge/src/fusion.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_absorbed",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_pending",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_events",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_iterations",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_anchors",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new_native",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_native_cycle",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_thread_count",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::extract_bound",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::to_report",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from_data",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_cycle",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_anchor_hash",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::detect_language",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_indent_balance",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_comment_ratio",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::body_len",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::event",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_prev",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_next",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iteration_index",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::absorbed",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::pending",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::events",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iterations",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchors",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::threads",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::harpoon_core",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::serde_json_to_py",
        "to": "crates/orchestrator/src/hosted_ai.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_absorbed",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_pending",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_events",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_iterations",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_anchors",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new_native",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_native_cycle",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_thread_count",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::extract_bound",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::to_report",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from_data",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_cycle",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_anchor_hash",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::detect_language",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_indent_balance",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_comment_ratio",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::body_len",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::event",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_prev",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_next",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iteration_index",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::absorbed",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::pending",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::events",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iterations",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchors",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::threads",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::harpoon_core",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::serde_json_to_py",
        "to": "crates/service/src/auth/github_oauth.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_absorbed",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_pending",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_events",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_iterations",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_anchors",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new_native",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_native_cycle",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_thread_count",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::extract_bound",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::to_report",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from_data",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_cycle",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_anchor_hash",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::detect_language",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_indent_balance",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_comment_ratio",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::body_len",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::event",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_prev",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_next",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iteration_index",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::absorbed",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::pending",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::events",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iterations",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchors",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::threads",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::harpoon_core",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::serde_json_to_py",
        "to": "crates/harpoon_bridge/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_absorbed",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_pending",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_events",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_iterations",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_anchors",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new_native",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_native_cycle",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_thread_count",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::extract_bound",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::to_report",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from_data",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_cycle",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_anchor_hash",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::detect_language",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_indent_balance",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_comment_ratio",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::body_len",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::event",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_prev",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_next",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iteration_index",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::absorbed",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::pending",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::events",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iterations",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchors",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::threads",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::harpoon_core",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::serde_json_to_py",
        "to": "crates/harpoon_bridge/src/covenant.rs::build",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_absorbed",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_pending",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_events",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_iterations",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_anchors",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new_native",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_native_cycle",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_thread_count",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::extract_bound",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::to_report",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from_data",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_cycle",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_anchor_hash",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::detect_language",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_indent_balance",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_comment_ratio",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::body_len",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::event",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_prev",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_next",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iteration_index",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::absorbed",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::pending",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::events",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iterations",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchors",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::threads",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::harpoon_core",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::serde_json_to_py",
        "to": "crates/service/src/mock_engine.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_absorbed",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_pending",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_events",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_iterations",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_anchors",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new_native",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_native_cycle",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_thread_count",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::extract_bound",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::to_report",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from_data",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_cycle",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_anchor_hash",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::detect_language",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_indent_balance",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_comment_ratio",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::body_len",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::event",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_prev",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_next",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iteration_index",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::absorbed",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::pending",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::events",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iterations",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchors",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::threads",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::harpoon_core",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::serde_json_to_py",
        "to": "crates/orchestrator/src/tenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_absorbed",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_pending",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_events",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_iterations",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_anchors",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new_native",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_native_cycle",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_thread_count",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::extract_bound",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::to_report",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from_data",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_cycle",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_anchor_hash",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::detect_language",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_indent_balance",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_comment_ratio",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::body_len",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::event",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_prev",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_next",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iteration_index",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::absorbed",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::pending",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::events",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iterations",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchors",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::threads",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::harpoon_core",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::serde_json_to_py",
        "to": "crates/mcp_server/src/transport/websocket.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_absorbed",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_pending",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_events",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_iterations",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_anchors",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new_native",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_native_cycle",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_thread_count",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::extract_bound",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::to_report",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from_data",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_cycle",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_anchor_hash",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::detect_language",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_indent_balance",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_comment_ratio",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::body_len",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::event",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_prev",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_next",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iteration_index",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::absorbed",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::pending",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::events",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iterations",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchors",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::threads",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::harpoon_core",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::serde_json_to_py",
        "to": "crates/mcp_server/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_absorbed",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_pending",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_events",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_iterations",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_anchors",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new_native",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_native_cycle",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_thread_count",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::extract_bound",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::to_report",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from_data",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_cycle",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_anchor_hash",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::detect_language",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_indent_balance",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_comment_ratio",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::body_len",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::event",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_prev",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_next",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iteration_index",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::absorbed",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::pending",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::events",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iterations",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchors",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::threads",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::harpoon_core",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::serde_json_to_py",
        "to": "crates/mcp_server/src/transport/http.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_absorbed",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_pending",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_events",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_iterations",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_anchors",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new_native",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_native_cycle",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_thread_count",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::extract_bound",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::to_report",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from_data",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_cycle",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_anchor_hash",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::detect_language",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_indent_balance",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_comment_ratio",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::body_len",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::event",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_prev",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_next",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iteration_index",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::absorbed",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::pending",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::events",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iterations",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchors",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::threads",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::harpoon_core",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::serde_json_to_py",
        "to": "crates/engine_pymlx/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_absorbed",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_pending",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_events",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_iterations",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_anchors",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new_native",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_native_cycle",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_thread_count",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::extract_bound",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::to_report",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from_data",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_cycle",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_anchor_hash",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::detect_language",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_indent_balance",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_comment_ratio",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::body_len",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::event",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_prev",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_next",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iteration_index",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::absorbed",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::pending",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::events",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iterations",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchors",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::threads",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::harpoon_core",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::serde_json_to_py",
        "to": "crates/resources/src/sampling.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_absorbed",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_pending",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_events",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_iterations",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_anchors",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new_native",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_native_cycle",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_thread_count",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::extract_bound",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::to_report",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from_data",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_cycle",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_anchor_hash",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::detect_language",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_indent_balance",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_comment_ratio",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::body_len",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::event",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_prev",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_next",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iteration_index",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::absorbed",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::pending",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::events",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iterations",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchors",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::threads",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::harpoon_core",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::serde_json_to_py",
        "to": "crates/orchestrator/src/types.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_absorbed",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_pending",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_events",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_iterations",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_anchors",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new_native",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_native_cycle",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_thread_count",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::extract_bound",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::to_report",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from_data",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_cycle",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_anchor_hash",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::detect_language",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_indent_balance",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_comment_ratio",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::body_len",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::event",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_prev",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_next",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iteration_index",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::absorbed",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::pending",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::events",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iterations",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchors",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::threads",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::harpoon_core",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::serde_json_to_py",
        "to": "crates/mcp_server/src/cli.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_absorbed",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_pending",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_events",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_iterations",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_anchors",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new_native",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_native_cycle",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_thread_count",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::extract_bound",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::to_report",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from_data",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_cycle",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_anchor_hash",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::detect_language",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_indent_balance",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_comment_ratio",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::body_len",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::event",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_prev",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_next",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iteration_index",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::absorbed",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::pending",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::events",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iterations",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchors",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::threads",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::harpoon_core",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::serde_json_to_py",
        "to": "tests/mocks/mod.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_absorbed",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_pending",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_events",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_iterations",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_anchors",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new_native",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_native_cycle",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_thread_count",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::extract_bound",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::to_report",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from_data",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_cycle",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_anchor_hash",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::detect_language",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_indent_balance",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_comment_ratio",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::body_len",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::event",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_prev",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_next",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iteration_index",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::absorbed",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::pending",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::events",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iterations",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchors",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::threads",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::harpoon_core",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::serde_json_to_py",
        "to": "crates/resources/src/sampling.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_absorbed",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_pending",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_events",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_iterations",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_anchors",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new_native",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_native_cycle",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_thread_count",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::extract_bound",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::to_report",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from_data",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_cycle",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_anchor_hash",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::detect_language",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_indent_balance",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_comment_ratio",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::body_len",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::event",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_prev",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_next",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iteration_index",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::absorbed",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::pending",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::events",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iterations",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchors",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::threads",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::harpoon_core",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::serde_json_to_py",
        "to": "crates/orchestrator/src/lib.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_absorbed",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_pending",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_events",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_iterations",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_anchors",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new_native",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_native_cycle",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_thread_count",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::extract_bound",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::to_report",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from_data",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_cycle",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_anchor_hash",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::detect_language",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_indent_balance",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_comment_ratio",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::body_len",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::event",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_prev",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_next",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iteration_index",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::absorbed",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::pending",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::events",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iterations",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchors",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::threads",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::harpoon_core",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::serde_json_to_py",
        "to": "crates/mcp_server/src/transport/stdio.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_absorbed",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_pending",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_events",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_iterations",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_anchors",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new_native",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_native_cycle",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_thread_count",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::extract_bound",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::to_report",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from_data",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_cycle",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_anchor_hash",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::detect_language",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_indent_balance",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_comment_ratio",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::body_len",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::event",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_prev",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_next",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iteration_index",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::absorbed",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::pending",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::events",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iterations",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchors",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::threads",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::harpoon_core",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::serde_json_to_py",
        "to": "crates/orchestrator/src/config.rs::default",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_absorbed",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_pending",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_events",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_iterations",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::get_anchors",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::as_dict",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new_native",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_native_cycle",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_thread_count",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::envelope_cycle",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fragment_hash",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::extract_bound",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::to_report",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::from_data",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::new",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_states",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::thread_count",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::run_cycle",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_anchor_hash",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_fingerprint",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::detect_language",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_indent_balance",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::compute_comment_ratio",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::body_len",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::event",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::path",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::idx",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::lines",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hash",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::hygiene_score",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_prev",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchor_next",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::language",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::fingerprint",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iteration_index",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::absorbed",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::pending",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::events",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::iterations",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::anchors",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::threads",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::configured_threads",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::harpoon_core",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      },
      {
        "from": "crates/harpoon-core/src/lib.rs::serde_json_to_py",
        "to": "crates/harpoon_bridge/src/covenant.rs::new",
        "type": "calls"
      }
    ]
  }
}