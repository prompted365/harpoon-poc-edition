{
  "version": "0.2.0",
  "repo": {
    "root": ".",
    "hash": "git:3e585a74cdc393f0026750554d139bececbf70ce"
  },
  "tree": [
    {
      "id": "file:qoq.manifest.json",
      "kind": "file",
      "size": 362908
    },
    {
      "id": "file:Cargo.toml",
      "kind": "file",
      "size": 1272
    },
    {
      "id": "file:qoq.manifest.schema.json",
      "kind": "file",
      "size": 834
    },
    {
      "id": "file:.DS_Store",
      "kind": "file",
      "size": 6148
    },
    {
      "id": "file:SETUP.md",
      "kind": "file",
      "size": 5043
    },
    {
      "id": "file:.pre-commit-config.yaml",
      "kind": "file",
      "size": 629
    },
    {
      "id": "file:Dockerfile",
      "kind": "file",
      "size": 1207
    },
    {
      "id": "file:Makefile",
      "kind": "file",
      "size": 2927
    },
    {
      "id": "file:Cargo.lock",
      "kind": "file",
      "size": 120221
    },
    {
      "id": "file:HOSTED_AI_README.md",
      "kind": "file",
      "size": 14466
    },
    {
      "id": "file:AUDIT_REPORT_DEZ.md",
      "kind": "file",
      "size": 5180
    },
    {
      "id": "file:README.md",
      "kind": "file",
      "size": 10035
    },
    {
      "id": "file:.gitignore",
      "kind": "file",
      "size": 905
    },
    {
      "id": "file:DEPLOYMENT.md",
      "kind": "file",
      "size": 5555
    },
    {
      "id": "file:INTEGRATION_MATRIX.md",
      "kind": "file",
      "size": 3904
    },
    {
      "id": "file:config.example.yaml",
      "kind": "file",
      "size": 1342
    },
    {
      "id": "file:docker-compose.yml",
      "kind": "file",
      "size": 1346
    },
    {
      "id": "file:AUDIT_REPORT_ABC.md",
      "kind": "file",
      "size": 5046
    },
    {
      "id": "file:.env.example",
      "kind": "file",
      "size": 921
    },
    {
      "id": "file:INTEGRATION_COVENANT.md",
      "kind": "file",
      "size": 7112
    },
    {
      "id": "file:CLAUDE.md",
      "kind": "file",
      "size": 3100
    },
    {
      "id": "dir:crates",
      "kind": "dir"
    },
    {
      "id": "file:crates/.DS_Store",
      "kind": "file",
      "size": 6148
    },
    {
      "id": "dir:crates/harpoon-core",
      "kind": "dir"
    },
    {
      "id": "file:crates/harpoon-core/Cargo.toml",
      "kind": "file",
      "size": 1005
    },
    {
      "id": "file:crates/harpoon-core/Cargo.lock",
      "kind": "file",
      "size": 18630
    },
    {
      "id": "file:crates/harpoon-core/README.md",
      "kind": "file",
      "size": 8262
    },
    {
      "id": "dir:crates/harpoon-core/src",
      "kind": "dir"
    },
    {
      "id": "file:crates/harpoon-core/src/lib.rs",
      "kind": "file",
      "size": 20507
    },
    {
      "id": "dir:crates/wasm_classifier",
      "kind": "dir"
    },
    {
      "id": "file:crates/wasm_classifier/Cargo.toml",
      "kind": "file",
      "size": 400
    },
    {
      "id": "file:crates/wasm_classifier/README.md",
      "kind": "file",
      "size": 12074
    },
    {
      "id": "dir:crates/wasm_classifier/pkg",
      "kind": "dir"
    },
    {
      "id": "file:crates/wasm_classifier/pkg/wasm_classifier_bg.wasm",
      "kind": "file",
      "size": 50230
    },
    {
      "id": "file:crates/wasm_classifier/pkg/wasm_classifier.js",
      "kind": "file",
      "size": 7065
    },
    {
      "id": "file:crates/wasm_classifier/pkg/wasm_classifier.d.ts",
      "kind": "file",
      "size": 1628
    },
    {
      "id": "file:crates/wasm_classifier/pkg/.gitignore",
      "kind": "file",
      "size": 1
    },
    {
      "id": "file:crates/wasm_classifier/pkg/package.json",
      "kind": "file",
      "size": 312
    },
    {
      "id": "file:crates/wasm_classifier/pkg/wasm_classifier_bg.wasm.d.ts",
      "kind": "file",
      "size": 479
    },
    {
      "id": "dir:crates/wasm_classifier/src",
      "kind": "dir"
    },
    {
      "id": "file:crates/wasm_classifier/src/lib.rs",
      "kind": "file",
      "size": 3239
    },
    {
      "id": "dir:crates/pyffi",
      "kind": "dir"
    },
    {
      "id": "file:crates/pyffi/Cargo.toml",
      "kind": "file",
      "size": 454
    },
    {
      "id": "file:crates/pyffi/pyproject.toml",
      "kind": "file",
      "size": 453
    },
    {
      "id": "file:crates/pyffi/README.md",
      "kind": "file",
      "size": 12843
    },
    {
      "id": "dir:crates/pyffi/src",
      "kind": "dir"
    },
    {
      "id": "file:crates/pyffi/src/lib.rs",
      "kind": "file",
      "size": 2179
    },
    {
      "id": "dir:crates/resources",
      "kind": "dir"
    },
    {
      "id": "file:crates/resources/Cargo.toml",
      "kind": "file",
      "size": 431
    },
    {
      "id": "file:crates/resources/README.md",
      "kind": "file",
      "size": 15367
    },
    {
      "id": "dir:crates/resources/src",
      "kind": "dir"
    },
    {
      "id": "file:crates/resources/src/prompts.rs",
      "kind": "file",
      "size": 112
    },
    {
      "id": "file:crates/resources/src/tools.rs",
      "kind": "file",
      "size": 101
    },
    {
      "id": "file:crates/resources/src/lib.rs",
      "kind": "file",
      "size": 6061
    },
    {
      "id": "file:crates/resources/src/sampling.rs",
      "kind": "file",
      "size": 6924
    },
    {
      "id": "file:crates/resources/src/schemas.rs",
      "kind": "file",
      "size": 122
    },
    {
      "id": "dir:crates/resources/src/tools",
      "kind": "dir"
    },
    {
      "id": "file:crates/resources/src/tools/covenant.rs",
      "kind": "file",
      "size": 1622
    },
    {
      "id": "file:crates/resources/src/tools/mlx.rs",
      "kind": "file",
      "size": 3510
    },
    {
      "id": "file:crates/resources/src/tools/github.rs",
      "kind": "file",
      "size": 4197
    },
    {
      "id": "file:crates/resources/src/tools/fusion.rs",
      "kind": "file",
      "size": 1846
    },
    {
      "id": "dir:crates/resources/src/schemas",
      "kind": "dir"
    },
    {
      "id": "file:crates/resources/src/schemas/covenant.rs",
      "kind": "file",
      "size": 5397
    },
    {
      "id": "file:crates/resources/src/schemas/strike.rs",
      "kind": "file",
      "size": 2919
    },
    {
      "id": "file:crates/resources/src/schemas/agent.rs",
      "kind": "file",
      "size": 5710
    },
    {
      "id": "file:crates/resources/src/schemas/fusion.rs",
      "kind": "file",
      "size": 1954
    },
    {
      "id": "dir:crates/resources/src/prompts",
      "kind": "dir"
    },
    {
      "id": "file:crates/resources/src/prompts/covenant.rs",
      "kind": "file",
      "size": 2924
    },
    {
      "id": "file:crates/resources/src/prompts/strike.rs",
      "kind": "file",
      "size": 3045
    },
    {
      "id": "file:crates/resources/src/prompts/agent.rs",
      "kind": "file",
      "size": 2426
    },
    {
      "id": "file:crates/resources/src/prompts/fusion.rs",
      "kind": "file",
      "size": 1569
    },
    {
      "id": "dir:crates/engine_pymlx",
      "kind": "dir"
    },
    {
      "id": "file:crates/engine_pymlx/Cargo.toml",
      "kind": "file",
      "size": 202
    },
    {
      "id": "file:crates/engine_pymlx/README.md",
      "kind": "file",
      "size": 7325
    },
    {
      "id": "dir:crates/engine_pymlx/src",
      "kind": "dir"
    },
    {
      "id": "file:crates/engine_pymlx/src/lib.rs",
      "kind": "file",
      "size": 2634
    },
    {
      "id": "dir:crates/service",
      "kind": "dir"
    },
    {
      "id": "file:crates/service/Cargo.toml",
      "kind": "file",
      "size": 537
    },
    {
      "id": "file:crates/service/README.md",
      "kind": "file",
      "size": 9966
    },
    {
      "id": "dir:crates/service/src",
      "kind": "dir"
    },
    {
      "id": "file:crates/service/src/config.rs",
      "kind": "file",
      "size": 3275
    },
    {
      "id": "file:crates/service/src/mock_engine.rs",
      "kind": "file",
      "size": 711
    },
    {
      "id": "file:crates/service/src/main.rs",
      "kind": "file",
      "size": 6665
    },
    {
      "id": "dir:crates/service/src/auth",
      "kind": "dir"
    },
    {
      "id": "file:crates/service/src/auth/github_oauth.rs",
      "kind": "file",
      "size": 4657
    },
    {
      "id": "file:crates/service/src/auth/mod.rs",
      "kind": "file",
      "size": 21
    },
    {
      "id": "dir:crates/mcp_server",
      "kind": "dir"
    },
    {
      "id": "file:crates/mcp_server/Cargo.toml",
      "kind": "file",
      "size": 1079
    },
    {
      "id": "file:crates/mcp_server/README.md",
      "kind": "file",
      "size": 11348
    },
    {
      "id": "dir:crates/mcp_server/src",
      "kind": "dir"
    },
    {
      "id": "file:crates/mcp_server/src/handlers.rs",
      "kind": "file",
      "size": 10597
    },
    {
      "id": "file:crates/mcp_server/src/protocol.rs",
      "kind": "file",
      "size": 2190
    },
    {
      "id": "file:crates/mcp_server/src/transport.rs",
      "kind": "file",
      "size": 86
    },
    {
      "id": "file:crates/mcp_server/src/lib.rs",
      "kind": "file",
      "size": 9236
    },
    {
      "id": "file:crates/mcp_server/src/cli.rs",
      "kind": "file",
      "size": 4269
    },
    {
      "id": "dir:crates/mcp_server/src/transport",
      "kind": "dir"
    },
    {
      "id": "file:crates/mcp_server/src/transport/websocket.rs",
      "kind": "file",
      "size": 7230
    },
    {
      "id": "file:crates/mcp_server/src/transport/stdio.rs",
      "kind": "file",
      "size": 3192
    },
    {
      "id": "file:crates/mcp_server/src/transport/http.rs",
      "kind": "file",
      "size": 4434
    },
    {
      "id": "dir:crates/harpoon_bridge",
      "kind": "dir"
    },
    {
      "id": "file:crates/harpoon_bridge/Cargo.toml",
      "kind": "file",
      "size": 616
    },
    {
      "id": "file:crates/harpoon_bridge/README.md",
      "kind": "file",
      "size": 9405
    },
    {
      "id": "dir:crates/harpoon_bridge/src",
      "kind": "dir"
    },
    {
      "id": "file:crates/harpoon_bridge/src/covenant.rs",
      "kind": "file",
      "size": 4897
    },
    {
      "id": "file:crates/harpoon_bridge/src/strike.rs",
      "kind": "file",
      "size": 5879
    },
    {
      "id": "file:crates/harpoon_bridge/src/lib.rs",
      "kind": "file",
      "size": 7573
    },
    {
      "id": "file:crates/harpoon_bridge/src/fusion.rs",
      "kind": "file",
      "size": 4072
    },
    {
      "id": "dir:crates/orchestrator",
      "kind": "dir"
    },
    {
      "id": "file:crates/orchestrator/Cargo.toml",
      "kind": "file",
      "size": 869
    },
    {
      "id": "file:crates/orchestrator/README.md",
      "kind": "file",
      "size": 7720
    },
    {
      "id": "dir:crates/orchestrator/src",
      "kind": "dir"
    },
    {
      "id": "file:crates/orchestrator/src/types.rs",
      "kind": "file",
      "size": 3238
    },
    {
      "id": "file:crates/orchestrator/src/lib.rs",
      "kind": "file",
      "size": 7004
    },
    {
      "id": "file:crates/orchestrator/src/hosted_ai.rs",
      "kind": "file",
      "size": 4915
    },
    {
      "id": "dir:web-ui",
      "kind": "dir"
    },
    {
      "id": "file:web-ui/tailwind.config.js",
      "kind": "file",
      "size": 252
    },
    {
      "id": "file:web-ui/next.config.js",
      "kind": "file",
      "size": 258
    },
    {
      "id": "file:web-ui/package.json",
      "kind": "file",
      "size": 598
    },
    {
      "id": "file:web-ui/tsconfig.json",
      "kind": "file",
      "size": 637
    },
    {
      "id": "file:web-ui/.env.example",
      "kind": "file",
      "size": 491
    },
    {
      "id": "file:web-ui/postcss.config.js",
      "kind": "file",
      "size": 81
    },
    {
      "id": "dir:web-ui/app",
      "kind": "dir"
    },
    {
      "id": "file:web-ui/app/layout.tsx",
      "kind": "file",
      "size": 431
    },
    {
      "id": "file:web-ui/app/page.tsx",
      "kind": "file",
      "size": 1267
    },
    {
      "id": "file:web-ui/app/globals.css",
      "kind": "file",
      "size": 373
    },
    {
      "id": "dir:web-ui/app/api",
      "kind": "dir"
    },
    {
      "id": "dir:web-ui/app/api/github",
      "kind": "dir"
    },
    {
      "id": "dir:web-ui/app/api/github/me",
      "kind": "dir"
    },
    {
      "id": "file:web-ui/app/api/github/me/route.ts",
      "kind": "file",
      "size": 1006
    },
    {
      "id": "dir:web-ui/app/api/github/device",
      "kind": "dir"
    },
    {
      "id": "dir:web-ui/app/api/github/device/start",
      "kind": "dir"
    },
    {
      "id": "file:web-ui/app/api/github/device/start/route.ts",
      "kind": "file",
      "size": 1417
    },
    {
      "id": "dir:web-ui/app/api/github/device/poll",
      "kind": "dir"
    },
    {
      "id": "file:web-ui/app/api/github/device/poll/route.ts",
      "kind": "file",
      "size": 2034
    },
    {
      "id": "dir:web-ui/components",
      "kind": "dir"
    },
    {
      "id": "file:web-ui/components/McpClientProvider.tsx",
      "kind": "file",
      "size": 4317
    },
    {
      "id": "file:web-ui/components/QoQViewer.tsx",
      "kind": "file",
      "size": 3684
    },
    {
      "id": "file:web-ui/components/ConnectForm.tsx",
      "kind": "file",
      "size": 1809
    },
    {
      "id": "file:web-ui/components/ToolList.tsx",
      "kind": "file",
      "size": 3181
    },
    {
      "id": "file:web-ui/components/GitHubAuth.tsx",
      "kind": "file",
      "size": 3341
    },
    {
      "id": "file:web-ui/components/SessionLog.tsx",
      "kind": "file",
      "size": 1451
    },
    {
      "id": "dir:web-ui/lib",
      "kind": "dir"
    },
    {
      "id": "dir:tests",
      "kind": "dir"
    },
    {
      "id": "file:tests/test_config.yaml",
      "kind": "file",
      "size": 946
    },
    {
      "id": "dir:tests/mocks",
      "kind": "dir"
    },
    {
      "id": "file:tests/mocks/mod.rs",
      "kind": "file",
      "size": 5763
    },
    {
      "id": "dir:tests/integration",
      "kind": "dir"
    },
    {
      "id": "file:tests/integration/qoq_integration_test.rs",
      "kind": "file",
      "size": 3371
    },
    {
      "id": "file:tests/integration/wasm_classifier_test.rs",
      "kind": "file",
      "size": 2931
    },
    {
      "id": "file:tests/integration/websocket_mcp_test.rs",
      "kind": "file",
      "size": 5948
    },
    {
      "id": "file:tests/integration/covenant_cocreation_test.rs",
      "kind": "file",
      "size": 13624
    },
    {
      "id": "file:tests/integration/hosted_ai_test.rs",
      "kind": "file",
      "size": 3351
    },
    {
      "id": "file:tests/integration/github_oauth_test.rs",
      "kind": "file",
      "size": 2563
    },
    {
      "id": "dir:tests/e2e",
      "kind": "dir"
    },
    {
      "id": "file:tests/e2e/full_system_test.rs",
      "kind": "file",
      "size": 10245
    },
    {
      "id": "dir:docs",
      "kind": "dir"
    },
    {
      "id": "dir:docs/analysis",
      "kind": "dir"
    },
    {
      "id": "file:docs/analysis/network_graph.png",
      "kind": "file",
      "size": 9399576
    },
    {
      "id": "file:docs/analysis/network_graph_self_organized.png",
      "kind": "file",
      "size": 15984638
    },
    {
      "id": "file:docs/analysis/crate_overview.png",
      "kind": "file",
      "size": 621455
    },
    {
      "id": "file:docs/analysis/call_graph.md",
      "kind": "file",
      "size": 280843
    },
    {
      "id": "file:docs/analysis/README.md",
      "kind": "file",
      "size": 19573
    },
    {
      "id": "file:docs/analysis/crate_story_diagram.png",
      "kind": "file",
      "size": 887052
    },
    {
      "id": "file:docs/analysis/call_hierarchy.png",
      "kind": "file",
      "size": 8741762
    },
    {
      "id": "file:docs/analysis/codebase_analysis.json",
      "kind": "file",
      "size": 580035
    },
    {
      "id": "dir:.cargo",
      "kind": "dir"
    },
    {
      "id": "file:.cargo/config.toml",
      "kind": "file",
      "size": 284
    },
    {
      "id": "dir:scripts",
      "kind": "dir"
    },
    {
      "id": "file:scripts/launch.sh",
      "kind": "file",
      "size": 3970
    },
    {
      "id": "file:scripts/qoq_emit.py",
      "kind": "file",
      "size": 3814
    },
    {
      "id": "file:scripts/analyze_codebase_simple.py",
      "kind": "file",
      "size": 20900
    },
    {
      "id": "file:scripts/README.md",
      "kind": "file",
      "size": 4388
    },
    {
      "id": "file:scripts/run_tests.sh",
      "kind": "file",
      "size": 1090
    },
    {
      "id": "file:scripts/generate_network_graph.py",
      "kind": "file",
      "size": 53780
    },
    {
      "id": "file:scripts/deploy-hosted.sh",
      "kind": "file",
      "size": 1388
    },
    {
      "id": "file:scripts/test.sh",
      "kind": "file",
      "size": 3156
    },
    {
      "id": "file:scripts/analyze_codebase.py",
      "kind": "file",
      "size": 18156
    },
    {
      "id": "dir:.github",
      "kind": "dir"
    },
    {
      "id": "dir:.github/workflows",
      "kind": "dir"
    },
    {
      "id": "file:.github/workflows/claude-code-review.yml",
      "kind": "file",
      "size": 3039
    },
    {
      "id": "file:.github/workflows/claude.yml",
      "kind": "file",
      "size": 2309
    },
    {
      "id": "dir:ubiquity-harpoon",
      "kind": "dir"
    },
    {
      "id": "file:ubiquity-harpoon/rxconfig.py",
      "kind": "file",
      "size": 97
    },
    {
      "id": "file:ubiquity-harpoon/requirements.txt",
      "kind": "file",
      "size": 142
    },
    {
      "id": "file:ubiquity-harpoon/README.md",
      "kind": "file",
      "size": 4535
    },
    {
      "id": "file:ubiquity-harpoon/.gitignore",
      "kind": "file",
      "size": 65
    },
    {
      "id": "file:ubiquity-harpoon/README_PATCH_NOTES.md",
      "kind": "file",
      "size": 1541
    },
    {
      "id": "dir:ubiquity-harpoon/app",
      "kind": "dir"
    },
    {
      "id": "file:ubiquity-harpoon/app/__init__.py",
      "kind": "file",
      "size": 31
    },
    {
      "id": "file:ubiquity-harpoon/app/app.py",
      "kind": "file",
      "size": 1582
    },
    {
      "id": "file:ubiquity-harpoon/app/state.py",
      "kind": "file",
      "size": 13358
    },
    {
      "id": "dir:ubiquity-harpoon/app/exchange",
      "kind": "dir"
    },
    {
      "id": "file:ubiquity-harpoon/app/exchange/__init__.py",
      "kind": "file",
      "size": 35
    },
    {
      "id": "file:ubiquity-harpoon/app/exchange/engine.py",
      "kind": "file",
      "size": 1812
    },
    {
      "id": "dir:ubiquity-harpoon/app/ledger",
      "kind": "dir"
    },
    {
      "id": "file:ubiquity-harpoon/app/ledger/__init__.py",
      "kind": "file",
      "size": 0
    },
    {
      "id": "file:ubiquity-harpoon/app/ledger/oracle.py",
      "kind": "file",
      "size": 1256
    },
    {
      "id": "dir:ubiquity-harpoon/app/components",
      "kind": "dir"
    },
    {
      "id": "file:ubiquity-harpoon/app/components/status_badge.py",
      "kind": "file",
      "size": 614
    },
    {
      "id": "file:ubiquity-harpoon/app/components/navbar.py",
      "kind": "file",
      "size": 896
    },
    {
      "id": "file:ubiquity-harpoon/app/components/__init__.py",
      "kind": "file",
      "size": 0
    },
    {
      "id": "file:ubiquity-harpoon/app/components/footer.py",
      "kind": "file",
      "size": 306
    },
    {
      "id": "dir:ubiquity-harpoon/app/db",
      "kind": "dir"
    },
    {
      "id": "file:ubiquity-harpoon/app/db/models.py",
      "kind": "file",
      "size": 2560
    },
    {
      "id": "file:ubiquity-harpoon/app/db/__init__.py",
      "kind": "file",
      "size": 0
    },
    {
      "id": "dir:ubiquity-harpoon/app/api",
      "kind": "dir"
    },
    {
      "id": "file:ubiquity-harpoon/app/api/metrics.py",
      "kind": "file",
      "size": 597
    },
    {
      "id": "file:ubiquity-harpoon/app/api/webhook.py",
      "kind": "file",
      "size": 1989
    },
    {
      "id": "file:ubiquity-harpoon/app/api/__init__.py",
      "kind": "file",
      "size": 0
    },
    {
      "id": "file:ubiquity-harpoon/app/api/covenant.py",
      "kind": "file",
      "size": 1470
    },
    {
      "id": "file:ubiquity-harpoon/app/api/fusion.py",
      "kind": "file",
      "size": 3644
    },
    {
      "id": "file:ubiquity-harpoon/app/api/ledger_read.py",
      "kind": "file",
      "size": 2037
    },
    {
      "id": "file:ubiquity-harpoon/app/api/main.py",
      "kind": "file",
      "size": 1366
    },
    {
      "id": "dir:ubiquity-harpoon/app/templates",
      "kind": "dir"
    },
    {
      "id": "file:ubiquity-harpoon/app/templates/Plockfile.yaml.j2",
      "kind": "file",
      "size": 231
    },
    {
      "id": "file:ubiquity-harpoon/app/templates/pr_template.md",
      "kind": "file",
      "size": 264
    },
    {
      "id": "file:ubiquity-harpoon/app/templates/ubq_anchor.toml.j2",
      "kind": "file",
      "size": 512
    },
    {
      "id": "file:ubiquity-harpoon/app/templates/ubq_agno.toml.j2",
      "kind": "file",
      "size": 501
    },
    {
      "id": "dir:ubiquity-harpoon/app/templates/workflows",
      "kind": "dir"
    },
    {
      "id": "file:ubiquity-harpoon/app/templates/workflows/ubq-receipts.yml",
      "kind": "file",
      "size": 1427
    },
    {
      "id": "dir:ubiquity-harpoon/app/psi",
      "kind": "dir"
    },
    {
      "id": "file:ubiquity-harpoon/app/psi/observer.py",
      "kind": "file",
      "size": 522
    },
    {
      "id": "file:ubiquity-harpoon/app/psi/instance.py",
      "kind": "file",
      "size": 54
    },
    {
      "id": "file:ubiquity-harpoon/app/psi/__init__.py",
      "kind": "file",
      "size": 30
    },
    {
      "id": "file:ubiquity-harpoon/app/psi/psi_node.py",
      "kind": "file",
      "size": 2578
    },
    {
      "id": "dir:ubiquity-harpoon/app/pages",
      "kind": "dir"
    },
    {
      "id": "file:ubiquity-harpoon/app/pages/strike.py",
      "kind": "file",
      "size": 4044
    },
    {
      "id": "file:ubiquity-harpoon/app/pages/index.py",
      "kind": "file",
      "size": 2599
    },
    {
      "id": "file:ubiquity-harpoon/app/pages/ledger.py",
      "kind": "file",
      "size": 3529
    },
    {
      "id": "file:ubiquity-harpoon/app/pages/__init__.py",
      "kind": "file",
      "size": 0
    },
    {
      "id": "file:ubiquity-harpoon/app/pages/review.py",
      "kind": "file",
      "size": 3750
    },
    {
      "id": "file:ubiquity-harpoon/app/pages/fusion.py",
      "kind": "file",
      "size": 12015
    },
    {
      "id": "file:ubiquity-harpoon/app/pages/settings.py",
      "kind": "file",
      "size": 5345
    },
    {
      "id": "file:ubiquity-harpoon/app/pages/dialogue.py",
      "kind": "file",
      "size": 1405
    },
    {
      "id": "dir:ubiquity-harpoon/app/rx",
      "kind": "dir"
    },
    {
      "id": "file:ubiquity-harpoon/app/rx/instance.py",
      "kind": "file",
      "size": 204
    },
    {
      "id": "file:ubiquity-harpoon/app/rx/bus.py",
      "kind": "file",
      "size": 940
    },
    {
      "id": "file:ubiquity-harpoon/app/rx/topics.py",
      "kind": "file",
      "size": 746
    },
    {
      "id": "file:ubiquity-harpoon/app/rx/storage.py",
      "kind": "file",
      "size": 1174
    },
    {
      "id": "dir:ubiquity-harpoon/app/services",
      "kind": "dir"
    },
    {
      "id": "file:ubiquity-harpoon/app/services/receipts.py",
      "kind": "file",
      "size": 2103
    },
    {
      "id": "file:ubiquity-harpoon/app/services/strike.py",
      "kind": "file",
      "size": 4835
    },
    {
      "id": "file:ubiquity-harpoon/app/services/dialogue_bus.py",
      "kind": "file",
      "size": 1372
    },
    {
      "id": "file:ubiquity-harpoon/app/services/scoring.py",
      "kind": "file",
      "size": 3896
    },
    {
      "id": "file:ubiquity-harpoon/app/services/agent_loop.py",
      "kind": "file",
      "size": 613
    },
    {
      "id": "file:ubiquity-harpoon/app/services/ledger.py",
      "kind": "file",
      "size": 2998
    },
    {
      "id": "file:ubiquity-harpoon/app/services/__init__.py",
      "kind": "file",
      "size": 257
    },
    {
      "id": "file:ubiquity-harpoon/app/services/requesty_client.py",
      "kind": "file",
      "size": 1381
    },
    {
      "id": "file:ubiquity-harpoon/app/services/ubiq_solo.py",
      "kind": "file",
      "size": 5176
    },
    {
      "id": "file:ubiquity-harpoon/app/services/schemas.py",
      "kind": "file",
      "size": 3375
    },
    {
      "id": "file:ubiquity-harpoon/app/services/rust_bridge.py",
      "kind": "file",
      "size": 5561
    },
    {
      "id": "file:ubiquity-harpoon/app/services/config_service.py",
      "kind": "file",
      "size": 1830
    },
    {
      "id": "file:ubiquity-harpoon/app/services/github_client.py",
      "kind": "file",
      "size": 4260
    },
    {
      "id": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "kind": "file",
      "size": 13753
    },
    {
      "id": "file:ubiquity-harpoon/app/services/synthesis.py",
      "kind": "file",
      "size": 3962
    },
    {
      "id": "dir:ubiquity-harpoon/rust",
      "kind": "dir"
    },
    {
      "id": "file:ubiquity-harpoon/rust/pyproject.toml",
      "kind": "file",
      "size": 799
    },
    {
      "id": "file:ubiquity-harpoon/rust/README.md",
      "kind": "file",
      "size": 1674
    },
    {
      "id": "dir:ubiquity-harpoon/rust/harpoon-core",
      "kind": "dir"
    },
    {
      "id": "file:ubiquity-harpoon/rust/harpoon-core/Cargo.toml",
      "kind": "file",
      "size": 1005
    },
    {
      "id": "file:ubiquity-harpoon/rust/harpoon-core/Cargo.lock",
      "kind": "file",
      "size": 18630
    },
    {
      "id": "dir:ubiquity-harpoon/rust/harpoon-core/src",
      "kind": "dir"
    },
    {
      "id": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "kind": "file",
      "size": 19862
    },
    {
      "id": "dir:ubiquity-harpoon/assets",
      "kind": "dir"
    },
    {
      "id": "file:ubiquity-harpoon/assets/.gitkeep",
      "kind": "file",
      "size": 0
    },
    {
      "id": "dir:services",
      "kind": "dir"
    },
    {
      "id": "dir:services/auth",
      "kind": "dir"
    },
    {
      "id": "dir:services/mcp-gateway",
      "kind": "dir"
    },
    {
      "id": "dir:services/mcp-gateway/src",
      "kind": "dir"
    }
  ],
  "symbols": [
    {
      "id": "sym:crates/harpoon-core/src/lib.rs#pub struct FragmentInput",
      "file": "crates/harpoon-core/src/lib.rs",
      "export": "pub struct FragmentInput"
    },
    {
      "id": "sym:crates/harpoon-core/src/lib.rs#pub struct FragmentReport",
      "file": "crates/harpoon-core/src/lib.rs",
      "export": "pub struct FragmentReport"
    },
    {
      "id": "sym:crates/harpoon-core/src/lib.rs#pub struct CycleEvent",
      "file": "crates/harpoon-core/src/lib.rs",
      "export": "pub struct CycleEvent"
    },
    {
      "id": "sym:crates/harpoon-core/src/lib.rs#pub struct HarpoonCycle",
      "file": "crates/harpoon-core/src/lib.rs",
      "export": "pub struct HarpoonCycle"
    },
    {
      "id": "sym:crates/harpoon-core/src/lib.rs#pub fn get_absorbed",
      "file": "crates/harpoon-core/src/lib.rs",
      "export": "pub fn get_absorbed"
    },
    {
      "id": "sym:crates/harpoon-core/src/lib.rs#pub fn get_pending",
      "file": "crates/harpoon-core/src/lib.rs",
      "export": "pub fn get_pending"
    },
    {
      "id": "sym:crates/harpoon-core/src/lib.rs#pub fn get_events",
      "file": "crates/harpoon-core/src/lib.rs",
      "export": "pub fn get_events"
    },
    {
      "id": "sym:crates/harpoon-core/src/lib.rs#pub fn get_iterations",
      "file": "crates/harpoon-core/src/lib.rs",
      "export": "pub fn get_iterations"
    },
    {
      "id": "sym:crates/harpoon-core/src/lib.rs#pub fn get_anchors",
      "file": "crates/harpoon-core/src/lib.rs",
      "export": "pub fn get_anchors"
    },
    {
      "id": "sym:crates/harpoon-core/src/lib.rs#pub struct HarpoonEngine",
      "file": "crates/harpoon-core/src/lib.rs",
      "export": "pub struct HarpoonEngine"
    },
    {
      "id": "sym:crates/harpoon-core/src/lib.rs#pub fn as_dict",
      "file": "crates/harpoon-core/src/lib.rs",
      "export": "pub fn as_dict"
    },
    {
      "id": "sym:crates/harpoon-core/src/lib.rs#pub fn as_dict",
      "file": "crates/harpoon-core/src/lib.rs",
      "export": "pub fn as_dict"
    },
    {
      "id": "sym:crates/harpoon-core/src/lib.rs#pub fn as_dict",
      "file": "crates/harpoon-core/src/lib.rs",
      "export": "pub fn as_dict"
    },
    {
      "id": "sym:crates/harpoon-core/src/lib.rs#pub fn new",
      "file": "crates/harpoon-core/src/lib.rs",
      "export": "pub fn new"
    },
    {
      "id": "sym:crates/harpoon-core/src/lib.rs#pub fn envelope_cycle",
      "file": "crates/harpoon-core/src/lib.rs",
      "export": "pub fn envelope_cycle"
    },
    {
      "id": "sym:crates/harpoon-core/src/lib.rs#pub fn fingerprint",
      "file": "crates/harpoon-core/src/lib.rs",
      "export": "pub fn fingerprint"
    },
    {
      "id": "sym:crates/harpoon-core/src/lib.rs#pub fn fragment_hash",
      "file": "crates/harpoon-core/src/lib.rs",
      "export": "pub fn fragment_hash"
    },
    {
      "id": "sym:crates/harpoon-core/src/lib.rs#pub struct WasmHarpoonEngine",
      "file": "crates/harpoon-core/src/lib.rs",
      "export": "pub struct WasmHarpoonEngine"
    },
    {
      "id": "sym:crates/harpoon-core/src/lib.rs#pub fn new",
      "file": "crates/harpoon-core/src/lib.rs",
      "export": "pub fn new"
    },
    {
      "id": "sym:crates/harpoon-core/src/lib.rs#pub fn envelope_cycle",
      "file": "crates/harpoon-core/src/lib.rs",
      "export": "pub fn envelope_cycle"
    },
    {
      "id": "sym:crates/harpoon-core/src/lib.rs#pub fn fragment_hash",
      "file": "crates/harpoon-core/src/lib.rs",
      "export": "pub fn fragment_hash"
    },
    {
      "id": "sym:crates/wasm_classifier/pkg/wasm_classifier.js#classify_task",
      "file": "crates/wasm_classifier/pkg/wasm_classifier.js",
      "export": "classify_task"
    },
    {
      "id": "sym:crates/wasm_classifier/pkg/wasm_classifier.d.ts#classify_task",
      "file": "crates/wasm_classifier/pkg/wasm_classifier.d.ts",
      "export": "classify_task"
    },
    {
      "id": "sym:crates/wasm_classifier/pkg/wasm_classifier.d.ts#initSync",
      "file": "crates/wasm_classifier/pkg/wasm_classifier.d.ts",
      "export": "initSync"
    },
    {
      "id": "sym:crates/wasm_classifier/pkg/wasm_classifier_bg.wasm.d.ts#memory",
      "file": "crates/wasm_classifier/pkg/wasm_classifier_bg.wasm.d.ts",
      "export": "memory"
    },
    {
      "id": "sym:crates/wasm_classifier/pkg/wasm_classifier_bg.wasm.d.ts#classify_task",
      "file": "crates/wasm_classifier/pkg/wasm_classifier_bg.wasm.d.ts",
      "export": "classify_task"
    },
    {
      "id": "sym:crates/wasm_classifier/pkg/wasm_classifier_bg.wasm.d.ts#__wbindgen_export_0",
      "file": "crates/wasm_classifier/pkg/wasm_classifier_bg.wasm.d.ts",
      "export": "__wbindgen_export_0"
    },
    {
      "id": "sym:crates/wasm_classifier/pkg/wasm_classifier_bg.wasm.d.ts#__wbindgen_malloc",
      "file": "crates/wasm_classifier/pkg/wasm_classifier_bg.wasm.d.ts",
      "export": "__wbindgen_malloc"
    },
    {
      "id": "sym:crates/wasm_classifier/pkg/wasm_classifier_bg.wasm.d.ts#__wbindgen_realloc",
      "file": "crates/wasm_classifier/pkg/wasm_classifier_bg.wasm.d.ts",
      "export": "__wbindgen_realloc"
    },
    {
      "id": "sym:crates/wasm_classifier/pkg/wasm_classifier_bg.wasm.d.ts#__wbindgen_free",
      "file": "crates/wasm_classifier/pkg/wasm_classifier_bg.wasm.d.ts",
      "export": "__wbindgen_free"
    },
    {
      "id": "sym:crates/wasm_classifier/pkg/wasm_classifier_bg.wasm.d.ts#__wbindgen_start",
      "file": "crates/wasm_classifier/pkg/wasm_classifier_bg.wasm.d.ts",
      "export": "__wbindgen_start"
    },
    {
      "id": "sym:crates/wasm_classifier/src/lib.rs#pub fn classify_task",
      "file": "crates/wasm_classifier/src/lib.rs",
      "export": "pub fn classify_task"
    },
    {
      "id": "sym:crates/wasm_classifier/src/lib.rs#pub fn get_version",
      "file": "crates/wasm_classifier/src/lib.rs",
      "export": "pub fn get_version"
    },
    {
      "id": "sym:crates/wasm_classifier/src/lib.rs#pub fn init",
      "file": "crates/wasm_classifier/src/lib.rs",
      "export": "pub fn init"
    },
    {
      "id": "sym:crates/pyffi/src/lib.rs#pub fn init",
      "file": "crates/pyffi/src/lib.rs",
      "export": "pub fn init"
    },
    {
      "id": "sym:crates/pyffi/src/lib.rs#pub fn classify",
      "file": "crates/pyffi/src/lib.rs",
      "export": "pub fn classify"
    },
    {
      "id": "sym:crates/pyffi/src/lib.rs#pub fn run",
      "file": "crates/pyffi/src/lib.rs",
      "export": "pub fn run"
    },
    {
      "id": "sym:crates/resources/src/lib.rs#pub struct ResourceRegistry",
      "file": "crates/resources/src/lib.rs",
      "export": "pub struct ResourceRegistry"
    },
    {
      "id": "sym:crates/resources/src/lib.rs#pub struct PromptTemplate",
      "file": "crates/resources/src/lib.rs",
      "export": "pub struct PromptTemplate"
    },
    {
      "id": "sym:crates/resources/src/lib.rs#pub struct ToolDefinition",
      "file": "crates/resources/src/lib.rs",
      "export": "pub struct ToolDefinition"
    },
    {
      "id": "sym:crates/resources/src/lib.rs#pub struct DataSchema",
      "file": "crates/resources/src/lib.rs",
      "export": "pub struct DataSchema"
    },
    {
      "id": "sym:crates/resources/src/lib.rs#pub fn register_prompt",
      "file": "crates/resources/src/lib.rs",
      "export": "pub fn register_prompt"
    },
    {
      "id": "sym:crates/resources/src/lib.rs#pub fn register_tool",
      "file": "crates/resources/src/lib.rs",
      "export": "pub fn register_tool"
    },
    {
      "id": "sym:crates/resources/src/lib.rs#pub fn register_schema",
      "file": "crates/resources/src/lib.rs",
      "export": "pub fn register_schema"
    },
    {
      "id": "sym:crates/resources/src/lib.rs#pub fn get_prompt",
      "file": "crates/resources/src/lib.rs",
      "export": "pub fn get_prompt"
    },
    {
      "id": "sym:crates/resources/src/lib.rs#pub fn get_tool",
      "file": "crates/resources/src/lib.rs",
      "export": "pub fn get_tool"
    },
    {
      "id": "sym:crates/resources/src/lib.rs#pub fn get_schema",
      "file": "crates/resources/src/lib.rs",
      "export": "pub fn get_schema"
    },
    {
      "id": "sym:crates/resources/src/lib.rs#pub fn prompts_for_agent",
      "file": "crates/resources/src/lib.rs",
      "export": "pub fn prompts_for_agent"
    },
    {
      "id": "sym:crates/resources/src/lib.rs#pub fn export_json",
      "file": "crates/resources/src/lib.rs",
      "export": "pub fn export_json"
    },
    {
      "id": "sym:crates/resources/src/lib.rs#pub fn render_prompt",
      "file": "crates/resources/src/lib.rs",
      "export": "pub fn render_prompt"
    },
    {
      "id": "sym:crates/resources/src/sampling.rs#pub struct SamplingConfig",
      "file": "crates/resources/src/sampling.rs",
      "export": "pub struct SamplingConfig"
    },
    {
      "id": "sym:crates/resources/src/sampling.rs#pub fn architect",
      "file": "crates/resources/src/sampling.rs",
      "export": "pub fn architect"
    },
    {
      "id": "sym:crates/resources/src/sampling.rs#pub fn foreman",
      "file": "crates/resources/src/sampling.rs",
      "export": "pub fn foreman"
    },
    {
      "id": "sym:crates/resources/src/sampling.rs#pub fn worker",
      "file": "crates/resources/src/sampling.rs",
      "export": "pub fn worker"
    },
    {
      "id": "sym:crates/resources/src/sampling.rs#pub struct MidTurnSample",
      "file": "crates/resources/src/sampling.rs",
      "export": "pub struct MidTurnSample"
    },
    {
      "id": "sym:crates/resources/src/sampling.rs#pub struct SamplingCoordinator",
      "file": "crates/resources/src/sampling.rs",
      "export": "pub struct SamplingCoordinator"
    },
    {
      "id": "sym:crates/resources/src/sampling.rs#pub fn new",
      "file": "crates/resources/src/sampling.rs",
      "export": "pub fn new"
    },
    {
      "id": "sym:crates/resources/src/sampling.rs#pub fn register_strategy",
      "file": "crates/resources/src/sampling.rs",
      "export": "pub fn register_strategy"
    },
    {
      "id": "sym:crates/resources/src/sampling.rs#pub fn should_sample",
      "file": "crates/resources/src/sampling.rs",
      "export": "pub fn should_sample"
    },
    {
      "id": "sym:crates/resources/src/sampling.rs#pub fn record_sample",
      "file": "crates/resources/src/sampling.rs",
      "export": "pub fn record_sample"
    },
    {
      "id": "sym:crates/resources/src/sampling.rs#pub fn get_samples_for_validation",
      "file": "crates/resources/src/sampling.rs",
      "export": "pub fn get_samples_for_validation"
    },
    {
      "id": "sym:crates/resources/src/sampling.rs#pub struct ToolOutputSample",
      "file": "crates/resources/src/sampling.rs",
      "export": "pub struct ToolOutputSample"
    },
    {
      "id": "sym:crates/resources/src/sampling.rs#pub fn sample_from_array",
      "file": "crates/resources/src/sampling.rs",
      "export": "pub fn sample_from_array"
    },
    {
      "id": "sym:crates/resources/src/tools/covenant.rs#pub fn create_covenant_tool",
      "file": "crates/resources/src/tools/covenant.rs",
      "export": "pub fn create_covenant_tool"
    },
    {
      "id": "sym:crates/resources/src/tools/mlx.rs#pub fn classify_tool",
      "file": "crates/resources/src/tools/mlx.rs",
      "export": "pub fn classify_tool"
    },
    {
      "id": "sym:crates/resources/src/tools/mlx.rs#pub fn inference_tool",
      "file": "crates/resources/src/tools/mlx.rs",
      "export": "pub fn inference_tool"
    },
    {
      "id": "sym:crates/resources/src/tools/github.rs#pub fn create_pr_tool",
      "file": "crates/resources/src/tools/github.rs",
      "export": "pub fn create_pr_tool"
    },
    {
      "id": "sym:crates/resources/src/tools/github.rs#pub fn analyze_repo_tool",
      "file": "crates/resources/src/tools/github.rs",
      "export": "pub fn analyze_repo_tool"
    },
    {
      "id": "sym:crates/resources/src/tools/fusion.rs#pub fn process_fragments_tool",
      "file": "crates/resources/src/tools/fusion.rs",
      "export": "pub fn process_fragments_tool"
    },
    {
      "id": "sym:crates/resources/src/schemas/covenant.rs#pub fn covenant_schema",
      "file": "crates/resources/src/schemas/covenant.rs",
      "export": "pub fn covenant_schema"
    },
    {
      "id": "sym:crates/resources/src/schemas/strike.rs#pub fn strike_order_schema",
      "file": "crates/resources/src/schemas/strike.rs",
      "export": "pub fn strike_order_schema"
    },
    {
      "id": "sym:crates/resources/src/schemas/agent.rs#pub fn delegation_plan_schema",
      "file": "crates/resources/src/schemas/agent.rs",
      "export": "pub fn delegation_plan_schema"
    },
    {
      "id": "sym:crates/resources/src/schemas/agent.rs#pub fn agent_message_schema",
      "file": "crates/resources/src/schemas/agent.rs",
      "export": "pub fn agent_message_schema"
    },
    {
      "id": "sym:crates/resources/src/schemas/fusion.rs#pub fn fusion_trail_schema",
      "file": "crates/resources/src/schemas/fusion.rs",
      "export": "pub fn fusion_trail_schema"
    },
    {
      "id": "sym:crates/resources/src/prompts/covenant.rs#pub fn creation_prompt",
      "file": "crates/resources/src/prompts/covenant.rs",
      "export": "pub fn creation_prompt"
    },
    {
      "id": "sym:crates/resources/src/prompts/covenant.rs#pub fn review_prompt",
      "file": "crates/resources/src/prompts/covenant.rs",
      "export": "pub fn review_prompt"
    },
    {
      "id": "sym:crates/resources/src/prompts/strike.rs#pub fn delegation_prompt",
      "file": "crates/resources/src/prompts/strike.rs",
      "export": "pub fn delegation_prompt"
    },
    {
      "id": "sym:crates/resources/src/prompts/strike.rs#pub fn pr_creation_prompt",
      "file": "crates/resources/src/prompts/strike.rs",
      "export": "pub fn pr_creation_prompt"
    },
    {
      "id": "sym:crates/resources/src/prompts/agent.rs#pub fn agent_communication_prompt",
      "file": "crates/resources/src/prompts/agent.rs",
      "export": "pub fn agent_communication_prompt"
    },
    {
      "id": "sym:crates/resources/src/prompts/agent.rs#pub fn task_delegation_prompt",
      "file": "crates/resources/src/prompts/agent.rs",
      "export": "pub fn task_delegation_prompt"
    },
    {
      "id": "sym:crates/resources/src/prompts/fusion.rs#pub fn hygiene_prompt",
      "file": "crates/resources/src/prompts/fusion.rs",
      "export": "pub fn hygiene_prompt"
    },
    {
      "id": "sym:crates/engine_pymlx/src/lib.rs#pub struct GenOptions",
      "file": "crates/engine_pymlx/src/lib.rs",
      "export": "pub struct GenOptions"
    },
    {
      "id": "sym:crates/engine_pymlx/src/lib.rs#pub struct PythonMlxEngine",
      "file": "crates/engine_pymlx/src/lib.rs",
      "export": "pub struct PythonMlxEngine"
    },
    {
      "id": "sym:crates/engine_pymlx/src/lib.rs#pub fn new",
      "file": "crates/engine_pymlx/src/lib.rs",
      "export": "pub fn new"
    },
    {
      "id": "sym:crates/engine_pymlx/src/lib.rs#pub fn generate",
      "file": "crates/engine_pymlx/src/lib.rs",
      "export": "pub fn generate"
    },
    {
      "id": "sym:crates/service/src/config.rs#pub struct AppConfig",
      "file": "crates/service/src/config.rs",
      "export": "pub struct AppConfig"
    },
    {
      "id": "sym:crates/service/src/config.rs#pub struct GitHubConfig",
      "file": "crates/service/src/config.rs",
      "export": "pub struct GitHubConfig"
    },
    {
      "id": "sym:crates/service/src/config.rs#pub struct HostedAiConfig",
      "file": "crates/service/src/config.rs",
      "export": "pub struct HostedAiConfig"
    },
    {
      "id": "sym:crates/service/src/config.rs#pub struct McpConfig",
      "file": "crates/service/src/config.rs",
      "export": "pub struct McpConfig"
    },
    {
      "id": "sym:crates/service/src/config.rs#pub struct ServiceConfig",
      "file": "crates/service/src/config.rs",
      "export": "pub struct ServiceConfig"
    },
    {
      "id": "sym:crates/service/src/config.rs#pub fn from_env",
      "file": "crates/service/src/config.rs",
      "export": "pub fn from_env"
    },
    {
      "id": "sym:crates/service/src/config.rs#pub fn validate",
      "file": "crates/service/src/config.rs",
      "export": "pub fn validate"
    },
    {
      "id": "sym:crates/service/src/mock_engine.rs#pub struct MockEngine",
      "file": "crates/service/src/mock_engine.rs",
      "export": "pub struct MockEngine"
    },
    {
      "id": "sym:crates/service/src/mock_engine.rs#pub fn new",
      "file": "crates/service/src/mock_engine.rs",
      "export": "pub fn new"
    },
    {
      "id": "sym:crates/service/src/auth/github_oauth.rs#pub struct GitHubDeviceFlow",
      "file": "crates/service/src/auth/github_oauth.rs",
      "export": "pub struct GitHubDeviceFlow"
    },
    {
      "id": "sym:crates/service/src/auth/github_oauth.rs#pub struct DeviceCodeResponse",
      "file": "crates/service/src/auth/github_oauth.rs",
      "export": "pub struct DeviceCodeResponse"
    },
    {
      "id": "sym:crates/service/src/auth/github_oauth.rs#pub struct TokenResponse",
      "file": "crates/service/src/auth/github_oauth.rs",
      "export": "pub struct TokenResponse"
    },
    {
      "id": "sym:crates/service/src/auth/github_oauth.rs#pub fn new",
      "file": "crates/service/src/auth/github_oauth.rs",
      "export": "pub fn new"
    },
    {
      "id": "sym:crates/mcp_server/src/handlers.rs#pub fn handle_tool_call",
      "file": "crates/mcp_server/src/handlers.rs",
      "export": "pub fn handle_tool_call"
    },
    {
      "id": "sym:crates/mcp_server/src/handlers.rs#pub fn handle_resource_read",
      "file": "crates/mcp_server/src/handlers.rs",
      "export": "pub fn handle_resource_read"
    },
    {
      "id": "sym:crates/mcp_server/src/handlers.rs#pub fn handle_sampling",
      "file": "crates/mcp_server/src/handlers.rs",
      "export": "pub fn handle_sampling"
    },
    {
      "id": "sym:crates/mcp_server/src/protocol.rs#pub struct McpRequest",
      "file": "crates/mcp_server/src/protocol.rs",
      "export": "pub struct McpRequest"
    },
    {
      "id": "sym:crates/mcp_server/src/protocol.rs#pub struct McpResponse",
      "file": "crates/mcp_server/src/protocol.rs",
      "export": "pub struct McpResponse"
    },
    {
      "id": "sym:crates/mcp_server/src/protocol.rs#pub struct RpcError",
      "file": "crates/mcp_server/src/protocol.rs",
      "export": "pub struct RpcError"
    },
    {
      "id": "sym:crates/mcp_server/src/protocol.rs#pub struct McpNotification",
      "file": "crates/mcp_server/src/protocol.rs",
      "export": "pub struct McpNotification"
    },
    {
      "id": "sym:crates/mcp_server/src/protocol.rs#pub struct InitializeParams",
      "file": "crates/mcp_server/src/protocol.rs",
      "export": "pub struct InitializeParams"
    },
    {
      "id": "sym:crates/mcp_server/src/protocol.rs#pub struct ClientInfo",
      "file": "crates/mcp_server/src/protocol.rs",
      "export": "pub struct ClientInfo"
    },
    {
      "id": "sym:crates/mcp_server/src/protocol.rs#pub struct ToolCallParams",
      "file": "crates/mcp_server/src/protocol.rs",
      "export": "pub struct ToolCallParams"
    },
    {
      "id": "sym:crates/mcp_server/src/protocol.rs#pub struct ResourceReadParams",
      "file": "crates/mcp_server/src/protocol.rs",
      "export": "pub struct ResourceReadParams"
    },
    {
      "id": "sym:crates/mcp_server/src/protocol.rs#pub struct PromptGetParams",
      "file": "crates/mcp_server/src/protocol.rs",
      "export": "pub struct PromptGetParams"
    },
    {
      "id": "sym:crates/mcp_server/src/protocol.rs#pub struct SamplingParams",
      "file": "crates/mcp_server/src/protocol.rs",
      "export": "pub struct SamplingParams"
    },
    {
      "id": "sym:crates/mcp_server/src/lib.rs#pub struct McpServer",
      "file": "crates/mcp_server/src/lib.rs",
      "export": "pub struct McpServer"
    },
    {
      "id": "sym:crates/mcp_server/src/lib.rs#pub struct ConnectionInfo",
      "file": "crates/mcp_server/src/lib.rs",
      "export": "pub struct ConnectionInfo"
    },
    {
      "id": "sym:crates/mcp_server/src/lib.rs#pub fn new",
      "file": "crates/mcp_server/src/lib.rs",
      "export": "pub fn new"
    },
    {
      "id": "sym:crates/mcp_server/src/lib.rs#pub fn add_connection",
      "file": "crates/mcp_server/src/lib.rs",
      "export": "pub fn add_connection"
    },
    {
      "id": "sym:crates/mcp_server/src/lib.rs#pub fn remove_connection",
      "file": "crates/mcp_server/src/lib.rs",
      "export": "pub fn remove_connection"
    },
    {
      "id": "sym:crates/mcp_server/src/transport/websocket.rs#pub struct WebSocketTransport",
      "file": "crates/mcp_server/src/transport/websocket.rs",
      "export": "pub struct WebSocketTransport"
    },
    {
      "id": "sym:crates/mcp_server/src/transport/websocket.rs#pub struct QoQManifest",
      "file": "crates/mcp_server/src/transport/websocket.rs",
      "export": "pub struct QoQManifest"
    },
    {
      "id": "sym:crates/mcp_server/src/transport/stdio.rs#pub struct StdioTransport",
      "file": "crates/mcp_server/src/transport/stdio.rs",
      "export": "pub struct StdioTransport"
    },
    {
      "id": "sym:crates/mcp_server/src/transport/stdio.rs#pub fn new",
      "file": "crates/mcp_server/src/transport/stdio.rs",
      "export": "pub fn new"
    },
    {
      "id": "sym:crates/mcp_server/src/transport/http.rs#pub struct HttpTransport",
      "file": "crates/mcp_server/src/transport/http.rs",
      "export": "pub struct HttpTransport"
    },
    {
      "id": "sym:crates/mcp_server/src/transport/http.rs#pub fn new",
      "file": "crates/mcp_server/src/transport/http.rs",
      "export": "pub fn new"
    },
    {
      "id": "sym:crates/mcp_server/src/transport/http.rs#pub fn router",
      "file": "crates/mcp_server/src/transport/http.rs",
      "export": "pub fn router"
    },
    {
      "id": "sym:crates/harpoon_bridge/src/covenant.rs#pub struct Covenant",
      "file": "crates/harpoon_bridge/src/covenant.rs",
      "export": "pub struct Covenant"
    },
    {
      "id": "sym:crates/harpoon_bridge/src/covenant.rs#pub struct RealityState",
      "file": "crates/harpoon_bridge/src/covenant.rs",
      "export": "pub struct RealityState"
    },
    {
      "id": "sym:crates/harpoon_bridge/src/covenant.rs#pub struct TargetState",
      "file": "crates/harpoon_bridge/src/covenant.rs",
      "export": "pub struct TargetState"
    },
    {
      "id": "sym:crates/harpoon_bridge/src/covenant.rs#pub struct RepoMetadata",
      "file": "crates/harpoon_bridge/src/covenant.rs",
      "export": "pub struct RepoMetadata"
    },
    {
      "id": "sym:crates/harpoon_bridge/src/covenant.rs#pub struct RepoAnalysis",
      "file": "crates/harpoon_bridge/src/covenant.rs",
      "export": "pub struct RepoAnalysis"
    },
    {
      "id": "sym:crates/harpoon_bridge/src/covenant.rs#pub struct FunctionRef",
      "file": "crates/harpoon_bridge/src/covenant.rs",
      "export": "pub struct FunctionRef"
    },
    {
      "id": "sym:crates/harpoon_bridge/src/covenant.rs#pub struct ComplexityAssessment",
      "file": "crates/harpoon_bridge/src/covenant.rs",
      "export": "pub struct ComplexityAssessment"
    },
    {
      "id": "sym:crates/harpoon_bridge/src/covenant.rs#pub struct AgentTier",
      "file": "crates/harpoon_bridge/src/covenant.rs",
      "export": "pub struct AgentTier"
    },
    {
      "id": "sym:crates/harpoon_bridge/src/covenant.rs#pub struct CovenantBuilder",
      "file": "crates/harpoon_bridge/src/covenant.rs",
      "export": "pub struct CovenantBuilder"
    },
    {
      "id": "sym:crates/harpoon_bridge/src/covenant.rs#pub fn new",
      "file": "crates/harpoon_bridge/src/covenant.rs",
      "export": "pub fn new"
    },
    {
      "id": "sym:crates/harpoon_bridge/src/covenant.rs#pub fn reality_state",
      "file": "crates/harpoon_bridge/src/covenant.rs",
      "export": "pub fn reality_state"
    },
    {
      "id": "sym:crates/harpoon_bridge/src/covenant.rs#pub fn target_state",
      "file": "crates/harpoon_bridge/src/covenant.rs",
      "export": "pub fn target_state"
    },
    {
      "id": "sym:crates/harpoon_bridge/src/covenant.rs#pub fn add_metadata",
      "file": "crates/harpoon_bridge/src/covenant.rs",
      "export": "pub fn add_metadata"
    },
    {
      "id": "sym:crates/harpoon_bridge/src/covenant.rs#pub fn build",
      "file": "crates/harpoon_bridge/src/covenant.rs",
      "export": "pub fn build"
    },
    {
      "id": "sym:crates/harpoon_bridge/src/covenant.rs#pub struct HarmonyReview",
      "file": "crates/harpoon_bridge/src/covenant.rs",
      "export": "pub struct HarmonyReview"
    },
    {
      "id": "sym:crates/harpoon_bridge/src/covenant.rs#pub struct StrikeTarget",
      "file": "crates/harpoon_bridge/src/covenant.rs",
      "export": "pub struct StrikeTarget"
    },
    {
      "id": "sym:crates/harpoon_bridge/src/covenant.rs#pub struct DelegationPlan",
      "file": "crates/harpoon_bridge/src/covenant.rs",
      "export": "pub struct DelegationPlan"
    },
    {
      "id": "sym:crates/harpoon_bridge/src/covenant.rs#pub struct ForemanAssignment",
      "file": "crates/harpoon_bridge/src/covenant.rs",
      "export": "pub struct ForemanAssignment"
    },
    {
      "id": "sym:crates/harpoon_bridge/src/covenant.rs#pub struct WorkerPool",
      "file": "crates/harpoon_bridge/src/covenant.rs",
      "export": "pub struct WorkerPool"
    },
    {
      "id": "sym:crates/harpoon_bridge/src/strike.rs#pub struct StrikeResult",
      "file": "crates/harpoon_bridge/src/strike.rs",
      "export": "pub struct StrikeResult"
    },
    {
      "id": "sym:crates/harpoon_bridge/src/strike.rs#pub struct PullRequestInfo",
      "file": "crates/harpoon_bridge/src/strike.rs",
      "export": "pub struct PullRequestInfo"
    },
    {
      "id": "sym:crates/harpoon_bridge/src/strike.rs#pub struct CableState",
      "file": "crates/harpoon_bridge/src/strike.rs",
      "export": "pub struct CableState"
    },
    {
      "id": "sym:crates/harpoon_bridge/src/lib.rs#pub struct UnifiedOrchestrator",
      "file": "crates/harpoon_bridge/src/lib.rs",
      "export": "pub struct UnifiedOrchestrator"
    },
    {
      "id": "sym:crates/harpoon_bridge/src/lib.rs#pub struct UnifiedRequest",
      "file": "crates/harpoon_bridge/src/lib.rs",
      "export": "pub struct UnifiedRequest"
    },
    {
      "id": "sym:crates/harpoon_bridge/src/lib.rs#pub struct FragmentContext",
      "file": "crates/harpoon_bridge/src/lib.rs",
      "export": "pub struct FragmentContext"
    },
    {
      "id": "sym:crates/harpoon_bridge/src/lib.rs#pub fn new",
      "file": "crates/harpoon_bridge/src/lib.rs",
      "export": "pub fn new"
    },
    {
      "id": "sym:crates/harpoon_bridge/src/lib.rs#pub struct UnifiedResponse",
      "file": "crates/harpoon_bridge/src/lib.rs",
      "export": "pub struct UnifiedResponse"
    },
    {
      "id": "sym:crates/harpoon_bridge/src/fusion.rs#pub struct FusionOrchestrator",
      "file": "crates/harpoon_bridge/src/fusion.rs",
      "export": "pub struct FusionOrchestrator"
    },
    {
      "id": "sym:crates/harpoon_bridge/src/fusion.rs#pub struct FusionResult",
      "file": "crates/harpoon_bridge/src/fusion.rs",
      "export": "pub struct FusionResult"
    },
    {
      "id": "sym:crates/harpoon_bridge/src/fusion.rs#pub fn new",
      "file": "crates/harpoon_bridge/src/fusion.rs",
      "export": "pub fn new"
    },
    {
      "id": "sym:crates/harpoon_bridge/src/fusion.rs#pub fn stats",
      "file": "crates/harpoon_bridge/src/fusion.rs",
      "export": "pub fn stats"
    },
    {
      "id": "sym:crates/harpoon_bridge/src/fusion.rs#pub struct FusionStats",
      "file": "crates/harpoon_bridge/src/fusion.rs",
      "export": "pub struct FusionStats"
    },
    {
      "id": "sym:crates/orchestrator/src/types.rs#pub struct ClassifyRequest",
      "file": "crates/orchestrator/src/types.rs",
      "export": "pub struct ClassifyRequest"
    },
    {
      "id": "sym:crates/orchestrator/src/types.rs#pub struct ClassifyResponse",
      "file": "crates/orchestrator/src/types.rs",
      "export": "pub struct ClassifyResponse"
    },
    {
      "id": "sym:crates/orchestrator/src/types.rs#pub struct RunRequest",
      "file": "crates/orchestrator/src/types.rs",
      "export": "pub struct RunRequest"
    },
    {
      "id": "sym:crates/orchestrator/src/types.rs#pub struct RunResponse",
      "file": "crates/orchestrator/src/types.rs",
      "export": "pub struct RunResponse"
    },
    {
      "id": "sym:crates/orchestrator/src/types.rs#pub struct Orchestrator",
      "file": "crates/orchestrator/src/types.rs",
      "export": "pub struct Orchestrator"
    },
    {
      "id": "sym:crates/orchestrator/src/types.rs#pub fn new",
      "file": "crates/orchestrator/src/types.rs",
      "export": "pub fn new"
    },
    {
      "id": "sym:crates/orchestrator/src/lib.rs#pub struct DefaultEngine",
      "file": "crates/orchestrator/src/lib.rs",
      "export": "pub struct DefaultEngine"
    },
    {
      "id": "sym:crates/orchestrator/src/lib.rs#pub struct GenOptions",
      "file": "crates/orchestrator/src/lib.rs",
      "export": "pub struct GenOptions"
    },
    {
      "id": "sym:crates/orchestrator/src/lib.rs#pub struct ModelConfig",
      "file": "crates/orchestrator/src/lib.rs",
      "export": "pub struct ModelConfig"
    },
    {
      "id": "sym:crates/orchestrator/src/lib.rs#pub struct ObsidianConfig",
      "file": "crates/orchestrator/src/lib.rs",
      "export": "pub struct ObsidianConfig"
    },
    {
      "id": "sym:crates/orchestrator/src/lib.rs#pub struct SafetyConfig",
      "file": "crates/orchestrator/src/lib.rs",
      "export": "pub struct SafetyConfig"
    },
    {
      "id": "sym:crates/orchestrator/src/lib.rs#pub struct Config",
      "file": "crates/orchestrator/src/lib.rs",
      "export": "pub struct Config"
    },
    {
      "id": "sym:crates/orchestrator/src/lib.rs#pub struct Models",
      "file": "crates/orchestrator/src/lib.rs",
      "export": "pub struct Models"
    },
    {
      "id": "sym:crates/orchestrator/src/lib.rs#pub fn new",
      "file": "crates/orchestrator/src/lib.rs",
      "export": "pub fn new"
    },
    {
      "id": "sym:crates/orchestrator/src/lib.rs#pub struct Classification",
      "file": "crates/orchestrator/src/lib.rs",
      "export": "pub struct Classification"
    },
    {
      "id": "sym:crates/orchestrator/src/lib.rs#pub struct Homeskillet",
      "file": "crates/orchestrator/src/lib.rs",
      "export": "pub struct Homeskillet"
    },
    {
      "id": "sym:crates/orchestrator/src/lib.rs#pub fn new",
      "file": "crates/orchestrator/src/lib.rs",
      "export": "pub fn new"
    },
    {
      "id": "sym:crates/orchestrator/src/lib.rs#pub fn classify",
      "file": "crates/orchestrator/src/lib.rs",
      "export": "pub fn classify"
    },
    {
      "id": "sym:crates/orchestrator/src/lib.rs#pub fn run",
      "file": "crates/orchestrator/src/lib.rs",
      "export": "pub fn run"
    },
    {
      "id": "sym:crates/orchestrator/src/hosted_ai.rs#pub struct HostedAiConfig",
      "file": "crates/orchestrator/src/hosted_ai.rs",
      "export": "pub struct HostedAiConfig"
    },
    {
      "id": "sym:crates/orchestrator/src/hosted_ai.rs#pub struct GpuAllocationRequest",
      "file": "crates/orchestrator/src/hosted_ai.rs",
      "export": "pub struct GpuAllocationRequest"
    },
    {
      "id": "sym:crates/orchestrator/src/hosted_ai.rs#pub struct GpuAllocationResponse",
      "file": "crates/orchestrator/src/hosted_ai.rs",
      "export": "pub struct GpuAllocationResponse"
    },
    {
      "id": "sym:crates/orchestrator/src/hosted_ai.rs#pub struct HostedInferenceRequest",
      "file": "crates/orchestrator/src/hosted_ai.rs",
      "export": "pub struct HostedInferenceRequest"
    },
    {
      "id": "sym:crates/orchestrator/src/hosted_ai.rs#pub struct HostedInferenceResponse",
      "file": "crates/orchestrator/src/hosted_ai.rs",
      "export": "pub struct HostedInferenceResponse"
    },
    {
      "id": "sym:crates/orchestrator/src/hosted_ai.rs#pub struct HostedAiConnector",
      "file": "crates/orchestrator/src/hosted_ai.rs",
      "export": "pub struct HostedAiConnector"
    },
    {
      "id": "sym:crates/orchestrator/src/hosted_ai.rs#pub fn new",
      "file": "crates/orchestrator/src/hosted_ai.rs",
      "export": "pub fn new"
    },
    {
      "id": "sym:crates/orchestrator/src/hosted_ai.rs#pub fn get_allocation",
      "file": "crates/orchestrator/src/hosted_ai.rs",
      "export": "pub fn get_allocation"
    },
    {
      "id": "sym:crates/orchestrator/src/hosted_ai.rs#pub fn list_allocations",
      "file": "crates/orchestrator/src/hosted_ai.rs",
      "export": "pub fn list_allocations"
    },
    {
      "id": "sym:web-ui/app/layout.tsx#metadata",
      "file": "web-ui/app/layout.tsx",
      "export": "metadata"
    },
    {
      "id": "sym:web-ui/app/api/github/me/route.ts#runtime",
      "file": "web-ui/app/api/github/me/route.ts",
      "export": "runtime"
    },
    {
      "id": "sym:web-ui/app/api/github/device/start/route.ts#runtime",
      "file": "web-ui/app/api/github/device/start/route.ts",
      "export": "runtime"
    },
    {
      "id": "sym:web-ui/app/api/github/device/poll/route.ts#runtime",
      "file": "web-ui/app/api/github/device/poll/route.ts",
      "export": "runtime"
    },
    {
      "id": "sym:web-ui/components/McpClientProvider.tsx#McpClientProvider",
      "file": "web-ui/components/McpClientProvider.tsx",
      "export": "McpClientProvider"
    },
    {
      "id": "sym:web-ui/components/McpClientProvider.tsx#useMcp",
      "file": "web-ui/components/McpClientProvider.tsx",
      "export": "useMcp"
    },
    {
      "id": "sym:web-ui/components/QoQViewer.tsx#QoQViewer",
      "file": "web-ui/components/QoQViewer.tsx",
      "export": "QoQViewer"
    },
    {
      "id": "sym:web-ui/components/ConnectForm.tsx#ConnectForm",
      "file": "web-ui/components/ConnectForm.tsx",
      "export": "ConnectForm"
    },
    {
      "id": "sym:web-ui/components/ToolList.tsx#ToolList",
      "file": "web-ui/components/ToolList.tsx",
      "export": "ToolList"
    },
    {
      "id": "sym:web-ui/components/GitHubAuth.tsx#GitHubAuth",
      "file": "web-ui/components/GitHubAuth.tsx",
      "export": "GitHubAuth"
    },
    {
      "id": "sym:web-ui/components/SessionLog.tsx#SessionLog",
      "file": "web-ui/components/SessionLog.tsx",
      "export": "SessionLog"
    },
    {
      "id": "sym:tests/mocks/mod.rs#pub struct MockWebSocketConnection",
      "file": "tests/mocks/mod.rs",
      "export": "pub struct MockWebSocketConnection"
    },
    {
      "id": "sym:tests/mocks/mod.rs#pub fn new",
      "file": "tests/mocks/mod.rs",
      "export": "pub fn new"
    },
    {
      "id": "sym:tests/mocks/mod.rs#pub fn connect",
      "file": "tests/mocks/mod.rs",
      "export": "pub fn connect"
    },
    {
      "id": "sym:tests/mocks/mod.rs#pub fn disconnect",
      "file": "tests/mocks/mod.rs",
      "export": "pub fn disconnect"
    },
    {
      "id": "sym:tests/mocks/mod.rs#pub fn send",
      "file": "tests/mocks/mod.rs",
      "export": "pub fn send"
    },
    {
      "id": "sym:tests/mocks/mod.rs#pub fn received_messages",
      "file": "tests/mocks/mod.rs",
      "export": "pub fn received_messages"
    },
    {
      "id": "sym:tests/mocks/mod.rs#pub struct MockGitHubClient",
      "file": "tests/mocks/mod.rs",
      "export": "pub struct MockGitHubClient"
    },
    {
      "id": "sym:tests/mocks/mod.rs#pub fn new",
      "file": "tests/mocks/mod.rs",
      "export": "pub fn new"
    },
    {
      "id": "sym:tests/mocks/mod.rs#pub struct MockQoQGenerator",
      "file": "tests/mocks/mod.rs",
      "export": "pub struct MockQoQGenerator"
    },
    {
      "id": "sym:tests/mocks/mod.rs#pub fn new",
      "file": "tests/mocks/mod.rs",
      "export": "pub fn new"
    },
    {
      "id": "sym:tests/mocks/mod.rs#pub fn generate",
      "file": "tests/mocks/mod.rs",
      "export": "pub fn generate"
    },
    {
      "id": "sym:tests/mocks/mod.rs#pub fn set_manifest",
      "file": "tests/mocks/mod.rs",
      "export": "pub fn set_manifest"
    },
    {
      "id": "sym:tests/mocks/mod.rs#pub struct MockHostedAiClient",
      "file": "tests/mocks/mod.rs",
      "export": "pub struct MockHostedAiClient"
    },
    {
      "id": "sym:tests/mocks/mod.rs#pub struct MockGpuAllocation",
      "file": "tests/mocks/mod.rs",
      "export": "pub struct MockGpuAllocation"
    },
    {
      "id": "sym:tests/mocks/mod.rs#pub fn new",
      "file": "tests/mocks/mod.rs",
      "export": "pub fn new"
    },
    {
      "id": "sym:tests/mocks/mod.rs#pub struct MockWasmClassifier",
      "file": "tests/mocks/mod.rs",
      "export": "pub struct MockWasmClassifier"
    },
    {
      "id": "sym:tests/mocks/mod.rs#pub fn new",
      "file": "tests/mocks/mod.rs",
      "export": "pub fn new"
    },
    {
      "id": "sym:tests/mocks/mod.rs#pub fn classify",
      "file": "tests/mocks/mod.rs",
      "export": "pub fn classify"
    },
    {
      "id": "sym:tests/integration/qoq_integration_test.rs#pub fn test_function",
      "file": "tests/integration/qoq_integration_test.rs",
      "export": "pub fn test_function"
    },
    {
      "id": "sym:tests/integration/qoq_integration_test.rs#pub struct TestStruct",
      "file": "tests/integration/qoq_integration_test.rs",
      "export": "pub struct TestStruct"
    },
    {
      "id": "sym:tests/integration/github_oauth_test.rs#pub fn mock_github_responses",
      "file": "tests/integration/github_oauth_test.rs",
      "export": "pub fn mock_github_responses"
    },
    {
      "id": "sym:scripts/qoq_emit.py#git_hash",
      "file": "scripts/qoq_emit.py",
      "export": "git_hash"
    },
    {
      "id": "sym:scripts/qoq_emit.py#build_tree",
      "file": "scripts/qoq_emit.py",
      "export": "build_tree"
    },
    {
      "id": "sym:scripts/qoq_emit.py#list_symbols_and_flows",
      "file": "scripts/qoq_emit.py",
      "export": "list_symbols_and_flows"
    },
    {
      "id": "sym:scripts/qoq_emit.py#load_contracts",
      "file": "scripts/qoq_emit.py",
      "export": "load_contracts"
    },
    {
      "id": "sym:scripts/analyze_codebase_simple.py#__init__",
      "file": "scripts/analyze_codebase_simple.py",
      "export": "__init__"
    },
    {
      "id": "sym:scripts/analyze_codebase_simple.py#analyze",
      "file": "scripts/analyze_codebase_simple.py",
      "export": "analyze"
    },
    {
      "id": "sym:scripts/analyze_codebase_simple.py#generate_tree",
      "file": "scripts/analyze_codebase_simple.py",
      "export": "generate_tree"
    },
    {
      "id": "sym:scripts/analyze_codebase_simple.py#_process_directory",
      "file": "scripts/analyze_codebase_simple.py",
      "export": "_process_directory"
    },
    {
      "id": "sym:scripts/analyze_codebase_simple.py#extract_code_elements",
      "file": "scripts/analyze_codebase_simple.py",
      "export": "extract_code_elements"
    },
    {
      "id": "sym:scripts/analyze_codebase_simple.py#_analyze_rust",
      "file": "scripts/analyze_codebase_simple.py",
      "export": "_analyze_rust"
    },
    {
      "id": "sym:scripts/analyze_codebase_simple.py#_analyze_python",
      "file": "scripts/analyze_codebase_simple.py",
      "export": "_analyze_python"
    },
    {
      "id": "sym:scripts/analyze_codebase_simple.py#_analyze_javascript",
      "file": "scripts/analyze_codebase_simple.py",
      "export": "_analyze_javascript"
    },
    {
      "id": "sym:scripts/analyze_codebase_simple.py#analyze_calls",
      "file": "scripts/analyze_codebase_simple.py",
      "export": "analyze_calls"
    },
    {
      "id": "sym:scripts/analyze_codebase_simple.py#generate_output",
      "file": "scripts/analyze_codebase_simple.py",
      "export": "generate_output"
    },
    {
      "id": "sym:scripts/analyze_codebase_simple.py#save_results",
      "file": "scripts/analyze_codebase_simple.py",
      "export": "save_results"
    },
    {
      "id": "sym:scripts/analyze_codebase_simple.py#generate_markdown_report",
      "file": "scripts/analyze_codebase_simple.py",
      "export": "generate_markdown_report"
    },
    {
      "id": "sym:scripts/analyze_codebase_simple.py#_format_tree",
      "file": "scripts/analyze_codebase_simple.py",
      "export": "_format_tree"
    },
    {
      "id": "sym:scripts/analyze_codebase_simple.py#generate_graph_markdown",
      "file": "scripts/analyze_codebase_simple.py",
      "export": "generate_graph_markdown"
    },
    {
      "id": "sym:scripts/analyze_codebase_simple.py#setup_git_hook",
      "file": "scripts/analyze_codebase_simple.py",
      "export": "setup_git_hook"
    },
    {
      "id": "sym:scripts/analyze_codebase_simple.py#main",
      "file": "scripts/analyze_codebase_simple.py",
      "export": "main"
    },
    {
      "id": "sym:scripts/generate_network_graph.py#__init__",
      "file": "scripts/generate_network_graph.py",
      "export": "__init__"
    },
    {
      "id": "sym:scripts/generate_network_graph.py#load_analysis",
      "file": "scripts/generate_network_graph.py",
      "export": "load_analysis"
    },
    {
      "id": "sym:scripts/generate_network_graph.py#build_graph",
      "file": "scripts/generate_network_graph.py",
      "export": "build_graph"
    },
    {
      "id": "sym:scripts/generate_network_graph.py#_get_file_node",
      "file": "scripts/generate_network_graph.py",
      "export": "_get_file_node"
    },
    {
      "id": "sym:scripts/generate_network_graph.py#_add_module_hierarchy",
      "file": "scripts/generate_network_graph.py",
      "export": "_add_module_hierarchy"
    },
    {
      "id": "sym:scripts/generate_network_graph.py#calculate_importance",
      "file": "scripts/generate_network_graph.py",
      "export": "calculate_importance"
    },
    {
      "id": "sym:scripts/generate_network_graph.py#create_visualization",
      "file": "scripts/generate_network_graph.py",
      "export": "create_visualization"
    },
    {
      "id": "sym:scripts/generate_network_graph.py#generate_supplementary_visualizations",
      "file": "scripts/generate_network_graph.py",
      "export": "generate_supplementary_visualizations"
    },
    {
      "id": "sym:scripts/generate_network_graph.py#_generate_crate_overview",
      "file": "scripts/generate_network_graph.py",
      "export": "_generate_crate_overview"
    },
    {
      "id": "sym:scripts/generate_network_graph.py#_generate_call_hierarchy",
      "file": "scripts/generate_network_graph.py",
      "export": "_generate_call_hierarchy"
    },
    {
      "id": "sym:scripts/generate_network_graph.py#_generate_crate_story_diagram",
      "file": "scripts/generate_network_graph.py",
      "export": "_generate_crate_story_diagram"
    },
    {
      "id": "sym:scripts/generate_network_graph.py#main",
      "file": "scripts/generate_network_graph.py",
      "export": "main"
    },
    {
      "id": "sym:scripts/analyze_codebase.py#__init__",
      "file": "scripts/analyze_codebase.py",
      "export": "__init__"
    },
    {
      "id": "sym:scripts/analyze_codebase.py#analyze",
      "file": "scripts/analyze_codebase.py",
      "export": "analyze"
    },
    {
      "id": "sym:scripts/analyze_codebase.py#generate_tree",
      "file": "scripts/analyze_codebase.py",
      "export": "generate_tree"
    },
    {
      "id": "sym:scripts/analyze_codebase.py#_process_directory",
      "file": "scripts/analyze_codebase.py",
      "export": "_process_directory"
    },
    {
      "id": "sym:scripts/analyze_codebase.py#extract_code_elements",
      "file": "scripts/analyze_codebase.py",
      "export": "extract_code_elements"
    },
    {
      "id": "sym:scripts/analyze_codebase.py#_analyze_rust",
      "file": "scripts/analyze_codebase.py",
      "export": "_analyze_rust"
    },
    {
      "id": "sym:scripts/analyze_codebase.py#_analyze_python",
      "file": "scripts/analyze_codebase.py",
      "export": "_analyze_python"
    },
    {
      "id": "sym:scripts/analyze_codebase.py#_analyze_javascript",
      "file": "scripts/analyze_codebase.py",
      "export": "_analyze_javascript"
    },
    {
      "id": "sym:scripts/analyze_codebase.py#build_call_graph",
      "file": "scripts/analyze_codebase.py",
      "export": "build_call_graph"
    },
    {
      "id": "sym:scripts/analyze_codebase.py#generate_output",
      "file": "scripts/analyze_codebase.py",
      "export": "generate_output"
    },
    {
      "id": "sym:scripts/analyze_codebase.py#save_results",
      "file": "scripts/analyze_codebase.py",
      "export": "save_results"
    },
    {
      "id": "sym:scripts/analyze_codebase.py#generate_markdown_report",
      "file": "scripts/analyze_codebase.py",
      "export": "generate_markdown_report"
    },
    {
      "id": "sym:scripts/analyze_codebase.py#_format_tree",
      "file": "scripts/analyze_codebase.py",
      "export": "_format_tree"
    },
    {
      "id": "sym:scripts/analyze_codebase.py#generate_dot_graph",
      "file": "scripts/analyze_codebase.py",
      "export": "generate_dot_graph"
    },
    {
      "id": "sym:scripts/analyze_codebase.py#setup_git_hook",
      "file": "scripts/analyze_codebase.py",
      "export": "setup_git_hook"
    },
    {
      "id": "sym:scripts/analyze_codebase.py#main",
      "file": "scripts/analyze_codebase.py",
      "export": "main"
    },
    {
      "id": "sym:ubiquity-harpoon/app/app.py#page_wrapper",
      "file": "ubiquity-harpoon/app/app.py",
      "export": "page_wrapper"
    },
    {
      "id": "sym:ubiquity-harpoon/app/state.py#process_covenant",
      "file": "ubiquity-harpoon/app/state.py",
      "export": "process_covenant"
    },
    {
      "id": "sym:ubiquity-harpoon/app/state.py#clear_covenant",
      "file": "ubiquity-harpoon/app/state.py",
      "export": "clear_covenant"
    },
    {
      "id": "sym:ubiquity-harpoon/app/state.py#get_run_id",
      "file": "ubiquity-harpoon/app/state.py",
      "export": "get_run_id"
    },
    {
      "id": "sym:ubiquity-harpoon/app/state.py#on_load",
      "file": "ubiquity-harpoon/app/state.py",
      "export": "on_load"
    },
    {
      "id": "sym:ubiquity-harpoon/app/state.py#launch_strike",
      "file": "ubiquity-harpoon/app/state.py",
      "export": "launch_strike"
    },
    {
      "id": "sym:ubiquity-harpoon/app/state.py#cable_states",
      "file": "ubiquity-harpoon/app/state.py",
      "export": "cable_states"
    },
    {
      "id": "sym:ubiquity-harpoon/app/state.py#on_load",
      "file": "ubiquity-harpoon/app/state.py",
      "export": "on_load"
    },
    {
      "id": "sym:ubiquity-harpoon/app/state.py#backend_label",
      "file": "ubiquity-harpoon/app/state.py",
      "export": "backend_label"
    },
    {
      "id": "sym:ubiquity-harpoon/app/state.py#backend_is_rust",
      "file": "ubiquity-harpoon/app/state.py",
      "export": "backend_is_rust"
    },
    {
      "id": "sym:ubiquity-harpoon/app/state.py#backend_threads",
      "file": "ubiquity-harpoon/app/state.py",
      "export": "backend_threads"
    },
    {
      "id": "sym:ubiquity-harpoon/app/state.py#_update_from_trail",
      "file": "ubiquity-harpoon/app/state.py",
      "export": "_update_from_trail"
    },
    {
      "id": "sym:ubiquity-harpoon/app/state.py#fragment_progress",
      "file": "ubiquity-harpoon/app/state.py",
      "export": "fragment_progress"
    },
    {
      "id": "sym:ubiquity-harpoon/app/state.py#has_anchors",
      "file": "ubiquity-harpoon/app/state.py",
      "export": "has_anchors"
    },
    {
      "id": "sym:ubiquity-harpoon/app/state.py#has_state_capsule",
      "file": "ubiquity-harpoon/app/state.py",
      "export": "has_state_capsule"
    },
    {
      "id": "sym:ubiquity-harpoon/app/state.py#state_capsule_json",
      "file": "ubiquity-harpoon/app/state.py",
      "export": "state_capsule_json"
    },
    {
      "id": "sym:ubiquity-harpoon/app/state.py#state_capsule_context",
      "file": "ubiquity-harpoon/app/state.py",
      "export": "state_capsule_context"
    },
    {
      "id": "sym:ubiquity-harpoon/app/state.py#enqueue_dump",
      "file": "ubiquity-harpoon/app/state.py",
      "export": "enqueue_dump"
    },
    {
      "id": "sym:ubiquity-harpoon/app/state.py#process_envelope",
      "file": "ubiquity-harpoon/app/state.py",
      "export": "process_envelope"
    },
    {
      "id": "sym:ubiquity-harpoon/app/state.py#refresh_status",
      "file": "ubiquity-harpoon/app/state.py",
      "export": "refresh_status"
    },
    {
      "id": "sym:ubiquity-harpoon/app/state.py#get_run_id",
      "file": "ubiquity-harpoon/app/state.py",
      "export": "get_run_id"
    },
    {
      "id": "sym:ubiquity-harpoon/app/state.py#load_dialogue",
      "file": "ubiquity-harpoon/app/state.py",
      "export": "load_dialogue"
    },
    {
      "id": "sym:ubiquity-harpoon/app/state.py#_get_all_settings_vars",
      "file": "ubiquity-harpoon/app/state.py",
      "export": "_get_all_settings_vars"
    },
    {
      "id": "sym:ubiquity-harpoon/app/state.py#load_settings",
      "file": "ubiquity-harpoon/app/state.py",
      "export": "load_settings"
    },
    {
      "id": "sym:ubiquity-harpoon/app/state.py#save_settings",
      "file": "ubiquity-harpoon/app/state.py",
      "export": "save_settings"
    },
    {
      "id": "sym:ubiquity-harpoon/app/state.py#test_inference",
      "file": "ubiquity-harpoon/app/state.py",
      "export": "test_inference"
    },
    {
      "id": "sym:ubiquity-harpoon/app/exchange/engine.py#__init__",
      "file": "ubiquity-harpoon/app/exchange/engine.py",
      "export": "__init__"
    },
    {
      "id": "sym:ubiquity-harpoon/app/exchange/engine.py#mint",
      "file": "ubiquity-harpoon/app/exchange/engine.py",
      "export": "mint"
    },
    {
      "id": "sym:ubiquity-harpoon/app/exchange/engine.py#burn",
      "file": "ubiquity-harpoon/app/exchange/engine.py",
      "export": "burn"
    },
    {
      "id": "sym:ubiquity-harpoon/app/exchange/engine.py#payout",
      "file": "ubiquity-harpoon/app/exchange/engine.py",
      "export": "payout"
    },
    {
      "id": "sym:ubiquity-harpoon/app/exchange/engine.py#fusion",
      "file": "ubiquity-harpoon/app/exchange/engine.py",
      "export": "fusion"
    },
    {
      "id": "sym:ubiquity-harpoon/app/ledger/oracle.py#_ensure_tables",
      "file": "ubiquity-harpoon/app/ledger/oracle.py",
      "export": "_ensure_tables"
    },
    {
      "id": "sym:ubiquity-harpoon/app/ledger/oracle.py#_last_hash",
      "file": "ubiquity-harpoon/app/ledger/oracle.py",
      "export": "_last_hash"
    },
    {
      "id": "sym:ubiquity-harpoon/app/ledger/oracle.py#append_event",
      "file": "ubiquity-harpoon/app/ledger/oracle.py",
      "export": "append_event"
    },
    {
      "id": "sym:ubiquity-harpoon/app/components/status_badge.py#status_badge",
      "file": "ubiquity-harpoon/app/components/status_badge.py",
      "export": "status_badge"
    },
    {
      "id": "sym:ubiquity-harpoon/app/components/navbar.py#navbar",
      "file": "ubiquity-harpoon/app/components/navbar.py",
      "export": "navbar"
    },
    {
      "id": "sym:ubiquity-harpoon/app/components/footer.py#footer",
      "file": "ubiquity-harpoon/app/components/footer.py",
      "export": "footer"
    },
    {
      "id": "sym:ubiquity-harpoon/app/api/metrics.py#metrics_psi",
      "file": "ubiquity-harpoon/app/api/metrics.py",
      "export": "metrics_psi"
    },
    {
      "id": "sym:ubiquity-harpoon/app/api/metrics.py#rx_health",
      "file": "ubiquity-harpoon/app/api/metrics.py",
      "export": "rx_health"
    },
    {
      "id": "sym:ubiquity-harpoon/app/api/webhook.py#handle_github_webhook",
      "file": "ubiquity-harpoon/app/api/webhook.py",
      "export": "handle_github_webhook"
    },
    {
      "id": "sym:ubiquity-harpoon/app/api/covenant.py#review_covenant",
      "file": "ubiquity-harpoon/app/api/covenant.py",
      "export": "review_covenant"
    },
    {
      "id": "sym:ubiquity-harpoon/app/api/covenant.py#launch_strike",
      "file": "ubiquity-harpoon/app/api/covenant.py",
      "export": "launch_strike"
    },
    {
      "id": "sym:ubiquity-harpoon/app/api/fusion.py#enqueue_dump",
      "file": "ubiquity-harpoon/app/api/fusion.py",
      "export": "enqueue_dump"
    },
    {
      "id": "sym:ubiquity-harpoon/app/api/fusion.py#process_envelope",
      "file": "ubiquity-harpoon/app/api/fusion.py",
      "export": "process_envelope"
    },
    {
      "id": "sym:ubiquity-harpoon/app/api/fusion.py#get_status",
      "file": "ubiquity-harpoon/app/api/fusion.py",
      "export": "get_status"
    },
    {
      "id": "sym:ubiquity-harpoon/app/api/ledger_read.py#get_ledger_entries",
      "file": "ubiquity-harpoon/app/api/ledger_read.py",
      "export": "get_ledger_entries"
    },
    {
      "id": "sym:ubiquity-harpoon/app/api/ledger_read.py#get_ledger_snapshot",
      "file": "ubiquity-harpoon/app/api/ledger_read.py",
      "export": "get_ledger_snapshot"
    },
    {
      "id": "sym:ubiquity-harpoon/app/api/ledger_read.py#mark_anchor_integrated",
      "file": "ubiquity-harpoon/app/api/ledger_read.py",
      "export": "mark_anchor_integrated"
    },
    {
      "id": "sym:ubiquity-harpoon/app/api/main.py#_start_runtime",
      "file": "ubiquity-harpoon/app/api/main.py",
      "export": "_start_runtime"
    },
    {
      "id": "sym:ubiquity-harpoon/app/api/main.py#psi_loop",
      "file": "ubiquity-harpoon/app/api/main.py",
      "export": "psi_loop"
    },
    {
      "id": "sym:ubiquity-harpoon/app/psi/observer.py#observe_symbol",
      "file": "ubiquity-harpoon/app/psi/observer.py",
      "export": "observe_symbol"
    },
    {
      "id": "sym:ubiquity-harpoon/app/psi/psi_node.py#__init__",
      "file": "ubiquity-harpoon/app/psi/psi_node.py",
      "export": "__init__"
    },
    {
      "id": "sym:ubiquity-harpoon/app/psi/psi_node.py#_on_lock",
      "file": "ubiquity-harpoon/app/psi/psi_node.py",
      "export": "_on_lock"
    },
    {
      "id": "sym:ubiquity-harpoon/app/psi/psi_node.py#_on_inv",
      "file": "ubiquity-harpoon/app/psi/psi_node.py",
      "export": "_on_inv"
    },
    {
      "id": "sym:ubiquity-harpoon/app/psi/psi_node.py#observe_symbol",
      "file": "ubiquity-harpoon/app/psi/psi_node.py",
      "export": "observe_symbol"
    },
    {
      "id": "sym:ubiquity-harpoon/app/psi/psi_node.py#_entropy",
      "file": "ubiquity-harpoon/app/psi/psi_node.py",
      "export": "_entropy"
    },
    {
      "id": "sym:ubiquity-harpoon/app/psi/psi_node.py#_variance",
      "file": "ubiquity-harpoon/app/psi/psi_node.py",
      "export": "_variance"
    },
    {
      "id": "sym:ubiquity-harpoon/app/psi/psi_node.py#tick",
      "file": "ubiquity-harpoon/app/psi/psi_node.py",
      "export": "tick"
    },
    {
      "id": "sym:ubiquity-harpoon/app/pages/strike.py#pr_link_card",
      "file": "ubiquity-harpoon/app/pages/strike.py",
      "export": "pr_link_card"
    },
    {
      "id": "sym:ubiquity-harpoon/app/pages/strike.py#receipt_log",
      "file": "ubiquity-harpoon/app/pages/strike.py",
      "export": "receipt_log"
    },
    {
      "id": "sym:ubiquity-harpoon/app/pages/strike.py#strike_page",
      "file": "ubiquity-harpoon/app/pages/strike.py",
      "export": "strike_page"
    },
    {
      "id": "sym:ubiquity-harpoon/app/pages/index.py#covenant_card",
      "file": "ubiquity-harpoon/app/pages/index.py",
      "export": "covenant_card"
    },
    {
      "id": "sym:ubiquity-harpoon/app/pages/index.py#index",
      "file": "ubiquity-harpoon/app/pages/index.py",
      "export": "index"
    },
    {
      "id": "sym:ubiquity-harpoon/app/pages/ledger.py#cable_visualization",
      "file": "ubiquity-harpoon/app/pages/ledger.py",
      "export": "cable_visualization"
    },
    {
      "id": "sym:ubiquity-harpoon/app/pages/ledger.py#ledger_table",
      "file": "ubiquity-harpoon/app/pages/ledger.py",
      "export": "ledger_table"
    },
    {
      "id": "sym:ubiquity-harpoon/app/pages/ledger.py#ledger_page",
      "file": "ubiquity-harpoon/app/pages/ledger.py",
      "export": "ledger_page"
    },
    {
      "id": "sym:ubiquity-harpoon/app/pages/review.py#target_card",
      "file": "ubiquity-harpoon/app/pages/review.py",
      "export": "target_card"
    },
    {
      "id": "sym:ubiquity-harpoon/app/pages/review.py#review",
      "file": "ubiquity-harpoon/app/pages/review.py",
      "export": "review"
    },
    {
      "id": "sym:ubiquity-harpoon/app/pages/fusion.py#_log_entry",
      "file": "ubiquity-harpoon/app/pages/fusion.py",
      "export": "_log_entry"
    },
    {
      "id": "sym:ubiquity-harpoon/app/pages/fusion.py#fusion_console",
      "file": "ubiquity-harpoon/app/pages/fusion.py",
      "export": "fusion_console"
    },
    {
      "id": "sym:ubiquity-harpoon/app/pages/fusion.py#fusion_page",
      "file": "ubiquity-harpoon/app/pages/fusion.py",
      "export": "fusion_page"
    },
    {
      "id": "sym:ubiquity-harpoon/app/pages/settings.py#settings_field",
      "file": "ubiquity-harpoon/app/pages/settings.py",
      "export": "settings_field"
    },
    {
      "id": "sym:ubiquity-harpoon/app/pages/settings.py#settings_form_group",
      "file": "ubiquity-harpoon/app/pages/settings.py",
      "export": "settings_form_group"
    },
    {
      "id": "sym:ubiquity-harpoon/app/pages/settings.py#settings_page",
      "file": "ubiquity-harpoon/app/pages/settings.py",
      "export": "settings_page"
    },
    {
      "id": "sym:ubiquity-harpoon/app/pages/dialogue.py#message_card",
      "file": "ubiquity-harpoon/app/pages/dialogue.py",
      "export": "message_card"
    },
    {
      "id": "sym:ubiquity-harpoon/app/pages/dialogue.py#dialogue_page",
      "file": "ubiquity-harpoon/app/pages/dialogue.py",
      "export": "dialogue_page"
    },
    {
      "id": "sym:ubiquity-harpoon/app/rx/instance.py#start_rx",
      "file": "ubiquity-harpoon/app/rx/instance.py",
      "export": "start_rx"
    },
    {
      "id": "sym:ubiquity-harpoon/app/rx/bus.py#__init__",
      "file": "ubiquity-harpoon/app/rx/bus.py",
      "export": "__init__"
    },
    {
      "id": "sym:ubiquity-harpoon/app/rx/bus.py#publish",
      "file": "ubiquity-harpoon/app/rx/bus.py",
      "export": "publish"
    },
    {
      "id": "sym:ubiquity-harpoon/app/rx/bus.py#subscribe",
      "file": "ubiquity-harpoon/app/rx/bus.py",
      "export": "subscribe"
    },
    {
      "id": "sym:ubiquity-harpoon/app/rx/bus.py#pump",
      "file": "ubiquity-harpoon/app/rx/bus.py",
      "export": "pump"
    },
    {
      "id": "sym:ubiquity-harpoon/app/rx/bus.py#stats",
      "file": "ubiquity-harpoon/app/rx/bus.py",
      "export": "stats"
    },
    {
      "id": "sym:ubiquity-harpoon/app/rx/storage.py#_ensure_tables",
      "file": "ubiquity-harpoon/app/rx/storage.py",
      "export": "_ensure_tables"
    },
    {
      "id": "sym:ubiquity-harpoon/app/rx/storage.py#save_psi",
      "file": "ubiquity-harpoon/app/rx/storage.py",
      "export": "save_psi"
    },
    {
      "id": "sym:ubiquity-harpoon/app/rx/storage.py#recent_psi",
      "file": "ubiquity-harpoon/app/rx/storage.py",
      "export": "recent_psi"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/receipts.py#process_receipts",
      "file": "ubiquity-harpoon/app/services/receipts.py",
      "export": "process_receipts"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/strike.py#_render_template",
      "file": "ubiquity-harpoon/app/services/strike.py",
      "export": "_render_template"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/strike.py#check_backpressure",
      "file": "ubiquity-harpoon/app/services/strike.py",
      "export": "check_backpressure"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/strike.py#execute_strike",
      "file": "ubiquity-harpoon/app/services/strike.py",
      "export": "execute_strike"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/dialogue_bus.py#post_message",
      "file": "ubiquity-harpoon/app/services/dialogue_bus.py",
      "export": "post_message"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/dialogue_bus.py#get_messages",
      "file": "ubiquity-harpoon/app/services/dialogue_bus.py",
      "export": "get_messages"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/scoring.py#_calculate_heuristic_scores",
      "file": "ubiquity-harpoon/app/services/scoring.py",
      "export": "_calculate_heuristic_scores"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/scoring.py#merge_llm_adjustments",
      "file": "ubiquity-harpoon/app/services/scoring.py",
      "export": "merge_llm_adjustments"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/scoring.py#_get_anchor_fit",
      "file": "ubiquity-harpoon/app/services/scoring.py",
      "export": "_get_anchor_fit"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/scoring.py#_get_value_cost_ratio",
      "file": "ubiquity-harpoon/app/services/scoring.py",
      "export": "_get_value_cost_ratio"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/scoring.py#select_targets",
      "file": "ubiquity-harpoon/app/services/scoring.py",
      "export": "select_targets"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/scoring.py#perform_harmony_review",
      "file": "ubiquity-harpoon/app/services/scoring.py",
      "export": "perform_harmony_review"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/agent_loop.py#run_agent_loop",
      "file": "ubiquity-harpoon/app/services/agent_loop.py",
      "export": "run_agent_loop"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/ledger.py#_hash_plockfile",
      "file": "ubiquity-harpoon/app/services/ledger.py",
      "export": "_hash_plockfile"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/ledger.py#seal_plock",
      "file": "ubiquity-harpoon/app/services/ledger.py",
      "export": "seal_plock"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/ledger.py#query_ledger",
      "file": "ubiquity-harpoon/app/services/ledger.py",
      "export": "query_ledger"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/ledger.py#get_weighted_snapshot",
      "file": "ubiquity-harpoon/app/services/ledger.py",
      "export": "get_weighted_snapshot"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/requesty_client.py#get_anthropic_client",
      "file": "ubiquity-harpoon/app/services/requesty_client.py",
      "export": "get_anthropic_client"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/requesty_client.py#infer",
      "file": "ubiquity-harpoon/app/services/requesty_client.py",
      "export": "infer"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/ubiq_solo.py#__init__",
      "file": "ubiquity-harpoon/app/services/ubiq_solo.py",
      "export": "__init__"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/ubiq_solo.py#_ensure_seed",
      "file": "ubiquity-harpoon/app/services/ubiq_solo.py",
      "export": "_ensure_seed"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/ubiq_solo.py#_ensure_reintegration_token",
      "file": "ubiquity-harpoon/app/services/ubiq_solo.py",
      "export": "_ensure_reintegration_token"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/ubiq_solo.py#_derive_agent_id",
      "file": "ubiquity-harpoon/app/services/ubiq_solo.py",
      "export": "_derive_agent_id"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/ubiq_solo.py#_derive_anchor_0",
      "file": "ubiquity-harpoon/app/services/ubiq_solo.py",
      "export": "_derive_anchor_0"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/ubiq_solo.py#_now",
      "file": "ubiquity-harpoon/app/services/ubiq_solo.py",
      "export": "_now"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/ubiq_solo.py#state",
      "file": "ubiquity-harpoon/app/services/ubiq_solo.py",
      "export": "state"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/ubiq_solo.py#begin_run",
      "file": "ubiquity-harpoon/app/services/ubiq_solo.py",
      "export": "begin_run"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/ubiq_solo.py#record_event",
      "file": "ubiquity-harpoon/app/services/ubiq_solo.py",
      "export": "record_event"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/ubiq_solo.py#export_capsule",
      "file": "ubiquity-harpoon/app/services/ubiq_solo.py",
      "export": "export_capsule"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/ubiq_solo.py#_format_labels",
      "file": "ubiquity-harpoon/app/services/ubiq_solo.py",
      "export": "_format_labels"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/schemas.py#check_max_repos",
      "file": "ubiquity-harpoon/app/services/schemas.py",
      "export": "check_max_repos"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/schemas.py#check_review_minutes",
      "file": "ubiquity-harpoon/app/services/schemas.py",
      "export": "check_review_minutes"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/schemas.py#goal_must_exist",
      "file": "ubiquity-harpoon/app/services/schemas.py",
      "export": "goal_must_exist"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/rust_bridge.py#fragment_hash",
      "file": "ubiquity-harpoon/app/services/rust_bridge.py",
      "export": "fragment_hash"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/rust_bridge.py#__init__",
      "file": "ubiquity-harpoon/app/services/rust_bridge.py",
      "export": "__init__"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/rust_bridge.py#_initialise_engine",
      "file": "ubiquity-harpoon/app/services/rust_bridge.py",
      "export": "_initialise_engine"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/rust_bridge.py#_update_thread_metadata",
      "file": "ubiquity-harpoon/app/services/rust_bridge.py",
      "export": "_update_thread_metadata"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/rust_bridge.py#available",
      "file": "ubiquity-harpoon/app/services/rust_bridge.py",
      "export": "available"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/rust_bridge.py#thread_count",
      "file": "ubiquity-harpoon/app/services/rust_bridge.py",
      "export": "thread_count"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/rust_bridge.py#configured_threads",
      "file": "ubiquity-harpoon/app/services/rust_bridge.py",
      "export": "configured_threads"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/rust_bridge.py#configure_threads",
      "file": "ubiquity-harpoon/app/services/rust_bridge.py",
      "export": "configure_threads"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/rust_bridge.py#run_cycle",
      "file": "ubiquity-harpoon/app/services/rust_bridge.py",
      "export": "run_cycle"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/rust_bridge.py#fingerprint",
      "file": "ubiquity-harpoon/app/services/rust_bridge.py",
      "export": "fingerprint"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/rust_bridge.py#hash_fragment",
      "file": "ubiquity-harpoon/app/services/rust_bridge.py",
      "export": "hash_fragment"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/config_service.py#def_create_db_and_tables",
      "file": "ubiquity-harpoon/app/services/config_service.py",
      "export": "def_create_db_and_tables"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/config_service.py#get_config",
      "file": "ubiquity-harpoon/app/services/config_service.py",
      "export": "get_config"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/config_service.py#set_config",
      "file": "ubiquity-harpoon/app/services/config_service.py",
      "export": "set_config"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/config_service.py#load_all_configs",
      "file": "ubiquity-harpoon/app/services/config_service.py",
      "export": "load_all_configs"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/github_client.py#get_github_client",
      "file": "ubiquity-harpoon/app/services/github_client.py",
      "export": "get_github_client"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/github_client.py#list_repos_in_orgs",
      "file": "ubiquity-harpoon/app/services/github_client.py",
      "export": "list_repos_in_orgs"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/github_client.py#create_pull_request",
      "file": "ubiquity-harpoon/app/services/github_client.py",
      "export": "create_pull_request"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/fusion_bridge.py#compute_hash",
      "file": "ubiquity-harpoon/app/services/fusion_bridge.py",
      "export": "compute_hash"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/fusion_bridge.py#to_payload",
      "file": "ubiquity-harpoon/app/services/fusion_bridge.py",
      "export": "to_payload"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/fusion_bridge.py#log",
      "file": "ubiquity-harpoon/app/services/fusion_bridge.py",
      "export": "log"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/fusion_bridge.py#__init__",
      "file": "ubiquity-harpoon/app/services/fusion_bridge.py",
      "export": "__init__"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/fusion_bridge.py#_ensure_run",
      "file": "ubiquity-harpoon/app/services/fusion_bridge.py",
      "export": "_ensure_run"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/fusion_bridge.py#enqueue_dump",
      "file": "ubiquity-harpoon/app/services/fusion_bridge.py",
      "export": "enqueue_dump"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/fusion_bridge.py#_extract_fragments",
      "file": "ubiquity-harpoon/app/services/fusion_bridge.py",
      "export": "_extract_fragments"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/fusion_bridge.py#process_envelope",
      "file": "ubiquity-harpoon/app/services/fusion_bridge.py",
      "export": "process_envelope"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/fusion_bridge.py#_score_fragment",
      "file": "ubiquity-harpoon/app/services/fusion_bridge.py",
      "export": "_score_fragment"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/fusion_bridge.py#get_status",
      "file": "ubiquity-harpoon/app/services/fusion_bridge.py",
      "export": "get_status"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/fusion_bridge.py#_persist_run",
      "file": "ubiquity-harpoon/app/services/fusion_bridge.py",
      "export": "_persist_run"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/fusion_bridge.py#time_to_datetime",
      "file": "ubiquity-harpoon/app/services/fusion_bridge.py",
      "export": "time_to_datetime"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/synthesis.py#llm_score_and_suggest",
      "file": "ubiquity-harpoon/app/services/synthesis.py",
      "export": "llm_score_and_suggest"
    },
    {
      "id": "sym:ubiquity-harpoon/app/services/synthesis.py#llm_delegation_plan",
      "file": "ubiquity-harpoon/app/services/synthesis.py",
      "export": "llm_delegation_plan"
    },
    {
      "id": "sym:ubiquity-harpoon/rust/harpoon-core/src/lib.rs#pub struct FragmentInput",
      "file": "ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "export": "pub struct FragmentInput"
    },
    {
      "id": "sym:ubiquity-harpoon/rust/harpoon-core/src/lib.rs#pub struct FragmentReport",
      "file": "ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "export": "pub struct FragmentReport"
    },
    {
      "id": "sym:ubiquity-harpoon/rust/harpoon-core/src/lib.rs#pub struct CycleEvent",
      "file": "ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "export": "pub struct CycleEvent"
    },
    {
      "id": "sym:ubiquity-harpoon/rust/harpoon-core/src/lib.rs#pub struct HarpoonCycle",
      "file": "ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "export": "pub struct HarpoonCycle"
    },
    {
      "id": "sym:ubiquity-harpoon/rust/harpoon-core/src/lib.rs#pub struct HarpoonEngine",
      "file": "ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "export": "pub struct HarpoonEngine"
    },
    {
      "id": "sym:ubiquity-harpoon/rust/harpoon-core/src/lib.rs#pub fn as_dict",
      "file": "ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "export": "pub fn as_dict"
    },
    {
      "id": "sym:ubiquity-harpoon/rust/harpoon-core/src/lib.rs#pub fn as_dict",
      "file": "ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "export": "pub fn as_dict"
    },
    {
      "id": "sym:ubiquity-harpoon/rust/harpoon-core/src/lib.rs#pub fn as_dict",
      "file": "ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "export": "pub fn as_dict"
    },
    {
      "id": "sym:ubiquity-harpoon/rust/harpoon-core/src/lib.rs#pub fn new",
      "file": "ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "export": "pub fn new"
    },
    {
      "id": "sym:ubiquity-harpoon/rust/harpoon-core/src/lib.rs#pub fn envelope_cycle",
      "file": "ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "export": "pub fn envelope_cycle"
    },
    {
      "id": "sym:ubiquity-harpoon/rust/harpoon-core/src/lib.rs#pub fn fingerprint",
      "file": "ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "export": "pub fn fingerprint"
    },
    {
      "id": "sym:ubiquity-harpoon/rust/harpoon-core/src/lib.rs#pub fn fragment_hash",
      "file": "ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "export": "pub fn fragment_hash"
    },
    {
      "id": "sym:ubiquity-harpoon/rust/harpoon-core/src/lib.rs#pub struct WasmHarpoonEngine",
      "file": "ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "export": "pub struct WasmHarpoonEngine"
    },
    {
      "id": "sym:ubiquity-harpoon/rust/harpoon-core/src/lib.rs#pub fn new",
      "file": "ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "export": "pub fn new"
    },
    {
      "id": "sym:ubiquity-harpoon/rust/harpoon-core/src/lib.rs#pub fn envelope_cycle",
      "file": "ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "export": "pub fn envelope_cycle"
    },
    {
      "id": "sym:ubiquity-harpoon/rust/harpoon-core/src/lib.rs#pub fn fragment_hash",
      "file": "ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "export": "pub fn fragment_hash"
    }
  ],
  "flows": [
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "Err",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "Ok",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "Some",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "ThreadPoolBuild",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "absorbed",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "add",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "add_function",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "allow_threads",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "anchor_next",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "anchor_prev",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "anchors",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "as_bytes",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "as_dict",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "body_len",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "build",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "call_method1",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "cfg",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "cfg_attr",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "chars",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "clamp",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "clone",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "collect",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "compute_anchor_hash",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "compute_comment_ratio",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "compute_fingerprint",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "compute_indent_balance",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "compute_states",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "configured_threads",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "count",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "current_num_threads",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "default",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "derive",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "detect_language",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "encode",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "ends_with",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "envelope_cycle",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "error",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "event",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "events",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "expect",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "extract",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "extract_bound",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "finalize",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "fingerprint",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "fragment_hash",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "from",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "from_data",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "from_str",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "from_value",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "get_absorbed",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "get_anchors",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "get_events",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "get_item",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "get_iterations",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "get_mut",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "get_pending",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "harpoon_core",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "hash",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "hygiene_score",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "idx",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "import_bound",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "install",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "into",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "into_iter",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "into_par_iter",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "is_empty",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "is_match",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "iter",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "iteration_index",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "iterations",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "language",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "len",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "lines",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "map",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "map_err",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "max",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "min",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "new",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "new_err",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "not",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "num_threads",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "path",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "pending",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "pop_front",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "powi",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "push",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "push_back",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "push_front",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "pyclass",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "pyo3",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "round",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "run_cycle",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "serde_json_to_py",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "split_whitespace",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "starts_with",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "take_while",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "thread_count",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "threads",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "to_ascii_lowercase",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "to_report",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "to_string",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "to_value",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "trim",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "unwrap_or",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "update",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "wasm_bindgen",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon-core/src/lib.rs",
      "to": "with_min_len",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.js",
      "to": "Error",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.js",
      "to": "Instance",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.js",
      "to": "Module",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.js",
      "to": "Set",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.js",
      "to": "TextDecoder",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.js",
      "to": "TextEncoder",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.js",
      "to": "URL",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.js",
      "to": "Uint8Array",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.js",
      "to": "WASM",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.js",
      "to": "__wbg_finalize_init",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.js",
      "to": "__wbg_get_imports",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.js",
      "to": "__wbg_init",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.js",
      "to": "__wbg_init_memory",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.js",
      "to": "__wbg_load",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.js",
      "to": "__wbindgen_free",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.js",
      "to": "__wbindgen_start",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.js",
      "to": "arrayBuffer",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.js",
      "to": "catch",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.js",
      "to": "charCodeAt",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.js",
      "to": "classify_task",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.js",
      "to": "decode",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.js",
      "to": "decodeText",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.js",
      "to": "encode",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.js",
      "to": "encodeInto",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.js",
      "to": "encodeString",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.js",
      "to": "fetch",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.js",
      "to": "function",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.js",
      "to": "get",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.js",
      "to": "getPrototypeOf",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.js",
      "to": "getStringFromWasm0",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.js",
      "to": "getUint8ArrayMemory0",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.js",
      "to": "grow",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.js",
      "to": "has",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.js",
      "to": "initSync",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.js",
      "to": "instantiate",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.js",
      "to": "instantiateStreaming",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.js",
      "to": "malloc",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.js",
      "to": "passStringToWasm0",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.js",
      "to": "realloc",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.js",
      "to": "set",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.js",
      "to": "slice",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.js",
      "to": "subarray",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.js",
      "to": "warn",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.d.ts",
      "to": "WASM",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.d.ts",
      "to": "__wbg_init",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.d.ts",
      "to": "classify_task",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/pkg/wasm_classifier.d.ts",
      "to": "initSync",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/src/lib.rs",
      "to": "WASM",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/src/lib.rs",
      "to": "cfg",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/src/lib.rs",
      "to": "classify_task",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/src/lib.rs",
      "to": "contains",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/src/lib.rs",
      "to": "derive",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/src/lib.rs",
      "to": "fallback",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/src/lib.rs",
      "to": "get_version",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/src/lib.rs",
      "to": "init",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/src/lib.rs",
      "to": "let",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/src/lib.rs",
      "to": "module",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/src/lib.rs",
      "to": "set_once",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/src/lib.rs",
      "to": "test_classify_code",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/src/lib.rs",
      "to": "test_classify_reasoning",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/src/lib.rs",
      "to": "test_classify_summary",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/src/lib.rs",
      "to": "to_lowercase",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/src/lib.rs",
      "to": "to_string",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/src/lib.rs",
      "to": "unwrap_or_else",
      "edge": "calls"
    },
    {
      "from": "file:crates/wasm_classifier/src/lib.rs",
      "to": "wasm_bindgen",
      "edge": "calls"
    },
    {
      "from": "file:crates/pyffi/src/lib.rs",
      "to": "Ok",
      "edge": "calls"
    },
    {
      "from": "file:crates/pyffi/src/lib.rs",
      "to": "add_function",
      "edge": "calls"
    },
    {
      "from": "file:crates/pyffi/src/lib.rs",
      "to": "block_on",
      "edge": "calls"
    },
    {
      "from": "file:crates/pyffi/src/lib.rs",
      "to": "classify",
      "edge": "calls"
    },
    {
      "from": "file:crates/pyffi/src/lib.rs",
      "to": "derive",
      "edge": "calls"
    },
    {
      "from": "file:crates/pyffi/src/lib.rs",
      "to": "homeskillet_oa4_rs",
      "edge": "calls"
    },
    {
      "from": "file:crates/pyffi/src/lib.rs",
      "to": "init",
      "edge": "calls"
    },
    {
      "from": "file:crates/pyffi/src/lib.rs",
      "to": "json",
      "edge": "calls"
    },
    {
      "from": "file:crates/pyffi/src/lib.rs",
      "to": "map_err",
      "edge": "calls"
    },
    {
      "from": "file:crates/pyffi/src/lib.rs",
      "to": "new",
      "edge": "calls"
    },
    {
      "from": "file:crates/pyffi/src/lib.rs",
      "to": "new_err",
      "edge": "calls"
    },
    {
      "from": "file:crates/pyffi/src/lib.rs",
      "to": "post",
      "edge": "calls"
    },
    {
      "from": "file:crates/pyffi/src/lib.rs",
      "to": "run",
      "edge": "calls"
    },
    {
      "from": "file:crates/pyffi/src/lib.rs",
      "to": "send",
      "edge": "calls"
    },
    {
      "from": "file:crates/pyffi/src/lib.rs",
      "to": "to_string",
      "edge": "calls"
    },
    {
      "from": "file:crates/pyffi/src/lib.rs",
      "to": "trim_end_matches",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/lib.rs",
      "to": "Ok",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/lib.rs",
      "to": "analyze_repo_tool",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/lib.rs",
      "to": "cfg",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/lib.rs",
      "to": "classify_tool",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/lib.rs",
      "to": "clone",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/lib.rs",
      "to": "cloned",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/lib.rs",
      "to": "collect",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/lib.rs",
      "to": "covenant_schema",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/lib.rs",
      "to": "create_pr_tool",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/lib.rs",
      "to": "creation_prompt",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/lib.rs",
      "to": "delegation_plan_schema",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/lib.rs",
      "to": "delegation_prompt",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/lib.rs",
      "to": "derive",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/lib.rs",
      "to": "expect",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/lib.rs",
      "to": "export_json",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/lib.rs",
      "to": "filter",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/lib.rs",
      "to": "get",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/lib.rs",
      "to": "get_prompt",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/lib.rs",
      "to": "get_schema",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/lib.rs",
      "to": "get_tool",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/lib.rs",
      "to": "hygiene_prompt",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/lib.rs",
      "to": "inference_tool",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/lib.rs",
      "to": "insert",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/lib.rs",
      "to": "load_builtin_resources",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/lib.rs",
      "to": "new",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/lib.rs",
      "to": "prompts_for_agent",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/lib.rs",
      "to": "read",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/lib.rs",
      "to": "register_prompt",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/lib.rs",
      "to": "register_schema",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/lib.rs",
      "to": "register_tool",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/lib.rs",
      "to": "render_prompt",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/lib.rs",
      "to": "replace",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/lib.rs",
      "to": "review_prompt",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/lib.rs",
      "to": "serde",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/lib.rs",
      "to": "strike_order_schema",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/lib.rs",
      "to": "test_prompt_rendering",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/lib.rs",
      "to": "to_string",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/lib.rs",
      "to": "unwrap",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/lib.rs",
      "to": "values",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/lib.rs",
      "to": "write",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/sampling.rs",
      "to": "Ok",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/sampling.rs",
      "to": "Some",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/sampling.rs",
      "to": "architect",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/sampling.rs",
      "to": "boundaries",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/sampling.rs",
      "to": "cfg",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/sampling.rs",
      "to": "clone",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/sampling.rs",
      "to": "cloned",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/sampling.rs",
      "to": "collect",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/sampling.rs",
      "to": "default",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/sampling.rs",
      "to": "derive",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/sampling.rs",
      "to": "ends_with",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/sampling.rs",
      "to": "filter",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/sampling.rs",
      "to": "foreman",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/sampling.rs",
      "to": "get",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/sampling.rs",
      "to": "get_samples_for_validation",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/sampling.rs",
      "to": "insert",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/sampling.rs",
      "to": "is_empty",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/sampling.rs",
      "to": "iter",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/sampling.rs",
      "to": "len",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/sampling.rs",
      "to": "max",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/sampling.rs",
      "to": "new",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/sampling.rs",
      "to": "push",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/sampling.rs",
      "to": "record_sample",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/sampling.rs",
      "to": "register_strategy",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/sampling.rs",
      "to": "sample_from_array",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/sampling.rs",
      "to": "should_sample",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/sampling.rs",
      "to": "step_by",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/sampling.rs",
      "to": "take",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/sampling.rs",
      "to": "test_array_sampling",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/sampling.rs",
      "to": "test_sampling_strategies",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/sampling.rs",
      "to": "unwrap",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/sampling.rs",
      "to": "worker",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/tools/covenant.rs",
      "to": "create_covenant_tool",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/tools/covenant.rs",
      "to": "to_string",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/tools/mlx.rs",
      "to": "classify_tool",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/tools/mlx.rs",
      "to": "confidence",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/tools/mlx.rs",
      "to": "inference_tool",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/tools/mlx.rs",
      "to": "score",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/tools/mlx.rs",
      "to": "to_string",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/tools/github.rs",
      "to": "analyze_repo_tool",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/tools/github.rs",
      "to": "create_pr_tool",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/tools/github.rs",
      "to": "name",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/tools/github.rs",
      "to": "signal",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/tools/github.rs",
      "to": "to_string",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/tools/github.rs",
      "to": "update",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/tools/github.rs",
      "to": "used",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/tools/fusion.rs",
      "to": "process_fragments_tool",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/tools/fusion.rs",
      "to": "to_string",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/schemas/covenant.rs",
      "to": "covenant_schema",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/schemas/covenant.rs",
      "to": "to_string",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/schemas/strike.rs",
      "to": "strike_order_schema",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/schemas/strike.rs",
      "to": "to_string",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/schemas/agent.rs",
      "to": "agent_message_schema",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/schemas/agent.rs",
      "to": "delegation_plan_schema",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/schemas/agent.rs",
      "to": "to_string",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/schemas/fusion.rs",
      "to": "fusion_trail_schema",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/schemas/fusion.rs",
      "to": "to_string",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/prompts/covenant.rs",
      "to": "Agnos",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/prompts/covenant.rs",
      "to": "Anchor",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/prompts/covenant.rs",
      "to": "Role",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/prompts/covenant.rs",
      "to": "creation_prompt",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/prompts/covenant.rs",
      "to": "reality",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/prompts/covenant.rs",
      "to": "review_prompt",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/prompts/covenant.rs",
      "to": "state",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/prompts/covenant.rs",
      "to": "tier",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/prompts/covenant.rs",
      "to": "to_string",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/prompts/strike.rs",
      "to": "Foremen",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/prompts/strike.rs",
      "to": "Workers",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/prompts/strike.rs",
      "to": "delegation_prompt",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/prompts/strike.rs",
      "to": "oriented",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/prompts/strike.rs",
      "to": "pr_creation_prompt",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/prompts/strike.rs",
      "to": "tasks",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/prompts/strike.rs",
      "to": "to_string",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/prompts/strike.rs",
      "to": "toml",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/prompts/strike.rs",
      "to": "yaml",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/prompts/agent.rs",
      "to": "agent_communication_prompt",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/prompts/agent.rs",
      "to": "task_delegation_prompt",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/prompts/agent.rs",
      "to": "to_string",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/prompts/fusion.rs",
      "to": "hygiene_prompt",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/prompts/fusion.rs",
      "to": "score",
      "edge": "calls"
    },
    {
      "from": "file:crates/resources/src/prompts/fusion.rs",
      "to": "to_string",
      "edge": "calls"
    },
    {
      "from": "file:crates/engine_pymlx/src/lib.rs",
      "to": "Ok",
      "edge": "calls"
    },
    {
      "from": "file:crates/engine_pymlx/src/lib.rs",
      "to": "Some",
      "edge": "calls"
    },
    {
      "from": "file:crates/engine_pymlx/src/lib.rs",
      "to": "as_str",
      "edge": "calls"
    },
    {
      "from": "file:crates/engine_pymlx/src/lib.rs",
      "to": "call",
      "edge": "calls"
    },
    {
      "from": "file:crates/engine_pymlx/src/lib.rs",
      "to": "call1",
      "edge": "calls"
    },
    {
      "from": "file:crates/engine_pymlx/src/lib.rs",
      "to": "clone_ref",
      "edge": "calls"
    },
    {
      "from": "file:crates/engine_pymlx/src/lib.rs",
      "to": "derive",
      "edge": "calls"
    },
    {
      "from": "file:crates/engine_pymlx/src/lib.rs",
      "to": "ensure_loaded",
      "edge": "calls"
    },
    {
      "from": "file:crates/engine_pymlx/src/lib.rs",
      "to": "expect",
      "edge": "calls"
    },
    {
      "from": "file:crates/engine_pymlx/src/lib.rs",
      "to": "extract",
      "edge": "calls"
    },
    {
      "from": "file:crates/engine_pymlx/src/lib.rs",
      "to": "generate",
      "edge": "calls"
    },
    {
      "from": "file:crates/engine_pymlx/src/lib.rs",
      "to": "get",
      "edge": "calls"
    },
    {
      "from": "file:crates/engine_pymlx/src/lib.rs",
      "to": "get_item",
      "edge": "calls"
    },
    {
      "from": "file:crates/engine_pymlx/src/lib.rs",
      "to": "getattr",
      "edge": "calls"
    },
    {
      "from": "file:crates/engine_pymlx/src/lib.rs",
      "to": "import_bound",
      "edge": "calls"
    },
    {
      "from": "file:crates/engine_pymlx/src/lib.rs",
      "to": "into_py",
      "edge": "calls"
    },
    {
      "from": "file:crates/engine_pymlx/src/lib.rs",
      "to": "is_none",
      "edge": "calls"
    },
    {
      "from": "file:crates/engine_pymlx/src/lib.rs",
      "to": "let",
      "edge": "calls"
    },
    {
      "from": "file:crates/engine_pymlx/src/lib.rs",
      "to": "new",
      "edge": "calls"
    },
    {
      "from": "file:crates/engine_pymlx/src/lib.rs",
      "to": "new_bound",
      "edge": "calls"
    },
    {
      "from": "file:crates/engine_pymlx/src/lib.rs",
      "to": "ok",
      "edge": "calls"
    },
    {
      "from": "file:crates/engine_pymlx/src/lib.rs",
      "to": "set",
      "edge": "calls"
    },
    {
      "from": "file:crates/engine_pymlx/src/lib.rs",
      "to": "set_item",
      "edge": "calls"
    },
    {
      "from": "file:crates/engine_pymlx/src/lib.rs",
      "to": "to_string",
      "edge": "calls"
    },
    {
      "from": "file:crates/engine_pymlx/src/lib.rs",
      "to": "with_gil",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/config.rs",
      "to": "Err",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/config.rs",
      "to": "Ok",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/config.rs",
      "to": "Some",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/config.rs",
      "to": "derive",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/config.rs",
      "to": "dotenv",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/config.rs",
      "to": "from_env",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/config.rs",
      "to": "load_hosted_ai_config",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/config.rs",
      "to": "ok",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/config.rs",
      "to": "parse",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/config.rs",
      "to": "to_string",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/config.rs",
      "to": "unwrap_or",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/config.rs",
      "to": "unwrap_or_else",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/config.rs",
      "to": "validate",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/config.rs",
      "to": "var",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/mock_engine.rs",
      "to": "Ok",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/mock_engine.rs",
      "to": "chars",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/mock_engine.rs",
      "to": "contains",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/mock_engine.rs",
      "to": "generate",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/mock_engine.rs",
      "to": "new",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/mock_engine.rs",
      "to": "take",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/mock_engine.rs",
      "to": "to_string",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/main.rs",
      "to": "Json",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/main.rs",
      "to": "Ok",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/main.rs",
      "to": "Some",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/main.rs",
      "to": "State",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/main.rs",
      "to": "as_millis",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/main.rs",
      "to": "as_ref",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/main.rs",
      "to": "bind",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/main.rs",
      "to": "classify_legacy",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/main.rs",
      "to": "clone",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/main.rs",
      "to": "create_covenant",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/main.rs",
      "to": "derive",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/main.rs",
      "to": "elapsed",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/main.rs",
      "to": "execute_strike",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/main.rs",
      "to": "fmt",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/main.rs",
      "to": "from_default_env",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/main.rs",
      "to": "from_env",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/main.rs",
      "to": "get",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/main.rs",
      "to": "health",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/main.rs",
      "to": "init",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/main.rs",
      "to": "into_make_service",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/main.rs",
      "to": "layer",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/main.rs",
      "to": "main",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/main.rs",
      "to": "map",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/main.rs",
      "to": "map_err",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/main.rs",
      "to": "new",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/main.rs",
      "to": "now",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/main.rs",
      "to": "ok_or_else",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/main.rs",
      "to": "parse",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/main.rs",
      "to": "permissive",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/main.rs",
      "to": "post",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/main.rs",
      "to": "process",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/main.rs",
      "to": "process_unified",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/main.rs",
      "to": "reality_state",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/main.rs",
      "to": "route",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/main.rs",
      "to": "run_legacy",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/main.rs",
      "to": "serve",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/main.rs",
      "to": "target_state",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/main.rs",
      "to": "to_string",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/main.rs",
      "to": "with_env_filter",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/main.rs",
      "to": "with_state",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/auth/github_oauth.rs",
      "to": "AllOf",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/auth/github_oauth.rs",
      "to": "Err",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/auth/github_oauth.rs",
      "to": "Ok",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/auth/github_oauth.rs",
      "to": "Success",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/auth/github_oauth.rs",
      "to": "UrlEncoded",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/auth/github_oauth.rs",
      "to": "as_str",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/auth/github_oauth.rs",
      "to": "cfg",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/auth/github_oauth.rs",
      "to": "create",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/auth/github_oauth.rs",
      "to": "derive",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/auth/github_oauth.rs",
      "to": "form",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/auth/github_oauth.rs",
      "to": "from_secs",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/auth/github_oauth.rs",
      "to": "get",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/auth/github_oauth.rs",
      "to": "get_user",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/auth/github_oauth.rs",
      "to": "header",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/auth/github_oauth.rs",
      "to": "into",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/auth/github_oauth.rs",
      "to": "json",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/auth/github_oauth.rs",
      "to": "match_body",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/auth/github_oauth.rs",
      "to": "match_header",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/auth/github_oauth.rs",
      "to": "mock",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/auth/github_oauth.rs",
      "to": "module",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/auth/github_oauth.rs",
      "to": "new",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/auth/github_oauth.rs",
      "to": "poll_for_token",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/auth/github_oauth.rs",
      "to": "post",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/auth/github_oauth.rs",
      "to": "send",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/auth/github_oauth.rs",
      "to": "serde",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/auth/github_oauth.rs",
      "to": "sleep",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/auth/github_oauth.rs",
      "to": "start_device_flow",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/auth/github_oauth.rs",
      "to": "test_start_device_flow",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/auth/github_oauth.rs",
      "to": "to_string",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/auth/github_oauth.rs",
      "to": "unwrap",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/auth/github_oauth.rs",
      "to": "with_body",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/auth/github_oauth.rs",
      "to": "with_header",
      "edge": "calls"
    },
    {
      "from": "file:crates/service/src/auth/github_oauth.rs",
      "to": "with_status",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/handlers.rs",
      "to": "Array",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/handlers.rs",
      "to": "Err",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/handlers.rs",
      "to": "Ok",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/handlers.rs",
      "to": "Some",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/handlers.rs",
      "to": "and_then",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/handlers.rs",
      "to": "as_array",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/handlers.rs",
      "to": "as_bool",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/handlers.rs",
      "to": "as_str",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/handlers.rs",
      "to": "block_on",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/handlers.rs",
      "to": "cloned",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/handlers.rs",
      "to": "collect",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/handlers.rs",
      "to": "contains",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/handlers.rs",
      "to": "current",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/handlers.rs",
      "to": "filter",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/handlers.rs",
      "to": "get",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/handlers.rs",
      "to": "handle_agents_resource",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/handlers.rs",
      "to": "handle_analyze_repo",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/handlers.rs",
      "to": "handle_classify",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/handlers.rs",
      "to": "handle_covenant_evaluate",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/handlers.rs",
      "to": "handle_covenant_resource",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/handlers.rs",
      "to": "handle_create_pr",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/handlers.rs",
      "to": "handle_inference",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/handlers.rs",
      "to": "handle_qoq_index",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/handlers.rs",
      "to": "handle_qoq_locate",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/handlers.rs",
      "to": "handle_qoq_status",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/handlers.rs",
      "to": "handle_resource_read",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/handlers.rs",
      "to": "handle_sampling",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/handlers.rs",
      "to": "handle_strike_resource",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/handlers.rs",
      "to": "handle_tool_call",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/handlers.rs",
      "to": "into_iter",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/handlers.rs",
      "to": "len",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/handlers.rs",
      "to": "load_manifest",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/handlers.rs",
      "to": "ok_or_else",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/handlers.rs",
      "to": "process",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/handlers.rs",
      "to": "refresh_manifest",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/handlers.rs",
      "to": "sample_from_array",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/handlers.rs",
      "to": "split",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/handlers.rs",
      "to": "to_lowercase",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/handlers.rs",
      "to": "to_string",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/handlers.rs",
      "to": "to_value",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/handlers.rs",
      "to": "unwrap_or",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/protocol.rs",
      "to": "derive",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/protocol.rs",
      "to": "serde",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/lib.rs",
      "to": "Err",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/lib.rs",
      "to": "MCP",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/lib.rs",
      "to": "Ok",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/lib.rs",
      "to": "add_connection",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/lib.rs",
      "to": "call_tool",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/lib.rs",
      "to": "cfg",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/lib.rs",
      "to": "clone",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/lib.rs",
      "to": "collect",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/lib.rs",
      "to": "derive",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/lib.rs",
      "to": "extend_with",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/lib.rs",
      "to": "get_prompt",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/lib.rs",
      "to": "handle_request",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/lib.rs",
      "to": "handle_resource_read",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/lib.rs",
      "to": "handle_sampling",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/lib.rs",
      "to": "handle_tool_call",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/lib.rs",
      "to": "initialize",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/lib.rs",
      "to": "internal_error",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/lib.rs",
      "to": "invalid_params",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/lib.rs",
      "to": "list_prompts",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/lib.rs",
      "to": "list_resources",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/lib.rs",
      "to": "list_tools",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/lib.rs",
      "to": "map",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/lib.rs",
      "to": "map_err",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/lib.rs",
      "to": "new",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/lib.rs",
      "to": "new_v4",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/lib.rs",
      "to": "ok_or_else",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/lib.rs",
      "to": "outputs",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/lib.rs",
      "to": "parse",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/lib.rs",
      "to": "push",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/lib.rs",
      "to": "read",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/lib.rs",
      "to": "read_resource",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/lib.rs",
      "to": "remove_connection",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/lib.rs",
      "to": "render_prompt",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/lib.rs",
      "to": "retain",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/lib.rs",
      "to": "rpc",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/lib.rs",
      "to": "sample",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/lib.rs",
      "to": "serde",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/lib.rs",
      "to": "test_mcp_server_creation",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/lib.rs",
      "to": "to_delegate",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/lib.rs",
      "to": "to_string",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/lib.rs",
      "to": "values",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/lib.rs",
      "to": "write",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/cli.rs",
      "to": "Err",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/cli.rs",
      "to": "Ok",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/cli.rs",
      "to": "Some",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/cli.rs",
      "to": "address",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/cli.rs",
      "to": "allow",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/cli.rs",
      "to": "arg",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/cli.rs",
      "to": "as_bytes",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/cli.rs",
      "to": "as_str",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/cli.rs",
      "to": "clone",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/cli.rs",
      "to": "command",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/cli.rs",
      "to": "derive",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/cli.rs",
      "to": "example_client",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/cli.rs",
      "to": "fmt",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/cli.rs",
      "to": "init",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/cli.rs",
      "to": "let",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/cli.rs",
      "to": "main",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/cli.rs",
      "to": "new",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/cli.rs",
      "to": "parse",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/cli.rs",
      "to": "piped",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/cli.rs",
      "to": "read_line",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/cli.rs",
      "to": "run",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/cli.rs",
      "to": "spawn",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/cli.rs",
      "to": "stdin",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/cli.rs",
      "to": "stdout",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/cli.rs",
      "to": "take",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/cli.rs",
      "to": "unwrap",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/cli.rs",
      "to": "use",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/cli.rs",
      "to": "with_env_filter",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/cli.rs",
      "to": "write_all",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/websocket.rs",
      "to": "Close",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/websocket.rs",
      "to": "Err",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/websocket.rs",
      "to": "Ok",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/websocket.rs",
      "to": "Ping",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/websocket.rs",
      "to": "Pong",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/websocket.rs",
      "to": "Some",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/websocket.rs",
      "to": "Text",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/websocket.rs",
      "to": "accept",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/websocket.rs",
      "to": "accept_async",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/websocket.rs",
      "to": "add_connection",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/websocket.rs",
      "to": "arg",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/websocket.rs",
      "to": "bind",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/websocket.rs",
      "to": "clone",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/websocket.rs",
      "to": "derive",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/websocket.rs",
      "to": "drop",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/websocket.rs",
      "to": "exists",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/websocket.rs",
      "to": "from_str",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/websocket.rs",
      "to": "handle_request",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/websocket.rs",
      "to": "handle_session",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/websocket.rs",
      "to": "let",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/websocket.rs",
      "to": "load_manifest",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/websocket.rs",
      "to": "lock",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/websocket.rs",
      "to": "new",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/websocket.rs",
      "to": "new_v4",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/websocket.rs",
      "to": "next",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/websocket.rs",
      "to": "output",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/websocket.rs",
      "to": "push",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/websocket.rs",
      "to": "read_to_string",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/websocket.rs",
      "to": "refresh_manifest",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/websocket.rs",
      "to": "remove_connection",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/websocket.rs",
      "to": "retain",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/websocket.rs",
      "to": "run",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/websocket.rs",
      "to": "send",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/websocket.rs",
      "to": "spawn",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/websocket.rs",
      "to": "success",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/websocket.rs",
      "to": "to_string",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/stdio.rs",
      "to": "Err",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/stdio.rs",
      "to": "Ok",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/stdio.rs",
      "to": "add_connection",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/stdio.rs",
      "to": "as_bytes",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/stdio.rs",
      "to": "clear",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/stdio.rs",
      "to": "clone",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/stdio.rs",
      "to": "flush",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/stdio.rs",
      "to": "handle_request",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/stdio.rs",
      "to": "is_empty",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/stdio.rs",
      "to": "new",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/stdio.rs",
      "to": "new_v4",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/stdio.rs",
      "to": "read_line",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/stdio.rs",
      "to": "remove_connection",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/stdio.rs",
      "to": "run",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/stdio.rs",
      "to": "stdin",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/stdio.rs",
      "to": "stdout",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/stdio.rs",
      "to": "to_string",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/stdio.rs",
      "to": "trim",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/stdio.rs",
      "to": "write_all",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/http.rs",
      "to": "Err",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/http.rs",
      "to": "Json",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/http.rs",
      "to": "Ok",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/http.rs",
      "to": "SSE",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/http.rs",
      "to": "Some",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/http.rs",
      "to": "State",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/http.rs",
      "to": "add_connection",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/http.rs",
      "to": "and_then",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/http.rs",
      "to": "as_array",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/http.rs",
      "to": "as_bool",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/http.rs",
      "to": "as_object",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/http.rs",
      "to": "bind",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/http.rs",
      "to": "check_needs_sse",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/http.rs",
      "to": "clone",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/http.rs",
      "to": "derive",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/http.rs",
      "to": "get",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/http.rs",
      "to": "handle_health",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/http.rs",
      "to": "handle_post",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/http.rs",
      "to": "handle_request",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/http.rs",
      "to": "handle_sse",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/http.rs",
      "to": "into_response",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/http.rs",
      "to": "layer",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/http.rs",
      "to": "len",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/http.rs",
      "to": "map_err",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/http.rs",
      "to": "new",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/http.rs",
      "to": "new_v4",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/http.rs",
      "to": "permissive",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/http.rs",
      "to": "post",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/http.rs",
      "to": "route",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/http.rs",
      "to": "router",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/http.rs",
      "to": "run",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/http.rs",
      "to": "serde",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/http.rs",
      "to": "serve",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/http.rs",
      "to": "to_string",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/http.rs",
      "to": "unwrap_or_else",
      "edge": "calls"
    },
    {
      "from": "file:crates/mcp_server/src/transport/http.rs",
      "to": "with_state",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/covenant.rs",
      "to": "Ok",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/covenant.rs",
      "to": "Some",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/covenant.rs",
      "to": "add_metadata",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/covenant.rs",
      "to": "build",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/covenant.rs",
      "to": "derive",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/covenant.rs",
      "to": "insert",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/covenant.rs",
      "to": "into",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/covenant.rs",
      "to": "new",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/covenant.rs",
      "to": "new_v4",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/covenant.rs",
      "to": "now",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/covenant.rs",
      "to": "ok_or_else",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/covenant.rs",
      "to": "reality_state",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/covenant.rs",
      "to": "serde",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/covenant.rs",
      "to": "target_state",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/covenant.rs",
      "to": "to_string",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/strike.rs",
      "to": "Err",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/strike.rs",
      "to": "Ok",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/strike.rs",
      "to": "Some",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/strike.rs",
      "to": "all",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/strike.rs",
      "to": "clone",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/strike.rs",
      "to": "create_pr_for_target",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/strike.rs",
      "to": "derive",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/strike.rs",
      "to": "enumerate",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/strike.rs",
      "to": "execute_strike",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/strike.rs",
      "to": "find",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/strike.rs",
      "to": "format",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/strike.rs",
      "to": "insert",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/strike.rs",
      "to": "is_empty",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/strike.rs",
      "to": "iter",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/strike.rs",
      "to": "len",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/strike.rs",
      "to": "map",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/strike.rs",
      "to": "min",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/strike.rs",
      "to": "monitor_strike",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/strike.rs",
      "to": "new",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/strike.rs",
      "to": "new_v4",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/strike.rs",
      "to": "now",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/strike.rs",
      "to": "ok_or_else",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/strike.rs",
      "to": "push",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/strike.rs",
      "to": "select_strike_targets",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/strike.rs",
      "to": "serde",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/strike.rs",
      "to": "targets",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/strike.rs",
      "to": "to_string",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/lib.rs",
      "to": "Ok",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/lib.rs",
      "to": "Some",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/lib.rs",
      "to": "as_ref",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/lib.rs",
      "to": "build",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/lib.rs",
      "to": "cfg",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/lib.rs",
      "to": "classification",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/lib.rs",
      "to": "classify",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/lib.rs",
      "to": "clone",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/lib.rs",
      "to": "cloned",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/lib.rs",
      "to": "create_covenant",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/lib.rs",
      "to": "derive",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/lib.rs",
      "to": "execute_strike",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/lib.rs",
      "to": "get",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/lib.rs",
      "to": "inference",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/lib.rs",
      "to": "insert",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/lib.rs",
      "to": "new",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/lib.rs",
      "to": "ok_or_else",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/lib.rs",
      "to": "process",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/lib.rs",
      "to": "process_fragment",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/lib.rs",
      "to": "process_with_hosted_ai",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/lib.rs",
      "to": "pub",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/lib.rs",
      "to": "read",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/lib.rs",
      "to": "run",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/lib.rs",
      "to": "run_with_hosted_ai",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/lib.rs",
      "to": "serde",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/lib.rs",
      "to": "test_unified_orchestrator_creation",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/lib.rs",
      "to": "to_string",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/lib.rs",
      "to": "write",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/fusion.rs",
      "to": "Ok",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/fusion.rs",
      "to": "Some",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/fusion.rs",
      "to": "cfg",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/fusion.rs",
      "to": "default",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/fusion.rs",
      "to": "derive",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/fusion.rs",
      "to": "envelope_cycle",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/fusion.rs",
      "to": "filter_map",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/fusion.rs",
      "to": "get_absorbed",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/fusion.rs",
      "to": "get_anchors",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/fusion.rs",
      "to": "get_iterations",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/fusion.rs",
      "to": "get_pending",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/fusion.rs",
      "to": "is_empty",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/fusion.rs",
      "to": "iter",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/fusion.rs",
      "to": "len",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/fusion.rs",
      "to": "main",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/fusion.rs",
      "to": "map_err",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/fusion.rs",
      "to": "new",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/fusion.rs",
      "to": "process_fragment",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/fusion.rs",
      "to": "process_fragments",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/fusion.rs",
      "to": "read",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/fusion.rs",
      "to": "stats",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/fusion.rs",
      "to": "sum",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/fusion.rs",
      "to": "test_fusion_orchestrator",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/fusion.rs",
      "to": "to_string",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/fusion.rs",
      "to": "to_vec",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/fusion.rs",
      "to": "unwrap",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/fusion.rs",
      "to": "with_gil",
      "edge": "calls"
    },
    {
      "from": "file:crates/harpoon_bridge/src/fusion.rs",
      "to": "write",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/types.rs",
      "to": "Ok",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/types.rs",
      "to": "as_deref",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/types.rs",
      "to": "as_millis",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/types.rs",
      "to": "as_ref",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/types.rs",
      "to": "classify",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/types.rs",
      "to": "classify_async",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/types.rs",
      "to": "clone",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/types.rs",
      "to": "count",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/types.rs",
      "to": "derive",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/types.rs",
      "to": "elapsed",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/types.rs",
      "to": "generate_direct",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/types.rs",
      "to": "is_some",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/types.rs",
      "to": "let",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/types.rs",
      "to": "new",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/types.rs",
      "to": "now",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/types.rs",
      "to": "run",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/types.rs",
      "to": "split_whitespace",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/types.rs",
      "to": "to_string",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/types.rs",
      "to": "unwrap",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/lib.rs",
      "to": "Ok",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/lib.rs",
      "to": "Some",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/lib.rs",
      "to": "and_then",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/lib.rs",
      "to": "as_millis",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/lib.rs",
      "to": "as_str",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/lib.rs",
      "to": "block_in_place",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/lib.rs",
      "to": "cfg",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/lib.rs",
      "to": "chars",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/lib.rs",
      "to": "classify",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/lib.rs",
      "to": "classify_async",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/lib.rs",
      "to": "contains",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/lib.rs",
      "to": "derive",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/lib.rs",
      "to": "elapsed",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/lib.rs",
      "to": "find",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/lib.rs",
      "to": "generate",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/lib.rs",
      "to": "generate_direct",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/lib.rs",
      "to": "get",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/lib.rs",
      "to": "linked",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/lib.rs",
      "to": "max",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/lib.rs",
      "to": "min",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/lib.rs",
      "to": "new",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/lib.rs",
      "to": "not",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/lib.rs",
      "to": "now",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/lib.rs",
      "to": "rfind",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/lib.rs",
      "to": "run",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/lib.rs",
      "to": "run_gemma",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/lib.rs",
      "to": "run_qwen",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/lib.rs",
      "to": "serde",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/lib.rs",
      "to": "take",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/lib.rs",
      "to": "to_string",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/lib.rs",
      "to": "unwrap_or",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/lib.rs",
      "to": "zip",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/hosted_ai.rs",
      "to": "Ok",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/hosted_ai.rs",
      "to": "allocation",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/hosted_ai.rs",
      "to": "cfg",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/hosted_ai.rs",
      "to": "clone",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/hosted_ai.rs",
      "to": "cloned",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/hosted_ai.rs",
      "to": "collect",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/hosted_ai.rs",
      "to": "connector",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/hosted_ai.rs",
      "to": "contains_key",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/hosted_ai.rs",
      "to": "derive",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/hosted_ai.rs",
      "to": "get",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/hosted_ai.rs",
      "to": "get_allocation",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/hosted_ai.rs",
      "to": "inference",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/hosted_ai.rs",
      "to": "insert",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/hosted_ai.rs",
      "to": "is_none",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/hosted_ai.rs",
      "to": "is_some",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/hosted_ai.rs",
      "to": "keys",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/hosted_ai.rs",
      "to": "len",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/hosted_ai.rs",
      "to": "list_allocations",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/hosted_ai.rs",
      "to": "new",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/hosted_ai.rs",
      "to": "new_v4",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/hosted_ai.rs",
      "to": "read",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/hosted_ai.rs",
      "to": "release",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/hosted_ai.rs",
      "to": "remove",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/hosted_ai.rs",
      "to": "request_vgpu",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/hosted_ai.rs",
      "to": "serde",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/hosted_ai.rs",
      "to": "test_gpu_allocation",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/hosted_ai.rs",
      "to": "to_string",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/hosted_ai.rs",
      "to": "unwrap",
      "edge": "calls"
    },
    {
      "from": "file:crates/orchestrator/src/hosted_ai.rs",
      "to": "write",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/tailwind.config.js",
      "to": "import",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/next.config.js",
      "to": "import",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/app/layout.tsx",
      "to": "next",
      "edge": "imports"
    },
    {
      "from": "file:web-ui/app/layout.tsx",
      "to": "RootLayout",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/app/page.tsx",
      "to": "react",
      "edge": "imports"
    },
    {
      "from": "file:web-ui/app/page.tsx",
      "to": "@/components/McpClientProvider",
      "edge": "imports"
    },
    {
      "from": "file:web-ui/app/page.tsx",
      "to": "@/components/ConnectForm",
      "edge": "imports"
    },
    {
      "from": "file:web-ui/app/page.tsx",
      "to": "@/components/ToolList",
      "edge": "imports"
    },
    {
      "from": "file:web-ui/app/page.tsx",
      "to": "@/components/SessionLog",
      "edge": "imports"
    },
    {
      "from": "file:web-ui/app/page.tsx",
      "to": "@/components/GitHubAuth",
      "edge": "imports"
    },
    {
      "from": "file:web-ui/app/page.tsx",
      "to": "@/components/QoQViewer",
      "edge": "imports"
    },
    {
      "from": "file:web-ui/app/page.tsx",
      "to": "Page",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/app/api/github/me/route.ts",
      "to": "next/server",
      "edge": "imports"
    },
    {
      "from": "file:web-ui/app/api/github/me/route.ts",
      "to": "../device/poll/route",
      "edge": "imports"
    },
    {
      "from": "file:web-ui/app/api/github/me/route.ts",
      "to": "Error",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/app/api/github/me/route.ts",
      "to": "GET",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/app/api/github/me/route.ts",
      "to": "catch",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/app/api/github/me/route.ts",
      "to": "fetch",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/app/api/github/me/route.ts",
      "to": "get",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/app/api/github/me/route.ts",
      "to": "has",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/app/api/github/me/route.ts",
      "to": "json",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/app/api/github/device/start/route.ts",
      "to": "next/server",
      "edge": "imports"
    },
    {
      "from": "file:web-ui/app/api/github/device/start/route.ts",
      "to": "Date",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/app/api/github/device/start/route.ts",
      "to": "Error",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/app/api/github/device/start/route.ts",
      "to": "POST",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/app/api/github/device/start/route.ts",
      "to": "URLSearchParams",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/app/api/github/device/start/route.ts",
      "to": "catch",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/app/api/github/device/start/route.ts",
      "to": "delete",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/app/api/github/device/start/route.ts",
      "to": "demo",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/app/api/github/device/start/route.ts",
      "to": "fetch",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/app/api/github/device/start/route.ts",
      "to": "json",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/app/api/github/device/start/route.ts",
      "to": "set",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/app/api/github/device/start/route.ts",
      "to": "setTimeout",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/app/api/github/device/poll/route.ts",
      "to": "next/server",
      "edge": "imports"
    },
    {
      "from": "file:web-ui/app/api/github/device/poll/route.ts",
      "to": "POST",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/app/api/github/device/poll/route.ts",
      "to": "URLSearchParams",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/app/api/github/device/poll/route.ts",
      "to": "catch",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/app/api/github/device/poll/route.ts",
      "to": "fetch",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/app/api/github/device/poll/route.ts",
      "to": "json",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/app/api/github/device/poll/route.ts",
      "to": "randomUUID",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/app/api/github/device/poll/route.ts",
      "to": "set",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/app/api/github/device/poll/route.ts",
      "to": "storage",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/app/api/github/device/poll/route.ts",
      "to": "token",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/McpClientProvider.tsx",
      "to": "react",
      "edge": "imports"
    },
    {
      "from": "file:web-ui/components/McpClientProvider.tsx",
      "to": "Date",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/McpClientProvider.tsx",
      "to": "Error",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/McpClientProvider.tsx",
      "to": "McpClientProvider",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/McpClientProvider.tsx",
      "to": "Promise",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/McpClientProvider.tsx",
      "to": "WebSocket",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/McpClientProvider.tsx",
      "to": "addMessage",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/McpClientProvider.tsx",
      "to": "async",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/McpClientProvider.tsx",
      "to": "callback",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/McpClientProvider.tsx",
      "to": "close",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/McpClientProvider.tsx",
      "to": "delete",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/McpClientProvider.tsx",
      "to": "error",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/McpClientProvider.tsx",
      "to": "get",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/McpClientProvider.tsx",
      "to": "has",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/McpClientProvider.tsx",
      "to": "parse",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/McpClientProvider.tsx",
      "to": "randomUUID",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/McpClientProvider.tsx",
      "to": "reject",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/McpClientProvider.tsx",
      "to": "resolve",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/McpClientProvider.tsx",
      "to": "send",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/McpClientProvider.tsx",
      "to": "set",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/McpClientProvider.tsx",
      "to": "setConnected",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/McpClientProvider.tsx",
      "to": "setConnecting",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/McpClientProvider.tsx",
      "to": "setMessages",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/McpClientProvider.tsx",
      "to": "setTools",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/McpClientProvider.tsx",
      "to": "setWs",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/McpClientProvider.tsx",
      "to": "slice",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/McpClientProvider.tsx",
      "to": "stringify",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/McpClientProvider.tsx",
      "to": "useCallback",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/McpClientProvider.tsx",
      "to": "useContext",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/McpClientProvider.tsx",
      "to": "useMcp",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/McpClientProvider.tsx",
      "to": "useState",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/QoQViewer.tsx",
      "to": "react",
      "edge": "imports"
    },
    {
      "from": "file:web-ui/components/QoQViewer.tsx",
      "to": "./McpClientProvider",
      "edge": "imports"
    },
    {
      "from": "file:web-ui/components/QoQViewer.tsx",
      "to": "Date",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/QoQViewer.tsx",
      "to": "QoQViewer",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/QoQViewer.tsx",
      "to": "async",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/QoQViewer.tsx",
      "to": "callTool",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/QoQViewer.tsx",
      "to": "catch",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/QoQViewer.tsx",
      "to": "clearInterval",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/QoQViewer.tsx",
      "to": "error",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/QoQViewer.tsx",
      "to": "filter",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/QoQViewer.tsx",
      "to": "loadManifest",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/QoQViewer.tsx",
      "to": "setAutoRefresh",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/QoQViewer.tsx",
      "to": "setInterval",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/QoQViewer.tsx",
      "to": "setLoading",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/QoQViewer.tsx",
      "to": "setManifest",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/QoQViewer.tsx",
      "to": "toLocaleString",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/QoQViewer.tsx",
      "to": "useEffect",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/QoQViewer.tsx",
      "to": "useMcp",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/QoQViewer.tsx",
      "to": "useState",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/ConnectForm.tsx",
      "to": "react",
      "edge": "imports"
    },
    {
      "from": "file:web-ui/components/ConnectForm.tsx",
      "to": "./McpClientProvider",
      "edge": "imports"
    },
    {
      "from": "file:web-ui/components/ConnectForm.tsx",
      "to": "ConnectForm",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/ConnectForm.tsx",
      "to": "async",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/ConnectForm.tsx",
      "to": "connect",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/ConnectForm.tsx",
      "to": "preventDefault",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/ConnectForm.tsx",
      "to": "setUrl",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/ConnectForm.tsx",
      "to": "useMcp",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/ConnectForm.tsx",
      "to": "useState",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/ToolList.tsx",
      "to": "react",
      "edge": "imports"
    },
    {
      "from": "file:web-ui/components/ToolList.tsx",
      "to": "./McpClientProvider",
      "edge": "imports"
    },
    {
      "from": "file:web-ui/components/ToolList.tsx",
      "to": "Arguments",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/ToolList.tsx",
      "to": "ToolList",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/ToolList.tsx",
      "to": "async",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/ToolList.tsx",
      "to": "callTool",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/ToolList.tsx",
      "to": "catch",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/ToolList.tsx",
      "to": "map",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/ToolList.tsx",
      "to": "parse",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/ToolList.tsx",
      "to": "setArgs",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/ToolList.tsx",
      "to": "setLoading",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/ToolList.tsx",
      "to": "setResult",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/ToolList.tsx",
      "to": "setSelectedTool",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/ToolList.tsx",
      "to": "stringify",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/ToolList.tsx",
      "to": "useMcp",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/ToolList.tsx",
      "to": "useState",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/GitHubAuth.tsx",
      "to": "react",
      "edge": "imports"
    },
    {
      "from": "file:web-ui/components/GitHubAuth.tsx",
      "to": "GitHubAuth",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/GitHubAuth.tsx",
      "to": "async",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/GitHubAuth.tsx",
      "to": "catch",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/GitHubAuth.tsx",
      "to": "clearInterval",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/GitHubAuth.tsx",
      "to": "error",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/GitHubAuth.tsx",
      "to": "fetch",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/GitHubAuth.tsx",
      "to": "json",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/GitHubAuth.tsx",
      "to": "open",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/GitHubAuth.tsx",
      "to": "pollForToken",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/GitHubAuth.tsx",
      "to": "setDeviceFlow",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/GitHubAuth.tsx",
      "to": "setInterval",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/GitHubAuth.tsx",
      "to": "setLoading",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/GitHubAuth.tsx",
      "to": "setMe",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/GitHubAuth.tsx",
      "to": "setTimeout",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/GitHubAuth.tsx",
      "to": "stringify",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/GitHubAuth.tsx",
      "to": "useState",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/SessionLog.tsx",
      "to": "react",
      "edge": "imports"
    },
    {
      "from": "file:web-ui/components/SessionLog.tsx",
      "to": "./McpClientProvider",
      "edge": "imports"
    },
    {
      "from": "file:web-ui/components/SessionLog.tsx",
      "to": "SessionLog",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/SessionLog.tsx",
      "to": "map",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/SessionLog.tsx",
      "to": "stringify",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/SessionLog.tsx",
      "to": "toLocaleTimeString",
      "edge": "calls"
    },
    {
      "from": "file:web-ui/components/SessionLog.tsx",
      "to": "useMcp",
      "edge": "calls"
    },
    {
      "from": "file:tests/mocks/mod.rs",
      "to": "Ok",
      "edge": "calls"
    },
    {
      "from": "file:tests/mocks/mod.rs",
      "to": "Some",
      "edge": "calls"
    },
    {
      "from": "file:tests/mocks/mod.rs",
      "to": "allocate_gpu",
      "edge": "calls"
    },
    {
      "from": "file:tests/mocks/mod.rs",
      "to": "classify",
      "edge": "calls"
    },
    {
      "from": "file:tests/mocks/mod.rs",
      "to": "clone",
      "edge": "calls"
    },
    {
      "from": "file:tests/mocks/mod.rs",
      "to": "connect",
      "edge": "calls"
    },
    {
      "from": "file:tests/mocks/mod.rs",
      "to": "contains",
      "edge": "calls"
    },
    {
      "from": "file:tests/mocks/mod.rs",
      "to": "contains_key",
      "edge": "calls"
    },
    {
      "from": "file:tests/mocks/mod.rs",
      "to": "derive",
      "edge": "calls"
    },
    {
      "from": "file:tests/mocks/mod.rs",
      "to": "disconnect",
      "edge": "calls"
    },
    {
      "from": "file:tests/mocks/mod.rs",
      "to": "generate",
      "edge": "calls"
    },
    {
      "from": "file:tests/mocks/mod.rs",
      "to": "get",
      "edge": "calls"
    },
    {
      "from": "file:tests/mocks/mod.rs",
      "to": "get_mut",
      "edge": "calls"
    },
    {
      "from": "file:tests/mocks/mod.rs",
      "to": "inference",
      "edge": "calls"
    },
    {
      "from": "file:tests/mocks/mod.rs",
      "to": "insert",
      "edge": "calls"
    },
    {
      "from": "file:tests/mocks/mod.rs",
      "to": "new",
      "edge": "calls"
    },
    {
      "from": "file:tests/mocks/mod.rs",
      "to": "new_v4",
      "edge": "calls"
    },
    {
      "from": "file:tests/mocks/mod.rs",
      "to": "now",
      "edge": "calls"
    },
    {
      "from": "file:tests/mocks/mod.rs",
      "to": "poll_for_token",
      "edge": "calls"
    },
    {
      "from": "file:tests/mocks/mod.rs",
      "to": "push",
      "edge": "calls"
    },
    {
      "from": "file:tests/mocks/mod.rs",
      "to": "read",
      "edge": "calls"
    },
    {
      "from": "file:tests/mocks/mod.rs",
      "to": "received_messages",
      "edge": "calls"
    },
    {
      "from": "file:tests/mocks/mod.rs",
      "to": "release",
      "edge": "calls"
    },
    {
      "from": "file:tests/mocks/mod.rs",
      "to": "send",
      "edge": "calls"
    },
    {
      "from": "file:tests/mocks/mod.rs",
      "to": "set_manifest",
      "edge": "calls"
    },
    {
      "from": "file:tests/mocks/mod.rs",
      "to": "start_device_flow",
      "edge": "calls"
    },
    {
      "from": "file:tests/mocks/mod.rs",
      "to": "to_rfc3339",
      "edge": "calls"
    },
    {
      "from": "file:tests/mocks/mod.rs",
      "to": "to_string",
      "edge": "calls"
    },
    {
      "from": "file:tests/mocks/mod.rs",
      "to": "write",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/qoq_integration_test.rs",
      "to": "arg",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/qoq_integration_test.rs",
      "to": "as_array",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/qoq_integration_test.rs",
      "to": "as_str",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/qoq_integration_test.rs",
      "to": "collect",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/qoq_integration_test.rs",
      "to": "contains",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/qoq_integration_test.rs",
      "to": "exists",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/qoq_integration_test.rs",
      "to": "expect",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/qoq_integration_test.rs",
      "to": "filter_map",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/qoq_integration_test.rs",
      "to": "from_str",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/qoq_integration_test.rs",
      "to": "from_utf8_lossy",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/qoq_integration_test.rs",
      "to": "is_array",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/qoq_integration_test.rs",
      "to": "is_empty",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/qoq_integration_test.rs",
      "to": "is_object",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/qoq_integration_test.rs",
      "to": "iter",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/qoq_integration_test.rs",
      "to": "join",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/qoq_integration_test.rs",
      "to": "metadata",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/qoq_integration_test.rs",
      "to": "mode",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/qoq_integration_test.rs",
      "to": "new",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/qoq_integration_test.rs",
      "to": "output",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/qoq_integration_test.rs",
      "to": "path",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/qoq_integration_test.rs",
      "to": "permissions",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/qoq_integration_test.rs",
      "to": "read_to_string",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/qoq_integration_test.rs",
      "to": "success",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/qoq_integration_test.rs",
      "to": "tempdir",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/qoq_integration_test.rs",
      "to": "test_function",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/qoq_integration_test.rs",
      "to": "test_pre_commit_hook",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/qoq_integration_test.rs",
      "to": "test_qoq_manifest_generation",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/qoq_integration_test.rs",
      "to": "test_qoq_symbol_extraction",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/qoq_integration_test.rs",
      "to": "unwrap",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/qoq_integration_test.rs",
      "to": "write",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/wasm_classifier_test.rs",
      "to": "as_f64",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/wasm_classifier_test.rs",
      "to": "classify_task",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/wasm_classifier_test.rs",
      "to": "exists",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/wasm_classifier_test.rs",
      "to": "from_str",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/wasm_classifier_test.rs",
      "to": "get_version",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/wasm_classifier_test.rs",
      "to": "join",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/wasm_classifier_test.rs",
      "to": "new",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/wasm_classifier_test.rs",
      "to": "test_classify_code_task",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/wasm_classifier_test.rs",
      "to": "test_classify_complex_reasoning",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/wasm_classifier_test.rs",
      "to": "test_classify_summary_task",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/wasm_classifier_test.rs",
      "to": "test_classify_with_confidence",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/wasm_classifier_test.rs",
      "to": "test_get_version",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/wasm_classifier_test.rs",
      "to": "test_wasm_build",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/wasm_classifier_test.rs",
      "to": "unwrap",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/websocket_mcp_test.rs",
      "to": "Ok",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/websocket_mcp_test.rs",
      "to": "Some",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/websocket_mcp_test.rs",
      "to": "Text",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/websocket_mcp_test.rs",
      "to": "as_array",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/websocket_mcp_test.rs",
      "to": "as_str",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/websocket_mcp_test.rs",
      "to": "clone",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/websocket_mcp_test.rs",
      "to": "collect",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/websocket_mcp_test.rs",
      "to": "connect_async",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/websocket_mcp_test.rs",
      "to": "contains",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/websocket_mcp_test.rs",
      "to": "expect",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/websocket_mcp_test.rs",
      "to": "filter_map",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/websocket_mcp_test.rs",
      "to": "from_millis",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/websocket_mcp_test.rs",
      "to": "from_str",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/websocket_mcp_test.rs",
      "to": "is_array",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/websocket_mcp_test.rs",
      "to": "is_string",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/websocket_mcp_test.rs",
      "to": "iter",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/websocket_mcp_test.rs",
      "to": "let",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/websocket_mcp_test.rs",
      "to": "new",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/websocket_mcp_test.rs",
      "to": "next",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/websocket_mcp_test.rs",
      "to": "notified",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/websocket_mcp_test.rs",
      "to": "notify_one",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/websocket_mcp_test.rs",
      "to": "push",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/websocket_mcp_test.rs",
      "to": "run",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/websocket_mcp_test.rs",
      "to": "send",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/websocket_mcp_test.rs",
      "to": "shutdown",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/websocket_mcp_test.rs",
      "to": "sleep",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/websocket_mcp_test.rs",
      "to": "spawn",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/websocket_mcp_test.rs",
      "to": "split",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/websocket_mcp_test.rs",
      "to": "start_test_server",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/websocket_mcp_test.rs",
      "to": "test_concurrent_sessions",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/websocket_mcp_test.rs",
      "to": "test_qoq_tools",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/websocket_mcp_test.rs",
      "to": "test_websocket_connection",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/websocket_mcp_test.rs",
      "to": "to_string",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/websocket_mcp_test.rs",
      "to": "unwrap",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/covenant_cocreation_test.rs",
      "to": "Architect",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/covenant_cocreation_test.rs",
      "to": "as_array",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/covenant_cocreation_test.rs",
      "to": "categories",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/covenant_cocreation_test.rs",
      "to": "deployment",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/covenant_cocreation_test.rs",
      "to": "engine",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/covenant_cocreation_test.rs",
      "to": "len",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/covenant_cocreation_test.rs",
      "to": "making",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/covenant_cocreation_test.rs",
      "to": "orchestration",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/covenant_cocreation_test.rs",
      "to": "primitives",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/covenant_cocreation_test.rs",
      "to": "repos",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/covenant_cocreation_test.rs",
      "to": "test_covenant_cocreation_flow",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/covenant_cocreation_test.rs",
      "to": "to_string_pretty",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/covenant_cocreation_test.rs",
      "to": "unwrap",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/covenant_cocreation_test.rs",
      "to": "workers",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/hosted_ai_test.rs",
      "to": "contains",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/hosted_ai_test.rs",
      "to": "expect",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/hosted_ai_test.rs",
      "to": "from_str",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/hosted_ai_test.rs",
      "to": "get_allocation",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/hosted_ai_test.rs",
      "to": "inference",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/hosted_ai_test.rs",
      "to": "is_empty",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/hosted_ai_test.rs",
      "to": "is_none",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/hosted_ai_test.rs",
      "to": "is_some",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/hosted_ai_test.rs",
      "to": "len",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/hosted_ai_test.rs",
      "to": "list_allocations",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/hosted_ai_test.rs",
      "to": "new",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/hosted_ai_test.rs",
      "to": "push",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/hosted_ai_test.rs",
      "to": "release",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/hosted_ai_test.rs",
      "to": "request_vgpu",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/hosted_ai_test.rs",
      "to": "test_hosted_ai_config_serialization",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/hosted_ai_test.rs",
      "to": "test_hosted_ai_gpu_allocation",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/hosted_ai_test.rs",
      "to": "test_hosted_ai_inference",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/hosted_ai_test.rs",
      "to": "test_multiple_allocations",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/hosted_ai_test.rs",
      "to": "to_string",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/hosted_ai_test.rs",
      "to": "unwrap",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/github_oauth_test.rs",
      "to": "behavior",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/github_oauth_test.rs",
      "to": "cfg",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/github_oauth_test.rs",
      "to": "expect",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/github_oauth_test.rs",
      "to": "insert",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/github_oauth_test.rs",
      "to": "let",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/github_oauth_test.rs",
      "to": "mock_github_responses",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/github_oauth_test.rs",
      "to": "new",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/github_oauth_test.rs",
      "to": "poll_for_token",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/github_oauth_test.rs",
      "to": "remove_var",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/github_oauth_test.rs",
      "to": "start_device_flow",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/github_oauth_test.rs",
      "to": "starts_with",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/github_oauth_test.rs",
      "to": "test_github_device_flow",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/github_oauth_test.rs",
      "to": "test_github_oauth_full_flow",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/github_oauth_test.rs",
      "to": "test_oauth_config_validation",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/github_oauth_test.rs",
      "to": "to_string",
      "edge": "calls"
    },
    {
      "from": "file:tests/integration/github_oauth_test.rs",
      "to": "token",
      "edge": "calls"
    },
    {
      "from": "file:tests/e2e/full_system_test.rs",
      "to": "Core",
      "edge": "calls"
    },
    {
      "from": "file:tests/e2e/full_system_test.rs",
      "to": "Foremen",
      "edge": "calls"
    },
    {
      "from": "file:tests/e2e/full_system_test.rs",
      "to": "Harpoon",
      "edge": "calls"
    },
    {
      "from": "file:tests/e2e/full_system_test.rs",
      "to": "Preceptoom",
      "edge": "calls"
    },
    {
      "from": "file:tests/e2e/full_system_test.rs",
      "to": "Workers",
      "edge": "calls"
    },
    {
      "from": "file:tests/e2e/full_system_test.rs",
      "to": "agent_message_schema",
      "edge": "calls"
    },
    {
      "from": "file:tests/e2e/full_system_test.rs",
      "to": "cfg",
      "edge": "calls"
    },
    {
      "from": "file:tests/e2e/full_system_test.rs",
      "to": "core",
      "edge": "calls"
    },
    {
      "from": "file:tests/e2e/full_system_test.rs",
      "to": "engine",
      "edge": "calls"
    },
    {
      "from": "file:tests/e2e/full_system_test.rs",
      "to": "enumerate",
      "edge": "calls"
    },
    {
      "from": "file:tests/e2e/full_system_test.rs",
      "to": "from_millis",
      "edge": "calls"
    },
    {
      "from": "file:tests/e2e/full_system_test.rs",
      "to": "integrator",
      "edge": "calls"
    },
    {
      "from": "file:tests/e2e/full_system_test.rs",
      "to": "is_array",
      "edge": "calls"
    },
    {
      "from": "file:tests/e2e/full_system_test.rs",
      "to": "is_number",
      "edge": "calls"
    },
    {
      "from": "file:tests/e2e/full_system_test.rs",
      "to": "is_object",
      "edge": "calls"
    },
    {
      "from": "file:tests/e2e/full_system_test.rs",
      "to": "is_string",
      "edge": "calls"
    },
    {
      "from": "file:tests/e2e/full_system_test.rs",
      "to": "iter",
      "edge": "calls"
    },
    {
      "from": "file:tests/e2e/full_system_test.rs",
      "to": "len",
      "edge": "calls"
    },
    {
      "from": "file:tests/e2e/full_system_test.rs",
      "to": "new",
      "edge": "calls"
    },
    {
      "from": "file:tests/e2e/full_system_test.rs",
      "to": "nexus",
      "edge": "calls"
    },
    {
      "from": "file:tests/e2e/full_system_test.rs",
      "to": "push",
      "edge": "calls"
    },
    {
      "from": "file:tests/e2e/full_system_test.rs",
      "to": "received",
      "edge": "calls"
    },
    {
      "from": "file:tests/e2e/full_system_test.rs",
      "to": "sample_from_array",
      "edge": "calls"
    },
    {
      "from": "file:tests/e2e/full_system_test.rs",
      "to": "sleep",
      "edge": "calls"
    },
    {
      "from": "file:tests/e2e/full_system_test.rs",
      "to": "smoke_test_mcp_protocol",
      "edge": "calls"
    },
    {
      "from": "file:tests/e2e/full_system_test.rs",
      "to": "smoke_test_unified_request",
      "edge": "calls"
    },
    {
      "from": "file:tests/e2e/full_system_test.rs",
      "to": "substrate",
      "edge": "calls"
    },
    {
      "from": "file:tests/e2e/full_system_test.rs",
      "to": "test_agent_communication",
      "edge": "calls"
    },
    {
      "from": "file:tests/e2e/full_system_test.rs",
      "to": "test_agent_delegation",
      "edge": "calls"
    },
    {
      "from": "file:tests/e2e/full_system_test.rs",
      "to": "test_agent_message_format",
      "edge": "calls"
    },
    {
      "from": "file:tests/e2e/full_system_test.rs",
      "to": "test_covenant_creation",
      "edge": "calls"
    },
    {
      "from": "file:tests/e2e/full_system_test.rs",
      "to": "test_covenant_validation",
      "edge": "calls"
    },
    {
      "from": "file:tests/e2e/full_system_test.rs",
      "to": "test_full_ubiquity_flow",
      "edge": "calls"
    },
    {
      "from": "file:tests/e2e/full_system_test.rs",
      "to": "test_fusion_processing",
      "edge": "calls"
    },
    {
      "from": "file:tests/e2e/full_system_test.rs",
      "to": "test_harmony_analysis",
      "edge": "calls"
    },
    {
      "from": "file:tests/e2e/full_system_test.rs",
      "to": "test_hosted_ai_deployment",
      "edge": "calls"
    },
    {
      "from": "file:tests/e2e/full_system_test.rs",
      "to": "test_mcp_initialization",
      "edge": "calls"
    },
    {
      "from": "file:tests/e2e/full_system_test.rs",
      "to": "test_sampling_strategies",
      "edge": "calls"
    },
    {
      "from": "file:tests/e2e/full_system_test.rs",
      "to": "test_self_organization",
      "edge": "calls"
    },
    {
      "from": "file:tests/e2e/full_system_test.rs",
      "to": "test_strike_execution",
      "edge": "calls"
    },
    {
      "from": "file:tests/e2e/full_system_test.rs",
      "to": "to_string",
      "edge": "calls"
    },
    {
      "from": "file:tests/e2e/full_system_test.rs",
      "to": "unwrap",
      "edge": "calls"
    },
    {
      "from": "file:scripts/qoq_emit.py",
      "to": "Path",
      "edge": "calls"
    },
    {
      "from": "file:scripts/qoq_emit.py",
      "to": "add",
      "edge": "calls"
    },
    {
      "from": "file:scripts/qoq_emit.py",
      "to": "append",
      "edge": "calls"
    },
    {
      "from": "file:scripts/qoq_emit.py",
      "to": "as_posix",
      "edge": "calls"
    },
    {
      "from": "file:scripts/qoq_emit.py",
      "to": "b",
      "edge": "calls"
    },
    {
      "from": "file:scripts/qoq_emit.py",
      "to": "build_tree",
      "edge": "calls"
    },
    {
      "from": "file:scripts/qoq_emit.py",
      "to": "calls",
      "edge": "calls"
    },
    {
      "from": "file:scripts/qoq_emit.py",
      "to": "check_output",
      "edge": "calls"
    },
    {
      "from": "file:scripts/qoq_emit.py",
      "to": "compile",
      "edge": "calls"
    },
    {
      "from": "file:scripts/qoq_emit.py",
      "to": "decode",
      "edge": "calls"
    },
    {
      "from": "file:scripts/qoq_emit.py",
      "to": "dumps",
      "edge": "calls"
    },
    {
      "from": "file:scripts/qoq_emit.py",
      "to": "edges",
      "edge": "calls"
    },
    {
      "from": "file:scripts/qoq_emit.py",
      "to": "exists",
      "edge": "calls"
    },
    {
      "from": "file:scripts/qoq_emit.py",
      "to": "finditer",
      "edge": "calls"
    },
    {
      "from": "file:scripts/qoq_emit.py",
      "to": "get",
      "edge": "calls"
    },
    {
      "from": "file:scripts/qoq_emit.py",
      "to": "git_hash",
      "edge": "calls"
    },
    {
      "from": "file:scripts/qoq_emit.py",
      "to": "gmtime",
      "edge": "calls"
    },
    {
      "from": "file:scripts/qoq_emit.py",
      "to": "group",
      "edge": "calls"
    },
    {
      "from": "file:scripts/qoq_emit.py",
      "to": "imports",
      "edge": "calls"
    },
    {
      "from": "file:scripts/qoq_emit.py",
      "to": "len",
      "edge": "calls"
    },
    {
      "from": "file:scripts/qoq_emit.py",
      "to": "list_symbols_and_flows",
      "edge": "calls"
    },
    {
      "from": "file:scripts/qoq_emit.py",
      "to": "load_contracts",
      "edge": "calls"
    },
    {
      "from": "file:scripts/qoq_emit.py",
      "to": "loads",
      "edge": "calls"
    },
    {
      "from": "file:scripts/qoq_emit.py",
      "to": "range",
      "edge": "calls"
    },
    {
      "from": "file:scripts/qoq_emit.py",
      "to": "read_text",
      "edge": "calls"
    },
    {
      "from": "file:scripts/qoq_emit.py",
      "to": "relative_to",
      "edge": "calls"
    },
    {
      "from": "file:scripts/qoq_emit.py",
      "to": "set",
      "edge": "calls"
    },
    {
      "from": "file:scripts/qoq_emit.py",
      "to": "sorted",
      "edge": "calls"
    },
    {
      "from": "file:scripts/qoq_emit.py",
      "to": "startswith",
      "edge": "calls"
    },
    {
      "from": "file:scripts/qoq_emit.py",
      "to": "stat",
      "edge": "calls"
    },
    {
      "from": "file:scripts/qoq_emit.py",
      "to": "str",
      "edge": "calls"
    },
    {
      "from": "file:scripts/qoq_emit.py",
      "to": "strftime",
      "edge": "calls"
    },
    {
      "from": "file:scripts/qoq_emit.py",
      "to": "strip",
      "edge": "calls"
    },
    {
      "from": "file:scripts/qoq_emit.py",
      "to": "walk",
      "edge": "calls"
    },
    {
      "from": "file:scripts/qoq_emit.py",
      "to": "write_text",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "Path",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "Script",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "SimpleCodebaseAnalyzer",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "__init__",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "_analyze_javascript",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "_analyze_python",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "_analyze_rust",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "_format_tree",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "_process_directory",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "add",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "analyze",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "analyze_calls",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "any",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "append",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "chmod",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "commit",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "cwd",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "defaultdict",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "dict",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "dump",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "enumerate",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "exists",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "extract_code_elements",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "finditer",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "generate_graph_markdown",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "generate_markdown_report",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "generate_output",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "generate_tree",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "get",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "group",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "is_dir",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "is_file",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "isoformat",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "items",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "iterdir",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "len",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "list",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "main",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "mkdir",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "now",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "open",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "read_text",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "relative_to",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "replace",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "rglob",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "save_results",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "search",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "setup_git_hook",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "sorted",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "split",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "splitlines",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "startswith",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "stat",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "str",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "strip",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "sum",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "tree",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "values",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase_simple.py",
      "to": "write",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "Arc",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "Circle",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "CodebaseNetworkVisualizer",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "DiGraph",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "Graph",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "Line2D",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "Patch",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "Path",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "__init__",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "_add_module_hierarchy",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "_generate_call_hierarchy",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "_generate_crate_overview",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "_generate_crate_story_diagram",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "_get_file_node",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "abs",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "add_artist",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "add_edge",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "add_node",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "add_patch",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "any",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "append",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "array",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "arrow",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "axis",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "betweenness_centrality",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "build_graph",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "calculate_importance",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "check_call",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "close",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "cos",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "create_visualization",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "cwd",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "defaultdict",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "degree",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "dict",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "dot",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "draw_networkx_edges",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "draw_networkx_labels",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "draw_networkx_nodes",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "edges",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "endswith",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "enumerate",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "exists",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "figtext",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "figure",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "find",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "functions",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "gca",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "generate_supplementary_visualizations",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "get",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "graphviz_layout",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "importance",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "in_degree",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "items",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "keys",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "label",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "layout",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "legend",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "len",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "linspace",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "list",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "load",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "load_analysis",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "lower",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "main",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "max",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "mean",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "min",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "more",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "n",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "neighbors",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "nodes",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "norm",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "normal",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "not",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "number_of_edges",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "number_of_nodes",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "number_weakly_connected_components",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "open",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "out_degree",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "pagerank",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "plot",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "positions",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "random",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "range",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "read",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "run",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "savefig",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "scatter",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "set_aspect",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "set_axis_off",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "set_facecolor",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "set_xlim",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "set_ylim",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "sin",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "sort",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "sorted",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "split",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "spring_layout",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "sqrt",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "sum",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "text",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "tight_layout",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "title",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "type",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "values",
      "edge": "calls"
    },
    {
      "from": "file:scripts/generate_network_graph.py",
      "to": "write",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "CodebaseAnalyzer",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "DiGraph",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "Path",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "__init__",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "_analyze_javascript",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "_analyze_python",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "_analyze_rust",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "_format_tree",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "_process_directory",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "add_edge",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "add_node",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "analyze",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "any",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "append",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "body",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "build_call_graph",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "calls",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "chmod",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "cwd",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "defaultdict",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "dict",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "dump",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "edges",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "end",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "enumerate",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "exists",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "extract_code_elements",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "finditer",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "generate_dot_graph",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "generate_markdown_report",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "generate_output",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "generate_tree",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "get",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "group",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "is_dir",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "is_file",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "isoformat",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "items",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "iterdir",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "len",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "main",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "mkdir",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "nodes",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "now",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "open",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "read_text",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "relative_to",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "rglob",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "save_results",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "search",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "setup_git_hook",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "sorted",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "split",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "startswith",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "str",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "strip",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "sum",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "tree",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "values",
      "edge": "calls"
    },
    {
      "from": "file:scripts/analyze_codebase.py",
      "to": "write",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rxconfig.py",
      "to": "Config",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rxconfig.py",
      "to": "TailwindV3Plugin",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/app.py",
      "to": "App",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/app.py",
      "to": "add_page",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/app.py",
      "to": "dialogue_page",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/app.py",
      "to": "div",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/app.py",
      "to": "footer",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/app.py",
      "to": "fusion_page",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/app.py",
      "to": "index",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/app.py",
      "to": "ledger_page",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/app.py",
      "to": "link",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/app.py",
      "to": "main",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/app.py",
      "to": "navbar",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/app.py",
      "to": "page_wrapper",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/app.py",
      "to": "review",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/app.py",
      "to": "settings_page",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/app.py",
      "to": "strike_page",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/app.py",
      "to": "theme",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "CovenantPacket",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "DialogueState",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "FusionState",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "LedgerState",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "Python",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "Rust",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "Session",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "SettingsState",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "StrikeState",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "UIState",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "_get_all_settings_vars",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "_update_from_trail",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "backend_is_rust",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "backend_label",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "backend_threads",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "bool",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "cable_states",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "check_backpressure",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "clear_covenant",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "dumps",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "enqueue_dump",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "error",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "event",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "exception",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "exec",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "execute_strike",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "first",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "fragment_progress",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "get",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "get_config",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "get_messages",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "get_run_id",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "get_state",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "get_status",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "get_weighted_snapshot",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "getattr",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "has_anchors",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "has_state_capsule",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "in",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "isinstance",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "isoformat",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "launch_strike",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "len",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "llm_delegation_plan",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "load_all_configs",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "load_dialogue",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "load_settings",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "loads",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "lower",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "on_load",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "perform_harmony_review",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "process_covenant",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "process_envelope",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "query_ledger",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "redirect",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "refresh_status",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "requesty_infer",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "save_settings",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "select",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "set_config",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "setattr",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "state_capsule_context",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "state_capsule_json",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "str",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "strip",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "success",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "test_inference",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "uuid4",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/state.py",
      "to": "where",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/exchange/engine.py",
      "to": "__init__",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/exchange/engine.py",
      "to": "append_event",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/exchange/engine.py",
      "to": "burn",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/exchange/engine.py",
      "to": "encode",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/exchange/engine.py",
      "to": "float",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/exchange/engine.py",
      "to": "fusion",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/exchange/engine.py",
      "to": "hexdigest",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/exchange/engine.py",
      "to": "import",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/exchange/engine.py",
      "to": "mint",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/exchange/engine.py",
      "to": "payout",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/exchange/engine.py",
      "to": "publish",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/exchange/engine.py",
      "to": "sha256",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/exchange/engine.py",
      "to": "time",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/ledger/oracle.py",
      "to": "Column",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/ledger/oracle.py",
      "to": "Field",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/ledger/oracle.py",
      "to": "LedgerEvent",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/ledger/oracle.py",
      "to": "Session",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/ledger/oracle.py",
      "to": "_ensure_tables",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/ledger/oracle.py",
      "to": "_last_hash",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/ledger/oracle.py",
      "to": "add",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/ledger/oracle.py",
      "to": "append_event",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/ledger/oracle.py",
      "to": "commit",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/ledger/oracle.py",
      "to": "create_all",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/ledger/oracle.py",
      "to": "desc",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/ledger/oracle.py",
      "to": "dumps",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/ledger/oracle.py",
      "to": "encode",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/ledger/oracle.py",
      "to": "exec",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/ledger/oracle.py",
      "to": "first",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/ledger/oracle.py",
      "to": "hexdigest",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/ledger/oracle.py",
      "to": "limit",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/ledger/oracle.py",
      "to": "order_by",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/ledger/oracle.py",
      "to": "refresh",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/ledger/oracle.py",
      "to": "select",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/ledger/oracle.py",
      "to": "sha256",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/ledger/oracle.py",
      "to": "time",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/components/status_badge.py",
      "to": "get",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/components/status_badge.py",
      "to": "span",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/components/status_badge.py",
      "to": "status_badge",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/components/status_badge.py",
      "to": "str",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/components/navbar.py",
      "to": "a",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/components/navbar.py",
      "to": "div",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/components/navbar.py",
      "to": "nav",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/components/navbar.py",
      "to": "navbar",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/components/footer.py",
      "to": "div",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/components/footer.py",
      "to": "footer",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/components/footer.py",
      "to": "p",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/db/models.py",
      "to": "Column",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/db/models.py",
      "to": "DelegationPlan",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/db/models.py",
      "to": "DialogueEvent",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/db/models.py",
      "to": "Field",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/db/models.py",
      "to": "FusionTrail",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/db/models.py",
      "to": "KvConfig",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/db/models.py",
      "to": "LedgerEntry",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/db/models.py",
      "to": "StrikeRun",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/metrics.py",
      "to": "APIRouter",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/metrics.py",
      "to": "get",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/metrics.py",
      "to": "isoformat",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/metrics.py",
      "to": "metrics_psi",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/metrics.py",
      "to": "recent_psi",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/metrics.py",
      "to": "rx_health",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/metrics.py",
      "to": "stats",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/webhook.py",
      "to": "APIRouter",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/webhook.py",
      "to": "HTTPException",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/webhook.py",
      "to": "Header",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/webhook.py",
      "to": "ProofReceipt",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/webhook.py",
      "to": "all",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/webhook.py",
      "to": "body",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/webhook.py",
      "to": "compare_digest",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/webhook.py",
      "to": "encode",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/webhook.py",
      "to": "exception",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/webhook.py",
      "to": "get",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/webhook.py",
      "to": "get_config",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/webhook.py",
      "to": "handle_github_webhook",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/webhook.py",
      "to": "hexdigest",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/webhook.py",
      "to": "info",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/webhook.py",
      "to": "json",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/webhook.py",
      "to": "len",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/webhook.py",
      "to": "new",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/webhook.py",
      "to": "post",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/webhook.py",
      "to": "process_receipts",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/webhook.py",
      "to": "replace",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/webhook.py",
      "to": "str",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/covenant.py",
      "to": "APIRouter",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/covenant.py",
      "to": "HTTPException",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/covenant.py",
      "to": "Session",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/covenant.py",
      "to": "StrikeRun",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/covenant.py",
      "to": "add",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/covenant.py",
      "to": "commit",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/covenant.py",
      "to": "dict",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/covenant.py",
      "to": "exception",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/covenant.py",
      "to": "execute_strike",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/covenant.py",
      "to": "launch_strike",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/covenant.py",
      "to": "perform_harmony_review",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/covenant.py",
      "to": "post",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/covenant.py",
      "to": "review_covenant",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/covenant.py",
      "to": "str",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/covenant.py",
      "to": "uuid4",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/fusion.py",
      "to": "APIRouter",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/fusion.py",
      "to": "FusionStatus",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/fusion.py",
      "to": "HTTPException",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/fusion.py",
      "to": "enqueue_dump",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/fusion.py",
      "to": "exception",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/fusion.py",
      "to": "get",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/fusion.py",
      "to": "get_status",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/fusion.py",
      "to": "post",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/fusion.py",
      "to": "process_envelope",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/fusion.py",
      "to": "str",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/ledger_read.py",
      "to": "APIRouter",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/ledger_read.py",
      "to": "HTTPException",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/ledger_read.py",
      "to": "Session",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/ledger_read.py",
      "to": "add",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/ledger_read.py",
      "to": "all",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/ledger_read.py",
      "to": "commit",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/ledger_read.py",
      "to": "exception",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/ledger_read.py",
      "to": "exec",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/ledger_read.py",
      "to": "get",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/ledger_read.py",
      "to": "get_ledger_entries",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/ledger_read.py",
      "to": "get_ledger_snapshot",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/ledger_read.py",
      "to": "get_weighted_snapshot",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/ledger_read.py",
      "to": "mark_anchor_integrated",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/ledger_read.py",
      "to": "post",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/ledger_read.py",
      "to": "query_ledger",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/ledger_read.py",
      "to": "refresh",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/ledger_read.py",
      "to": "select",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/ledger_read.py",
      "to": "sorted",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/ledger_read.py",
      "to": "str",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/ledger_read.py",
      "to": "where",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/main.py",
      "to": "FastAPI",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/main.py",
      "to": "PsiNode",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/main.py",
      "to": "_start_runtime",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/main.py",
      "to": "add_middleware",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/main.py",
      "to": "create_task",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/main.py",
      "to": "include_router",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/main.py",
      "to": "on_event",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/main.py",
      "to": "psi_loop",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/main.py",
      "to": "sleep",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/main.py",
      "to": "start_rx",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/api/main.py",
      "to": "tick",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/psi/observer.py",
      "to": "getattr",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/psi/observer.py",
      "to": "observe_symbol",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/psi/observer.py",
      "to": "publish",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/psi/observer.py",
      "to": "str",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/psi/observer.py",
      "to": "time",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/psi/psi_node.py",
      "to": "Counter",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/psi/psi_node.py",
      "to": "__init__",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/psi/psi_node.py",
      "to": "_entropy",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/psi/psi_node.py",
      "to": "_on_inv",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/psi/psi_node.py",
      "to": "_on_lock",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/psi/psi_node.py",
      "to": "_variance",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/psi/psi_node.py",
      "to": "abs",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/psi/psi_node.py",
      "to": "append",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/psi/psi_node.py",
      "to": "bool",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/psi/psi_node.py",
      "to": "deque",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/psi/psi_node.py",
      "to": "float",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/psi/psi_node.py",
      "to": "get",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/psi/psi_node.py",
      "to": "keys",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/psi/psi_node.py",
      "to": "len",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/psi/psi_node.py",
      "to": "list",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/psi/psi_node.py",
      "to": "log2",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/psi/psi_node.py",
      "to": "max",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/psi/psi_node.py",
      "to": "observe_symbol",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/psi/psi_node.py",
      "to": "pop",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/psi/psi_node.py",
      "to": "publish",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/psi/psi_node.py",
      "to": "save_psi",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/psi/psi_node.py",
      "to": "subscribe",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/psi/psi_node.py",
      "to": "sum",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/psi/psi_node.py",
      "to": "tick",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/psi/psi_node.py",
      "to": "values",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/strike.py",
      "to": "a",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/strike.py",
      "to": "cond",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/strike.py",
      "to": "div",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/strike.py",
      "to": "foreach",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/strike.py",
      "to": "fragment",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/strike.py",
      "to": "h2",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/strike.py",
      "to": "h3",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/strike.py",
      "to": "h4",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/strike.py",
      "to": "icon",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/strike.py",
      "to": "length",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/strike.py",
      "to": "p",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/strike.py",
      "to": "pr_link_card",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/strike.py",
      "to": "receipt_log",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/strike.py",
      "to": "status_badge",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/strike.py",
      "to": "strike_page",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/index.py",
      "to": "button",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/index.py",
      "to": "cond",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/index.py",
      "to": "covenant_card",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/index.py",
      "to": "div",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/index.py",
      "to": "form",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/index.py",
      "to": "h2",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/index.py",
      "to": "icon",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/index.py",
      "to": "index",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/index.py",
      "to": "p",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/index.py",
      "to": "spinner",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/index.py",
      "to": "textarea",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/ledger.py",
      "to": "cable_visualization",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/ledger.py",
      "to": "cond",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/ledger.py",
      "to": "div",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/ledger.py",
      "to": "foreach",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/ledger.py",
      "to": "h2",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/ledger.py",
      "to": "h3",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/ledger.py",
      "to": "icon",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/ledger.py",
      "to": "ledger_page",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/ledger.py",
      "to": "ledger_table",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/ledger.py",
      "to": "length",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/ledger.py",
      "to": "p",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/ledger.py",
      "to": "status_badge",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/ledger.py",
      "to": "table",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/ledger.py",
      "to": "tbody",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/ledger.py",
      "to": "td",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/ledger.py",
      "to": "th",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/ledger.py",
      "to": "thead",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/ledger.py",
      "to": "to_string",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/ledger.py",
      "to": "tr",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/review.py",
      "to": "a",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/review.py",
      "to": "button",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/review.py",
      "to": "cond",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/review.py",
      "to": "div",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/review.py",
      "to": "foreach",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/review.py",
      "to": "h2",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/review.py",
      "to": "h3",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/review.py",
      "to": "icon",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/review.py",
      "to": "p",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/review.py",
      "to": "redirect",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/review.py",
      "to": "review",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/review.py",
      "to": "target_card",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/fusion.py",
      "to": "ID",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/fusion.py",
      "to": "_log_entry",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/fusion.py",
      "to": "button",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/fusion.py",
      "to": "cond",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/fusion.py",
      "to": "div",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/fusion.py",
      "to": "foreach",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/fusion.py",
      "to": "fragment",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/fusion.py",
      "to": "fusion_console",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/fusion.py",
      "to": "fusion_page",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/fusion.py",
      "to": "get",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/fusion.py",
      "to": "h2",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/fusion.py",
      "to": "h3",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/fusion.py",
      "to": "h4",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/fusion.py",
      "to": "input",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/fusion.py",
      "to": "label",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/fusion.py",
      "to": "length",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/fusion.py",
      "to": "li",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/fusion.py",
      "to": "p",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/fusion.py",
      "to": "pre",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/fusion.py",
      "to": "span",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/fusion.py",
      "to": "spinner",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/fusion.py",
      "to": "textarea",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/fusion.py",
      "to": "ul",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/settings.py",
      "to": "Key",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/settings.py",
      "to": "Token",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/settings.py",
      "to": "Tokens",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/settings.py",
      "to": "button",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/settings.py",
      "to": "cond",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/settings.py",
      "to": "div",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/settings.py",
      "to": "form",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/settings.py",
      "to": "h2",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/settings.py",
      "to": "h3",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/settings.py",
      "to": "h4",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/settings.py",
      "to": "input",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/settings.py",
      "to": "label",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/settings.py",
      "to": "p",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/settings.py",
      "to": "pre",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/settings.py",
      "to": "select",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/settings.py",
      "to": "settings_field",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/settings.py",
      "to": "settings_form_group",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/settings.py",
      "to": "settings_page",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/dialogue.py",
      "to": "dialogue_page",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/dialogue.py",
      "to": "div",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/dialogue.py",
      "to": "foreach",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/dialogue.py",
      "to": "h2",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/dialogue.py",
      "to": "message_card",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/dialogue.py",
      "to": "p",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/dialogue.py",
      "to": "pre",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/dialogue.py",
      "to": "span",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/pages/dialogue.py",
      "to": "to_string",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/rx/instance.py",
      "to": "RxBus",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/rx/instance.py",
      "to": "create_task",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/rx/instance.py",
      "to": "pump",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/rx/instance.py",
      "to": "start_rx",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/rx/bus.py",
      "to": "Queue",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/rx/bus.py",
      "to": "__init__",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/rx/bus.py",
      "to": "append",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/rx/bus.py",
      "to": "defaultdict",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/rx/bus.py",
      "to": "get",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/rx/bus.py",
      "to": "h",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/rx/bus.py",
      "to": "len",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/rx/bus.py",
      "to": "list",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/rx/bus.py",
      "to": "publish",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/rx/bus.py",
      "to": "pump",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/rx/bus.py",
      "to": "put_nowait",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/rx/bus.py",
      "to": "stats",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/rx/bus.py",
      "to": "subscribe",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/rx/bus.py",
      "to": "sum",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/rx/bus.py",
      "to": "values",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/rx/storage.py",
      "to": "Field",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/rx/storage.py",
      "to": "PsiMeasurement",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/rx/storage.py",
      "to": "Session",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/rx/storage.py",
      "to": "_ensure_tables",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/rx/storage.py",
      "to": "add",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/rx/storage.py",
      "to": "all",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/rx/storage.py",
      "to": "commit",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/rx/storage.py",
      "to": "create_all",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/rx/storage.py",
      "to": "desc",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/rx/storage.py",
      "to": "exec",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/rx/storage.py",
      "to": "limit",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/rx/storage.py",
      "to": "list",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/rx/storage.py",
      "to": "order_by",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/rx/storage.py",
      "to": "recent_psi",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/rx/storage.py",
      "to": "reversed",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/rx/storage.py",
      "to": "save_psi",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/rx/storage.py",
      "to": "select",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/receipts.py",
      "to": "Plockfile",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/receipts.py",
      "to": "Session",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/receipts.py",
      "to": "all",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/receipts.py",
      "to": "any",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/receipts.py",
      "to": "dict",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/receipts.py",
      "to": "error",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/receipts.py",
      "to": "exec",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/receipts.py",
      "to": "first",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/receipts.py",
      "to": "get",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/receipts.py",
      "to": "info",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/receipts.py",
      "to": "json",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/receipts.py",
      "to": "len",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/receipts.py",
      "to": "next",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/receipts.py",
      "to": "process_receipts",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/receipts.py",
      "to": "seal_plock",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/receipts.py",
      "to": "select",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/receipts.py",
      "to": "where",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/strike.py",
      "to": "Environment",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/strike.py",
      "to": "FileSystemLoader",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/strike.py",
      "to": "RuntimeError",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/strike.py",
      "to": "Session",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/strike.py",
      "to": "StrikeRun",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/strike.py",
      "to": "_render_template",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/strike.py",
      "to": "add",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/strike.py",
      "to": "all",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/strike.py",
      "to": "append",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/strike.py",
      "to": "check_backpressure",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/strike.py",
      "to": "chore",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/strike.py",
      "to": "commit",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/strike.py",
      "to": "create_pull_request",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/strike.py",
      "to": "dict",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/strike.py",
      "to": "dirname",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/strike.py",
      "to": "exception",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/strike.py",
      "to": "exec",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/strike.py",
      "to": "execute_strike",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/strike.py",
      "to": "feat",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/strike.py",
      "to": "get",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/strike.py",
      "to": "get_config",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/strike.py",
      "to": "get_template",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/strike.py",
      "to": "info",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/strike.py",
      "to": "join",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/strike.py",
      "to": "lower",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/strike.py",
      "to": "one",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/strike.py",
      "to": "receipts",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/strike.py",
      "to": "render",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/strike.py",
      "to": "select",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/strike.py",
      "to": "split",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/strike.py",
      "to": "strftime",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/strike.py",
      "to": "utcnow",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/strike.py",
      "to": "warning",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/strike.py",
      "to": "where",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/dialogue_bus.py",
      "to": "DialogueEvent",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/dialogue_bus.py",
      "to": "Session",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/dialogue_bus.py",
      "to": "add",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/dialogue_bus.py",
      "to": "all",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/dialogue_bus.py",
      "to": "commit",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/dialogue_bus.py",
      "to": "dumps",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/dialogue_bus.py",
      "to": "exec",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/dialogue_bus.py",
      "to": "get_messages",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/dialogue_bus.py",
      "to": "info",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/dialogue_bus.py",
      "to": "observe_symbol",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/dialogue_bus.py",
      "to": "order_by",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/dialogue_bus.py",
      "to": "post_message",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/dialogue_bus.py",
      "to": "publish",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/dialogue_bus.py",
      "to": "refresh",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/dialogue_bus.py",
      "to": "select",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/dialogue_bus.py",
      "to": "where",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/scoring.py",
      "to": "BudgetTicket",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/scoring.py",
      "to": "StrikeOrder",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/scoring.py",
      "to": "Target",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/scoring.py",
      "to": "_calculate_heuristic_scores",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/scoring.py",
      "to": "_get_anchor_fit",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/scoring.py",
      "to": "_get_value_cost_ratio",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/scoring.py",
      "to": "append",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/scoring.py",
      "to": "exception",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/scoring.py",
      "to": "get",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/scoring.py",
      "to": "in",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/scoring.py",
      "to": "info",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/scoring.py",
      "to": "len",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/scoring.py",
      "to": "list_repos_in_orgs",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/scoring.py",
      "to": "llm_score_and_suggest",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/scoring.py",
      "to": "lower",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/scoring.py",
      "to": "max",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/scoring.py",
      "to": "merge_llm_adjustments",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/scoring.py",
      "to": "min",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/scoring.py",
      "to": "monotonic",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/scoring.py",
      "to": "or",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/scoring.py",
      "to": "perform_harmony_review",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/scoring.py",
      "to": "pop",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/scoring.py",
      "to": "select_targets",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/scoring.py",
      "to": "sorted",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/agent_loop.py",
      "to": "info",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/agent_loop.py",
      "to": "post_message",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/agent_loop.py",
      "to": "run_agent_loop",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/agent_loop.py",
      "to": "sleep",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ledger.py",
      "to": "LedgerEntry",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ledger.py",
      "to": "Session",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ledger.py",
      "to": "_hash_plockfile",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ledger.py",
      "to": "add",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ledger.py",
      "to": "all",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ledger.py",
      "to": "commit",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ledger.py",
      "to": "desc",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ledger.py",
      "to": "encode",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ledger.py",
      "to": "exec",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ledger.py",
      "to": "get_weighted_snapshot",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ledger.py",
      "to": "hexdigest",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ledger.py",
      "to": "info",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ledger.py",
      "to": "isoformat",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ledger.py",
      "to": "len",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ledger.py",
      "to": "order_by",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ledger.py",
      "to": "query_ledger",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ledger.py",
      "to": "refresh",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ledger.py",
      "to": "seal_plock",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ledger.py",
      "to": "select",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ledger.py",
      "to": "sha256",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ledger.py",
      "to": "sum",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ledger.py",
      "to": "where",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/__init__.py",
      "to": "import",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/requesty_client.py",
      "to": "Anthropic",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/requesty_client.py",
      "to": "RuntimeError",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/requesty_client.py",
      "to": "ValueError",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/requesty_client.py",
      "to": "create",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/requesty_client.py",
      "to": "exception",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/requesty_client.py",
      "to": "get_anthropic_client",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/requesty_client.py",
      "to": "get_config",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/requesty_client.py",
      "to": "hasattr",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/requesty_client.py",
      "to": "infer",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/requesty_client.py",
      "to": "isinstance",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/requesty_client.py",
      "to": "model_dump",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ubiq_solo.py",
      "to": "Path",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ubiq_solo.py",
      "to": "StateCapsule",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ubiq_solo.py",
      "to": "UbiqSoloProtocol",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ubiq_solo.py",
      "to": "__init__",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ubiq_solo.py",
      "to": "_derive_agent_id",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ubiq_solo.py",
      "to": "_derive_anchor_0",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ubiq_solo.py",
      "to": "_ensure_reintegration_token",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ubiq_solo.py",
      "to": "_ensure_seed",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ubiq_solo.py",
      "to": "_format_labels",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ubiq_solo.py",
      "to": "_now",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ubiq_solo.py",
      "to": "append",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ubiq_solo.py",
      "to": "asdict",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ubiq_solo.py",
      "to": "begin_run",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ubiq_solo.py",
      "to": "dataclass",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ubiq_solo.py",
      "to": "dumps",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ubiq_solo.py",
      "to": "encode",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ubiq_solo.py",
      "to": "export_capsule",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ubiq_solo.py",
      "to": "get",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ubiq_solo.py",
      "to": "get_config",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ubiq_solo.py",
      "to": "hexdigest",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ubiq_solo.py",
      "to": "isoformat",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ubiq_solo.py",
      "to": "join",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ubiq_solo.py",
      "to": "record_event",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ubiq_solo.py",
      "to": "replace",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ubiq_solo.py",
      "to": "resolve",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ubiq_solo.py",
      "to": "set_config",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ubiq_solo.py",
      "to": "sha3_256",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ubiq_solo.py",
      "to": "sha3_512",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ubiq_solo.py",
      "to": "split",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ubiq_solo.py",
      "to": "state",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ubiq_solo.py",
      "to": "str",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/ubiq_solo.py",
      "to": "utcnow",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/schemas.py",
      "to": "BudgetTicket",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/schemas.py",
      "to": "CovenantLimits",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/schemas.py",
      "to": "CovenantPacket",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/schemas.py",
      "to": "CovenantPolicy",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/schemas.py",
      "to": "CovenantScope",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/schemas.py",
      "to": "DelegationAssignment",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/schemas.py",
      "to": "DelegationPlan",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/schemas.py",
      "to": "Field",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/schemas.py",
      "to": "FusionEnqueueRequest",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/schemas.py",
      "to": "FusionProcessRequest",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/schemas.py",
      "to": "FusionStatus",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/schemas.py",
      "to": "Goal",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/schemas.py",
      "to": "LedgerEntry",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/schemas.py",
      "to": "Plockfile",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/schemas.py",
      "to": "ProofReceipt",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/schemas.py",
      "to": "StrikeOrder",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/schemas.py",
      "to": "Target",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/schemas.py",
      "to": "ValueError",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/schemas.py",
      "to": "check_max_repos",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/schemas.py",
      "to": "check_review_minutes",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/schemas.py",
      "to": "goal_must_exist",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/schemas.py",
      "to": "validator",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/rust_bridge.py",
      "to": "HarpoonEngine",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/rust_bridge.py",
      "to": "RustHarpoonBridge",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/rust_bridge.py",
      "to": "__init__",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/rust_bridge.py",
      "to": "_initialise_engine",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/rust_bridge.py",
      "to": "_update_thread_metadata",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/rust_bridge.py",
      "to": "available",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/rust_bridge.py",
      "to": "configure_threads",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/rust_bridge.py",
      "to": "configured_threads",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/rust_bridge.py",
      "to": "encode",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/rust_bridge.py",
      "to": "envelope_cycle",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/rust_bridge.py",
      "to": "exception",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/rust_bridge.py",
      "to": "fingerprint",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/rust_bridge.py",
      "to": "float",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/rust_bridge.py",
      "to": "fragment_hash",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/rust_bridge.py",
      "to": "get",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/rust_bridge.py",
      "to": "getattr",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/rust_bridge.py",
      "to": "getenv",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/rust_bridge.py",
      "to": "hash_fragment",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/rust_bridge.py",
      "to": "hexdigest",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/rust_bridge.py",
      "to": "info",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/rust_bridge.py",
      "to": "initialised",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/rust_bridge.py",
      "to": "int",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/rust_bridge.py",
      "to": "max",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/rust_bridge.py",
      "to": "run_cycle",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/rust_bridge.py",
      "to": "sha3_256",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/rust_bridge.py",
      "to": "thread_count",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/rust_bridge.py",
      "to": "warning",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/config_service.py",
      "to": "KvConfig",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/config_service.py",
      "to": "Session",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/config_service.py",
      "to": "add",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/config_service.py",
      "to": "all",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/config_service.py",
      "to": "commit",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/config_service.py",
      "to": "create_all",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/config_service.py",
      "to": "create_engine",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/config_service.py",
      "to": "def_create_db_and_tables",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/config_service.py",
      "to": "exec",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/config_service.py",
      "to": "first",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/config_service.py",
      "to": "get_config",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/config_service.py",
      "to": "getenv",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/config_service.py",
      "to": "info",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/config_service.py",
      "to": "len",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/config_service.py",
      "to": "load_all_configs",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/config_service.py",
      "to": "refresh",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/config_service.py",
      "to": "select",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/config_service.py",
      "to": "set_config",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/config_service.py",
      "to": "str",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/config_service.py",
      "to": "upper",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/config_service.py",
      "to": "where",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/github_client.py",
      "to": "AppAuth",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/github_client.py",
      "to": "Github",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/github_client.py",
      "to": "RuntimeError",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/github_client.py",
      "to": "Token",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/github_client.py",
      "to": "append",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/github_client.py",
      "to": "b64decode",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/github_client.py",
      "to": "basename",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/github_client.py",
      "to": "create_file",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/github_client.py",
      "to": "create_git_ref",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/github_client.py",
      "to": "create_pull",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/github_client.py",
      "to": "create_pull_request",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/github_client.py",
      "to": "decode",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/github_client.py",
      "to": "exception",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/github_client.py",
      "to": "get_branch",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/github_client.py",
      "to": "get_config",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/github_client.py",
      "to": "get_contents",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/github_client.py",
      "to": "get_github_client",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/github_client.py",
      "to": "get_installation_auth",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/github_client.py",
      "to": "get_organization",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/github_client.py",
      "to": "get_pulls",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/github_client.py",
      "to": "get_repo",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/github_client.py",
      "to": "get_repos",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/github_client.py",
      "to": "get_topics",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/github_client.py",
      "to": "info",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/github_client.py",
      "to": "isoformat",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/github_client.py",
      "to": "items",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/github_client.py",
      "to": "list_repos_in_orgs",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/github_client.py",
      "to": "update_file",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/github_client.py",
      "to": "warning",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "FusionBridge",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "FusionTrail",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "Session",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "ValueError",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "_Fragment",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "_FusionRun",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "__init__",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "_ensure_run",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "_extract_fragments",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "_persist_run",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "_score_fragment",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "add",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "append",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "backend",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "begin_run",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "commit",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "compile",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "compute_hash",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "count",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "dataclass",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "deque",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "dumps",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "endswith",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "enqueue_dump",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "exec",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "export_capsule",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "field",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "finditer",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "first",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "fragment_hash",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "get",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "get_status",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "group",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "info",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "int",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "join",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "len",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "list",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "log",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "max",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "memory",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "min",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "popleft",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "process_envelope",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "record_event",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "refresh",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "round",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "run_cycle",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "s",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "select",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "set",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "splitlines",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "startswith",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "str",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "strip",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "sum",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "time",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "time_to_datetime",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "to_payload",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "utcfromtimestamp",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/fusion_bridge.py",
      "to": "where",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/synthesis.py",
      "to": "DelegationPlan",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/synthesis.py",
      "to": "ValueError",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/synthesis.py",
      "to": "dict",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/synthesis.py",
      "to": "dumps",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/synthesis.py",
      "to": "exception",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/synthesis.py",
      "to": "find",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/synthesis.py",
      "to": "get_config",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/synthesis.py",
      "to": "infer",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/synthesis.py",
      "to": "int",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/synthesis.py",
      "to": "llm_delegation_plan",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/synthesis.py",
      "to": "llm_score_and_suggest",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/synthesis.py",
      "to": "loads",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/synthesis.py",
      "to": "next",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/synthesis.py",
      "to": "repo",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/synthesis.py",
      "to": "repository",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/synthesis.py",
      "to": "rfind",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/app/services/synthesis.py",
      "to": "tier",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "Err",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "Ok",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "Some",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "ThreadPoolBuild",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "absorbed",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "add",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "add_function",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "allow_threads",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "anchor_next",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "anchor_prev",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "anchors",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "as_bytes",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "as_dict",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "body_len",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "build",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "call_method1",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "cfg",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "cfg_attr",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "chars",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "clamp",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "clone",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "collect",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "compute_anchor_hash",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "compute_comment_ratio",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "compute_fingerprint",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "compute_indent_balance",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "compute_states",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "configured_threads",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "count",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "current_num_threads",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "default",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "derive",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "detect_language",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "encode",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "ends_with",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "envelope_cycle",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "error",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "event",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "events",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "expect",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "extract",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "finalize",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "fingerprint",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "fragment_hash",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "from",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "from_data",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "from_str",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "from_value",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "get_item",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "get_mut",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "harpoon_core",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "hash",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "hygiene_score",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "idx",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "import_bound",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "install",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "into",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "into_iter",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "into_par_iter",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "is_empty",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "is_match",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "iter",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "iteration_index",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "iterations",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "language",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "len",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "lines",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "map",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "map_err",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "max",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "min",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "new",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "new_err",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "not",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "num_threads",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "path",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "pending",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "pop_front",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "powi",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "push",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "push_back",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "push_front",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "pyclass",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "pyo3",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "round",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "run_cycle",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "serde_json_to_py",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "split_whitespace",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "starts_with",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "take_while",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "thread_count",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "threads",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "to_ascii_lowercase",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "to_report",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "to_string",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "to_value",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "trim",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "unwrap_or",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "update",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "wasm_bindgen",
      "edge": "calls"
    },
    {
      "from": "file:ubiquity-harpoon/rust/harpoon-core/src/lib.rs",
      "to": "with_min_len",
      "edge": "calls"
    }
  ],
  "contracts": [],
  "status": {
    "generatedAt": "2025-09-23T16:54:51Z"
  }
}